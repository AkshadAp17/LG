{"file_contents":{"POLICE_CREDENTIALS.md":{"content":"# Police Station Login Credentials\n\nAll police officers can login with their email addresses and the password: **password123**\n\n## Complete List of Police Station Accounts\n\n### Delhi Police Stations (4 stations)\n- **Connaught Place** - Email: `cp.delhi@police.gov.in` | Code: DEL-001\n- **Karol Bagh** - Email: `kb.delhi@police.gov.in` | Code: DEL-002  \n- **Rohini** - Email: `rohini.delhi@police.gov.in` | Code: DEL-003\n- **Dwarka** - Email: `dwarka.delhi@police.gov.in` | Code: DEL-004\n\n### Mumbai/Maharashtra Police Stations (6 stations)\n- **Bandra Mumbai** - Email: `bandra.mumbai@police.gov.in` | Code: MUM-001\n- **Andheri Mumbai** - Email: `andheri.mumbai@police.gov.in` | Code: MUM-002\n- **Colaba Mumbai** - Email: `colaba.mumbai@police.gov.in` | Code: MUM-003\n- **Thane** - Email: `thane.maharashtra@police.gov.in` | Code: MAH-001\n- **Pune** - Email: `pune.maharashtra@police.gov.in` | Code: PUN-001\n- **Nashik** - Email: `nashik.maharashtra@police.gov.in` | Code: NAS-001\n\n### Bangalore/Karnataka Police Stations (4 stations)\n- **Koramangala** - Email: `koramangala.bangalore@police.gov.in` | Code: BLR-001\n- **Whitefield** - Email: `whitefield.bangalore@police.gov.in` | Code: BLR-002\n- **MG Road** - Email: `mgroad.bangalore@police.gov.in` | Code: BLR-003\n- **Mysore** - Email: `mysore.karnataka@police.gov.in` | Code: MYS-001\n\n### Chennai/Tamil Nadu Police Stations (5 stations)\n- **T Nagar** - Email: `tnagar.chennai@police.gov.in` | Code: CHN-001\n- **Anna Nagar** - Email: `annanagar.chennai@police.gov.in` | Code: CHN-002\n- **Velachery** - Email: `velachery.chennai@police.gov.in` | Code: CHN-003\n- **Coimbatore** - Email: `coimbatore.tamilnadu@police.gov.in` | Code: COI-001\n- **Madurai** - Email: `madurai.tamilnadu@police.gov.in` | Code: MAD-001\n\n### Hyderabad/Telangana Police Stations (3 stations)\n- **Cyberabad** - Email: `cyberabad.hyderabad@police.gov.in` | Code: HYD-001\n- **Secunderabad** - Email: `secunderabad.hyderabad@police.gov.in` | Code: HYD-002\n- **Banjara Hills** - Email: `banjarahills.hyderabad@police.gov.in` | Code: HYD-003\n\n### Kolkata/West Bengal Police Stations (3 stations)\n- **Park Street** - Email: `parkstreet.kolkata@police.gov.in` | Code: KOL-001\n- **Salt Lake** - Email: `saltlake.kolkata@police.gov.in` | Code: KOL-002\n- **Howrah** - Email: `howrah.westbengal@police.gov.in` | Code: HOW-001\n\n### Ahmedabad/Gujarat Police Stations (3 stations)\n- **Ellis Bridge** - Email: `ellisbridge.ahmedabad@police.gov.in` | Code: AHM-001\n- **Satellite** - Email: `satellite.ahmedabad@police.gov.in` | Code: AHM-002\n- **Surat** - Email: `surat.gujarat@police.gov.in` | Code: SUR-001\n\n### Jaipur/Rajasthan Police Stations (3 stations)\n- **Civil Lines Jaipur** - Email: `civillines.jaipur@police.gov.in` | Code: JAI-001\n- **Malviya Nagar** - Email: `malviyanagar.jaipur@police.gov.in` | Code: JAI-002\n- **Jodhpur** - Email: `jodhpur.rajasthan@police.gov.in` | Code: JOD-001\n\n### Lucknow/Uttar Pradesh Police Stations (4 stations)\n- **Hazratganj** - Email: `hazratganj.lucknow@police.gov.in` | Code: LUC-001\n- **Gomti Nagar** - Email: `gomtinagar.lucknow@police.gov.in` | Code: LUC-002\n- **Varanasi** - Email: `varanasi.uttarpradesh@police.gov.in` | Code: VAR-001\n- **Agra** - Email: `agra.uttarpradesh@police.gov.in` | Code: AGR-001\n\n### Punjab/Haryana/Chandigarh Police Stations (4 stations)\n- **Sector 17 Chandigarh** - Email: `sector17.chandigarh@police.gov.in` | Code: CHD-001\n- **Mohali** - Email: `mohali.punjab@police.gov.in` | Code: MOH-001\n- **Ludhiana** - Email: `ludhiana.punjab@police.gov.in` | Code: LUD-001\n- **Gurgaon** - Email: `gurgaon.haryana@police.gov.in` | Code: GUR-001\n\n### Other Major States (18 stations)\n- **Bhubaneswar (Odisha)** - Email: `bhubaneswar.odisha@police.gov.in` | Code: BBR-001\n- **Cuttack (Odisha)** - Email: `cuttack.odisha@police.gov.in` | Code: CUT-001\n- **Ernakulam (Kerala)** - Email: `ernakulam.kochi@police.gov.in` | Code: KOC-001\n- **Fort Kochi (Kerala)** - Email: `fortkochi.kerala@police.gov.in` | Code: KOC-002\n- **Trivandrum (Kerala)** - Email: `trivandrum.kerala@police.gov.in` | Code: TVM-001\n- **Pan Bazaar (Assam)** - Email: `panbazaar.guwahati@police.gov.in` | Code: GUW-001\n- **Dispur (Assam)** - Email: `dispur.assam@police.gov.in` | Code: GUW-002\n- **Imphal (Manipur)** - Email: `imphal.manipur@police.gov.in` | Code: IMP-001\n- **Vijay Nagar (MP)** - Email: `vijaynagar.indore@police.gov.in` | Code: IND-001\n- **MP Nagar (MP)** - Email: `mpnagar.bhopal@police.gov.in` | Code: BHO-001\n- **Boring Road (Bihar)** - Email: `boringroad.patna@police.gov.in` | Code: PAT-001\n- **Gandhi Maidan (Bihar)** - Email: `gandhimaidan.bihar@police.gov.in` | Code: PAT-002\n- **Clock Tower (Uttarakhand)** - Email: `clocktower.dehradun@police.gov.in` | Code: DEH-001\n- **Haridwar (Uttarakhand)** - Email: `haridwar.uttarakhand@police.gov.in` | Code: HAR-001\n- **Raipur (Chhattisgarh)** - Email: `civillines.raipur@police.gov.in` | Code: RAI-001\n- **Ranchi (Jharkhand)** - Email: `mainroad.ranchi@police.gov.in` | Code: RAN-001\n- **Shimla (HP)** - Email: `themall.shimla@police.gov.in` | Code: SHI-001\n- **Jammu (J&K)** - Email: `gandhinagar.jammu@police.gov.in` | Code: JAM-001\n- **Srinagar (J&K)** - Email: `dalgate.srinagar@police.gov.in` | Code: SRI-001\n- **Panaji (Goa)** - Email: `panaji.goa@police.gov.in` | Code: GOA-001\n- **Margao (Goa)** - Email: `margao.goa@police.gov.in` | Code: GOA-002\n\n## Total Coverage\n- **60+ Police Stations** across all major Indian states\n- **All officers use the same password:** `password123`\n- **Email format:** `stationname.state@police.gov.in`\n\n## Test Login\nYou can login to any police station account using:\n1. Email: Any of the above emails\n2. Password: password123\n3. Role: Police Officer\n\n## Client & Lawyer Test Accounts\n- **Client:** john.smith@email.com / password123\n- **Client:** alice.johnson@email.com / password123  \n- **Lawyer:** sarah.johnson@lawfirm.com / password123\n- **Lawyer:** michael.chen@lawfirm.com / password123\n- **Lawyer:** priya.sharma@lawfirm.com / password123\n- **Lawyer:** rajesh.kumar@lawfirm.com / password123\n\n## Features Available to Police Officers\n- View and manage case requests from clients\n- Approve or reject cases\n- View case details including accused names (now highlighted in red)\n- Access assigned police station information in case details","size_bytes":6300},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Legal Case Management System\n\n## Overview\n\nThis is a comprehensive Legal Case Management System built as a full-stack web application. The system facilitates connections between clients and lawyers, enables case management, document handling, and communication. It serves three primary user types: clients who need legal assistance, lawyers who provide legal services, and police officials who can manage case approvals.\n\nThe application provides features for case creation and tracking, lawyer discovery and selection, document management, calendar scheduling for hearings, messaging between parties, and notification systems for case updates.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React 18** with TypeScript for type safety and modern component patterns\n- **Vite** as the build tool and development server for fast compilation and hot reloading\n- **Wouter** for lightweight client-side routing\n- **TanStack Query (React Query)** for server state management, caching, and API synchronization\n- **Tailwind CSS** with shadcn/ui component library for consistent, responsive UI design\n- **Chart.js** for data visualization of case statistics\n- **UI/UX Decisions**: Modernized interface with dark gradient themes, animated navigation, professional user profile sections, gradient headers, live status indicators, improved stats cards with hover effects, \"wired\" secure communication appearance for messaging, professional case management hub design, colorful gradient headers for calendar, secure vault appearance for documents, legal expert network theme for lawyer search, consistent modern design language with gradients, shadows, and animations. Enhanced user experience with live status indicators, hover effects, professional color schemes, password visibility toggles, and improved form layouts.\n\n### Backend Architecture\n- **Express.js** with TypeScript for the RESTful API server\n- **MongoDB with Mongoose ODM** for flexible document-based data storage\n- **JWT (JSON Web Tokens)** for stateless authentication and session management\n- **Multer** middleware for handling file uploads\n- **Bcrypt** for secure password hashing\n- **Session-based architecture** with middleware for authentication and authorization.\n- The server implements a layered architecture with clear separation between routes, business logic, and data access layers. Role-based access control ensures proper permissions for different user types.\n\n### Data Storage Solutions\n- **MongoDB** as the primary database for storing users, cases, messages, and notifications\n- **Mongoose schemas** define data models with validation and relationships\n- **File system storage** for uploaded documents with organized directory structure\n- **Database seeding** functionality for development and testing environments\n\n### Authentication and Authorization\n- **JWT-based authentication** with token storage\n- **Role-based access control** supporting client, lawyer, and police user types\n- **Protected routes** with authentication middleware on both client and server\n- **Password hashing** using bcrypt\n\n### API Design\n- **RESTful API** following standard HTTP methods and status codes\n- **Structured endpoints** for authentication, users, lawyers, cases, messages, and notifications\n- **File upload endpoints** with validation for document types and size limits\n- **Query parameter support** for filtering and searching data\n\n## External Dependencies\n\n### Database\n- **MongoDB** - Primary database for document storage.\n\n### UI and Styling\n- **Radix UI** - Headless component library for accessible UI primitives.\n- **Tailwind CSS** - Utility-first CSS framework.\n- **shadcn/ui** - Pre-built component system built on Radix UI and Tailwind CSS.\n\n### Communication and Notifications\n- **Nodemailer** - Email service for sending case notifications and updates.\n- **SMTP configuration** - Email server integration for automated notifications.\n\n### File Management\n- **Multer** - Middleware for handling multipart/form-data and file uploads.\n\n### Additional Libraries\n- **Date-fns** - JavaScript date utility library.\n- **Zod** - Schema validation library for runtime type checking.\n- **Class Variance Authority (CVA)** - Utility for creating variant-based component APIs.\n- **CLSX** - Utility for constructing className strings conditionally.","size_bytes":4399},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import mongoose from 'mongoose';\n\nconst connectDB = async () => {\n  try {\n    const mongoUri = process.env.MONGODB_URI || process.env.DATABASE_URL || 'mongodb://localhost:27017/legal_case_management';\n    const conn = await mongoose.connect(mongoUri);\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error('Error connecting to MongoDB:', error);\n    console.log('Falling back to in-memory mode for development...');\n    // Don't exit, allow the app to continue without database for basic testing\n  }\n};\n\n// User Model\nconst userSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  phone: { type: String, required: true },\n  role: { type: String, enum: ['client', 'lawyer', 'police'], required: true },\n  city: String,\n  specialization: [String],\n  experience: Number,\n  policeStationCode: String,\n  stats: {\n    totalCases: { type: Number, default: 0 },\n    wonCases: { type: Number, default: 0 },\n    lostCases: { type: Number, default: 0 },\n  },\n  rating: { type: Number, default: 0 },\n}, { timestamps: true });\n\nexport const UserModel = mongoose.model('User', userSchema);\n\n// Lawyer Model\nconst lawyerSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  phone: { type: String, required: true },\n  specialization: [String],\n  city: { type: String, required: true },\n  experience: { type: Number, required: true },\n  rating: { type: Number, default: 0 },\n  stats: {\n    totalCases: { type: Number, default: 0 },\n    wonCases: { type: Number, default: 0 },\n    lostCases: { type: Number, default: 0 },\n  },\n  description: String,\n  image: String,\n}, { timestamps: true });\n\nexport const LawyerModel = mongoose.model('Lawyer', lawyerSchema);\n\n// Case Model\nconst caseSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  caseType: { type: String, enum: ['fraud', 'theft', 'murder', 'civil', 'corporate'], required: true },\n  victim: {\n    name: { type: String, required: true },\n    phone: { type: String, required: true },\n    email: String,\n  },\n  accused: {\n    name: { type: String, required: true },\n    phone: String,\n    address: String,\n  },\n  clientId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  lawyerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },\n  policeStationId: { type: mongoose.Schema.Types.ObjectId, ref: 'PoliceStation', required: true },\n  city: { type: String, required: true },\n  status: { \n    type: String, \n    enum: ['draft', 'submitted', 'under_review', 'approved', 'rejected'], \n    default: 'submitted' \n  },\n  pnr: String,\n  hearingDate: Date,\n  documents: [String],\n}, { timestamps: true });\n\nexport const CaseModel = mongoose.model('Case', caseSchema);\n\n// Police Station Model\nconst policeStationSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  code: { type: String, required: true, unique: true },\n  city: { type: String, required: true },\n  address: { type: String, required: true },\n  phone: { type: String, required: true },\n  email: { type: String, required: true },\n}, { timestamps: true });\n\nexport const PoliceStationModel = mongoose.model('PoliceStation', policeStationSchema);\n\n// Message Model\nconst messageSchema = new mongoose.Schema({\n  senderId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  receiverId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  caseId: { type: mongoose.Schema.Types.ObjectId, ref: 'Case' },\n  content: { type: String, required: true },\n  read: { type: Boolean, default: false },\n}, { timestamps: true });\n\nexport const MessageModel = mongoose.model('Message', messageSchema);\n\n// Case Request Model (for client to lawyer communication)\nconst caseRequestSchema = new mongoose.Schema({\n  clientId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  lawyerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  \n  // Simplified fields - only basic info from client\n  victimName: { type: String, required: true },\n  accusedName: { type: String, required: true },\n  clientPhone: { type: String, required: true },\n  clientEmail: { type: String },\n  documents: [String],\n  status: { type: String, enum: ['pending', 'accepted', 'rejected'], default: 'pending' },\n  lawyerResponse: { type: String },\n  \n  // Optional detailed fields (filled by lawyer later)\n  caseType: { type: String, enum: ['fraud', 'theft', 'murder', 'civil', 'corporate'] },\n  victim: {\n    name: { type: String },\n    phone: { type: String },\n    email: { type: String }\n  },\n  accused: {\n    name: { type: String },\n    phone: { type: String },\n    address: { type: String }\n  },\n  city: { type: String },\n  policeStationId: { type: mongoose.Schema.Types.ObjectId, ref: 'PoliceStation' },\n}, { timestamps: true });\n\nexport const CaseRequestModel = mongoose.model('CaseRequest', caseRequestSchema);\n\n// Notification Model\nconst notificationSchema = new mongoose.Schema({\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },\n  title: { type: String, required: true },\n  message: { type: String, required: true },\n  type: { \n    type: String, \n    enum: ['case_approved', 'case_rejected', 'hearing_scheduled', 'new_message', 'case_created', 'case_request'],\n    required: true \n  },\n  read: { type: Boolean, default: false },\n  caseId: { type: mongoose.Schema.Types.ObjectId, ref: 'Case' },\n  caseRequestId: { type: mongoose.Schema.Types.ObjectId, ref: 'CaseRequest' },\n}, { timestamps: true });\n\nexport const NotificationModel = mongoose.model('Notification', notificationSchema);\n\nexport default connectDB;\n","size_bytes":5947},"server/email.ts":{"content":"import nodemailer from 'nodemailer';\n\nconst transporter = nodemailer.createTransport({\n  host: process.env.EMAIL_HOST || 'smtp.gmail.com',\n  port: parseInt(process.env.EMAIL_PORT || '587'),\n  secure: false,\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASS,\n  },\n});\n\nexport const sendEmail = async (to: string, subject: string, text: string, html?: string) => {\n  try {\n    const info = await transporter.sendMail({\n      from: process.env.EMAIL_USER,\n      to,\n      subject,\n      text,\n      html: html || text,\n    });\n    console.log('Email sent:', info.messageId);\n    return info;\n  } catch (error) {\n    console.error('Error sending email:', error);\n    throw error;\n  }\n};\n\nexport const sendCaseApprovalEmail = async (\n  userEmail: string, \n  lawyerEmail: string, \n  caseTitle: string, \n  pnr: string, \n  hearingDate: string\n) => {\n  const subject = `✅ Case Approved - ${caseTitle}`;\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f8fafc; padding: 20px;\">\n      <div style=\"background: white; border-radius: 12px; padding: 30px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);\">\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <div style=\"background: #10b981; width: 60px; height: 60px; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; margin-bottom: 16px;\">\n            <span style=\"color: white; font-size: 24px;\">✅</span>\n          </div>\n          <h1 style=\"color: #1e293b; margin: 0; font-size: 24px; font-weight: bold;\">Case Approved!</h1>\n        </div>\n        \n        <div style=\"background: #f0f9ff; padding: 20px; border-radius: 8px; border-left: 4px solid #0ea5e9; margin-bottom: 20px;\">\n          <h3 style=\"color: #0c4a6e; margin: 0 0 10px 0;\">Case Details</h3>\n          <p style=\"color: #475569; margin: 8px 0;\"><strong>Case:</strong> ${caseTitle}</p>\n          <p style=\"color: #475569; margin: 8px 0;\"><strong>PNR:</strong> ${pnr}</p>\n          <p style=\"color: #475569; margin: 8px 0;\"><strong>Hearing Date:</strong> ${hearingDate}</p>\n        </div>\n        \n        <p style=\"color: #64748b; line-height: 1.6; margin-bottom: 20px;\">\n          Your case has been officially approved by the police authorities. Please keep your PNR number safe for future reference.\n        </p>\n        \n        <div style=\"text-align: center; margin-top: 30px;\">\n          <p style=\"color: #94a3b8; font-size: 14px;\">\n            Legal Case Management System<br>\n            Professional Legal Services\n          </p>\n        </div>\n      </div>\n    </div>\n  `;\n  \n  await Promise.all([\n    sendEmail(userEmail, subject, `Your case \"${caseTitle}\" has been approved. PNR: ${pnr}. Hearing Date: ${hearingDate}`, htmlContent),\n    sendEmail(lawyerEmail, subject, `Case \"${caseTitle}\" has been approved. PNR: ${pnr}. Hearing Date: ${hearingDate}`, htmlContent),\n  ]);\n};\n\nexport const sendCaseRejectionEmail = async (\n  userEmail: string, \n  lawyerEmail: string, \n  caseTitle: string, \n  reason?: string\n) => {\n  const subject = `❌ Case Rejected - ${caseTitle}`;\n  const htmlContent = `\n    <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f8fafc; padding: 20px;\">\n      <div style=\"background: white; border-radius: 12px; padding: 30px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);\">\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <div style=\"background: #ef4444; width: 60px; height: 60px; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; margin-bottom: 16px;\">\n            <span style=\"color: white; font-size: 24px;\">❌</span>\n          </div>\n          <h1 style=\"color: #1e293b; margin: 0; font-size: 24px; font-weight: bold;\">Case Rejected</h1>\n        </div>\n        \n        <div style=\"background: #fef2f2; padding: 20px; border-radius: 8px; border-left: 4px solid #ef4444; margin-bottom: 20px;\">\n          <h3 style=\"color: #991b1b; margin: 0 0 10px 0;\">Case Details</h3>\n          <p style=\"color: #475569; margin: 8px 0;\"><strong>Case:</strong> ${caseTitle}</p>\n          ${reason ? `<p style=\"color: #475569; margin: 8px 0;\"><strong>Reason:</strong> ${reason}</p>` : ''}\n        </div>\n        \n        <p style=\"color: #64748b; line-height: 1.6; margin-bottom: 20px;\">\n          Unfortunately, your case has been rejected by the police authorities. ${reason ? 'Please review the reason provided above.' : 'Please contact the relevant authorities for more information.'}\n        </p>\n        \n        <div style=\"text-align: center; margin-top: 30px;\">\n          <p style=\"color: #94a3b8; font-size: 14px;\">\n            Legal Case Management System<br>\n            Professional Legal Services\n          </p>\n        </div>\n      </div>\n    </div>\n  `;\n  \n  await Promise.all([\n    sendEmail(userEmail, subject, `Your case \"${caseTitle}\" has been rejected. ${reason ? `Reason: ${reason}` : ''}`, htmlContent),\n    sendEmail(lawyerEmail, subject, `Case \"${caseTitle}\" has been rejected. ${reason ? `Reason: ${reason}` : ''}`, htmlContent),\n  ]);\n};\n","size_bytes":5135},"server/index.ts":{"content":"import dotenv from 'dotenv';\ndotenv.config();\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2113},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from 'multer';\nimport path from 'path';\nimport express from 'express';\nimport fs from 'fs';\nimport { storage } from \"./storage.js\";\nimport { authenticateToken, requireRole } from './middleware/auth.js';\nimport connectDB, { CaseModel, NotificationModel } from './db.js';\nimport { seedDatabase } from './seeder.js';\nimport { \n  insertUserSchema, loginSchema, insertCaseSchema,\n  insertMessageSchema, insertNotificationSchema, insertCaseRequestSchema\n} from \"@shared/schema.js\";\nimport { sendCaseApprovalEmail, sendCaseRejectionEmail } from './email.js';\n\n// Ensure uploads directory exists\nconst uploadsDir = path.join(process.cwd(), 'uploads');\nif (!fs.existsSync(uploadsDir)) {\n  fs.mkdirSync(uploadsDir, { recursive: true });\n}\n\n// Configure multer for file uploads\nconst storage_multer = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst upload = multer({ \n  storage: storage_multer,\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|pdf|doc|docx/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n\n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('Only images and documents are allowed'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Static file serving for uploads\n  app.use('/uploads', express.static('uploads'));\n  \n  // Initialize database connection and seed data\n  await connectDB();\n  await seedDatabase();\n\n  // Auth routes\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const loginData = loginSchema.parse(req.body);\n      const result = await storage.login(loginData);\n      res.json(result);\n    } catch (error: any) {\n      res.status(401).json({ message: error.message || 'Login failed' });\n    }\n  });\n\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.register(userData);\n      res.status(201).json(user);\n    } catch (error: any) {\n      console.error('Registration error:', error.message);\n      res.status(400).json({ message: error.message || 'Registration failed' });\n    }\n  });\n\n  app.get('/api/auth/me', authenticateToken, async (req: any, res) => {\n    res.json(req.user);\n  });\n\n  // Police Stations routes\n  app.get('/api/police-stations', async (req, res) => {\n    try {\n      const { city } = req.query;\n      const policeStations = await storage.getPoliceStations(city as string);\n      res.json(policeStations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch police stations' });\n    }\n  });\n\n  app.get('/api/police-stations/:id', async (req, res) => {\n    try {\n      const policeStation = await storage.getPoliceStation(req.params.id);\n      if (!policeStation) {\n        return res.status(404).json({ message: 'Police station not found' });\n      }\n      res.json(policeStation);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch police station' });\n    }\n  });\n\n  // Lawyers routes\n  app.get('/api/lawyers', async (req, res) => {\n    try {\n      const { city, caseType } = req.query;\n      const lawyers = await storage.getLawyers({\n        city: city as string,\n        caseType: caseType as string,\n      });\n      res.json(lawyers);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch lawyers' });\n    }\n  });\n\n  // Get users by role (for messaging)\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const { role } = req.query;\n      \n      if (role) {\n        // If role is specified, filter by role\n        const users = await storage.getUsersByRole(role as string);\n        res.json(users);\n      } else {\n        // If no role specified, return all users (for messaging)\n        const users = await storage.getAllUsers();\n        res.json(users);\n      }\n    } catch (error: any) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get('/api/lawyers/:id', async (req, res) => {\n    try {\n      const lawyer = await storage.getLawyer(req.params.id);\n      if (!lawyer) {\n        return res.status(404).json({ message: 'Lawyer not found' });\n      }\n      res.json(lawyer);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch lawyer' });\n    }\n  });\n\n  // Cases routes\n  app.get('/api/cases', authenticateToken, async (req: any, res) => {\n    try {\n      const { status } = req.query;\n      const filters: any = {};\n      \n      if (req.user.role === 'client') {\n        filters.clientId = req.user._id;\n      } else if (req.user.role === 'lawyer') {\n        filters.lawyerId = req.user._id;\n      } else if (req.user.role === 'police') {\n        // Police can see all cases for review - no clientId/lawyerId filter\n        // They primarily see cases that need approval\n      }\n      \n      if (status) {\n        filters.status = status;\n      }\n\n      const cases = await storage.getCases(filters);\n      res.json(cases);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch cases' });\n    }\n  });\n\n  app.get('/api/cases/:id', authenticateToken, async (req, res) => {\n    try {\n      const case_ = await storage.getCase(req.params.id);\n      if (!case_) {\n        return res.status(404).json({ message: 'Case not found' });\n      }\n      res.json(case_);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch case' });\n    }\n  });\n\n  app.post('/api/cases', authenticateToken, upload.array('documents', 10), async (req: any, res) => {\n    try {\n      // Parse JSON fields if they exist\n      const parsedBody = { ...req.body };\n      if (parsedBody.victim && typeof parsedBody.victim === 'string') {\n        parsedBody.victim = JSON.parse(parsedBody.victim);\n      }\n      if (parsedBody.accused && typeof parsedBody.accused === 'string') {\n        parsedBody.accused = JSON.parse(parsedBody.accused);\n      }\n\n      const caseData = insertCaseSchema.parse(parsedBody);\n      caseData.clientId = req.user._id;\n      \n      // Handle file uploads\n      if (req.files && req.files.length > 0) {\n        caseData.documents = req.files.map((file: any) => file.filename);\n      }\n\n      const newCase = await storage.createCase(caseData);\n      \n      // Create notification for police station\n      await storage.createNotification({\n        userId: req.user._id,\n        title: 'Case Created',\n        message: `New case \"${newCase.title}\" has been submitted for review`,\n        type: 'case_created',\n        caseId: newCase._id,\n      });\n\n      res.status(201).json(newCase);\n    } catch (error: any) {\n      console.error('Case creation error:', error);\n      res.status(400).json({ message: error.message || 'Failed to create case' });\n    }\n  });\n\n  // Document upload route for existing cases\n  app.post('/api/cases/documents', authenticateToken, upload.array('documents', 10), async (req: any, res) => {\n    try {\n      const { caseId } = req.body;\n      \n      if (!caseId) {\n        return res.status(400).json({ message: 'Case ID is required' });\n      }\n\n      const case_ = await storage.getCase(caseId);\n      if (!case_) {\n        return res.status(404).json({ message: 'Case not found' });\n      }\n\n      // Check if user has permission to upload to this case\n      if (case_.clientId !== req.user._id && req.user.role !== 'lawyer') {\n        return res.status(403).json({ message: 'Insufficient permissions' });\n      }\n\n      if (req.files && req.files.length > 0) {\n        const newDocuments = req.files.map((file: any) => file.filename);\n        const existingDocuments = case_.documents || [];\n        \n        await storage.updateCase(caseId, {\n          documents: [...existingDocuments, ...newDocuments]\n        });\n      }\n\n      res.json({ message: 'Documents uploaded successfully' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to upload documents' });\n    }\n  });\n\n  // Police station routes\n  app.get('/api/police-stations', async (req, res) => {\n    try {\n      const { city } = req.query;\n      const stations = await storage.getPoliceStations(city as string);\n      res.json(stations);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch police stations' });\n    }\n  });\n\n  // Get individual police station by ID\n  app.get('/api/police-stations/:id', async (req, res) => {\n    try {\n      const stationId = req.params.id;\n      const station = await storage.getPoliceStation(stationId);\n      if (!station) {\n        return res.status(404).json({ message: 'Police station not found' });\n      }\n      res.json(station);\n    } catch (error: any) {\n      console.error('Police station fetch error:', error);\n      res.status(500).json({ message: error.message || 'Failed to fetch police station' });\n    }\n  });\n\n  // Case approval/rejection (Police only)\n  app.patch('/api/cases/:id/approve', authenticateToken, requireRole(['police']), async (req: any, res) => {\n    try {\n      const caseId = req.params.id;\n      const case_ = await storage.getCase(caseId);\n      \n      if (!case_) {\n        return res.status(404).json({ message: 'Case not found' });\n      }\n\n      // Generate PNR and hearing date\n      const pnr = `PNR-${new Date().getFullYear()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`;\n      const hearingDate = new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000); // Random date within 30 days\n\n      const updatedCase = await storage.updateCase(caseId, {\n        status: 'approved',\n        pnr,\n        hearingDate,\n      });\n\n      // Send email notifications\n      const client = await storage.getUser(case_.clientId);\n      if (case_.lawyerId) {\n        const lawyer = await storage.getUser(case_.lawyerId);\n        if (client && lawyer) {\n          try {\n            await sendCaseApprovalEmail(\n              client.email,\n              lawyer.email,\n              case_.title,\n              pnr,\n              hearingDate.toDateString()\n            );\n          } catch (emailError) {\n            console.error('Email sending failed:', emailError);\n          }\n        }\n      }\n\n      // Create notifications\n      await storage.createNotification({\n        userId: case_.clientId,\n        title: 'Case Approved',\n        message: `Your case \"${case_.title}\" has been approved. PNR: ${pnr}`,\n        type: 'case_approved',\n        caseId,\n      });\n\n      res.json(updatedCase);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to approve case' });\n    }\n  });\n\n  app.patch('/api/cases/:id/reject', authenticateToken, requireRole(['police']), async (req: any, res) => {\n    try {\n      const caseId = req.params.id;\n      const { reason } = req.body;\n      const case_ = await storage.getCase(caseId);\n      \n      if (!case_) {\n        return res.status(404).json({ message: 'Case not found' });\n      }\n\n      const updatedCase = await storage.updateCase(caseId, {\n        status: 'rejected',\n      });\n\n      // Send email notifications\n      const client = await storage.getUser(case_.clientId);\n      if (case_.lawyerId) {\n        const lawyer = await storage.getUser(case_.lawyerId);\n        if (client && lawyer) {\n          try {\n            await sendCaseRejectionEmail(\n              client.email,\n              lawyer.email,\n              case_.title,\n              reason\n            );\n          } catch (emailError) {\n            console.error('Email sending failed:', emailError);\n          }\n        }\n      }\n\n      // Create notifications\n      await storage.createNotification({\n        userId: case_.clientId,\n        title: 'Case Rejected',\n        message: `Your case \"${case_.title}\" has been rejected. ${reason ? `Reason: ${reason}` : ''}`,\n        type: 'case_rejected',\n        caseId,\n      });\n\n      res.json(updatedCase);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to reject case' });\n    }\n  });\n\n  // Delete case route\n  app.delete('/api/cases/:id', authenticateToken, async (req: any, res) => {\n    try {\n      const caseId = req.params.id;\n      const case_ = await storage.getCase(caseId);\n      \n      if (!case_) {\n        return res.status(404).json({ message: 'Case not found' });\n      }\n      \n      // Check if user has permission to delete the case\n      if (req.user.role === 'client' && case_.clientId.toString() !== req.user._id.toString()) {\n        return res.status(403).json({ message: 'Not authorized to delete this case' });\n      }\n      \n      if (req.user.role === 'lawyer' && case_.lawyerId?.toString() !== req.user._id.toString()) {\n        return res.status(403).json({ message: 'Not authorized to delete this case' });\n      }\n      \n      // Police can delete any case\n      \n      // Delete the case\n      await CaseModel.findByIdAndDelete(caseId);\n      \n      // Create notification\n      const recipientId = req.user.role === 'client' ? case_.lawyerId : case_.clientId;\n      if (recipientId) {\n        await storage.createNotification({\n          userId: recipientId,\n          title: 'Case Deleted',\n          message: `Case \"${case_.title}\" has been deleted by ${req.user.name}`,\n          type: 'case_deleted',\n          caseId: caseId,\n        });\n      }\n      \n      res.json({ message: 'Case deleted successfully' });\n    } catch (error: any) {\n      console.error('Case deletion error:', error);\n      res.status(400).json({ message: error.message || 'Failed to delete case' });\n    }\n  });\n\n  // Messages routes\n  app.get('/api/messages', authenticateToken, async (req: any, res) => {\n    try {\n      const { otherUserId } = req.query;\n      const messages = await storage.getMessages(req.user._id, otherUserId as string);\n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch messages' });\n    }\n  });\n\n  app.post('/api/messages', authenticateToken, async (req: any, res) => {\n    try {\n      const messageData = {\n        receiverId: req.body.receiverId,\n        content: req.body.content,\n        caseId: req.body.caseId,\n        senderId: req.user._id,\n      };\n      \n      const message = await storage.createMessage(messageData);\n      \n      // Create notification for receiver\n      await storage.createNotification({\n        userId: messageData.receiverId,\n        title: 'New Message',\n        message: `You have a new message from ${req.user.name}`,\n        type: 'new_message',\n      });\n\n      res.status(201).json(message);\n    } catch (error: any) {\n      console.error('Message creation error:', error);\n      res.status(400).json({ message: error.message || 'Failed to send message' });\n    }\n  });\n\n  // Notifications routes\n  app.get('/api/notifications', authenticateToken, async (req: any, res) => {\n    try {\n      const notifications = await storage.getNotifications(req.user._id);\n      res.json(notifications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch notifications' });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', authenticateToken, async (req, res) => {\n    try {\n      await storage.markNotificationAsRead(req.params.id);\n      res.json({ message: 'Notification marked as read' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to mark notification as read' });\n    }\n  });\n\n  // Delete all read notifications for user\n  app.delete('/api/notifications/read/all', authenticateToken, async (req: any, res) => {\n    try {\n      await storage.deleteReadNotifications(req.user._id);\n      res.json({ message: 'All read notifications deleted' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to delete read notifications' });\n    }\n  });\n\n  // Dashboard stats\n  app.get('/api/dashboard/stats', authenticateToken, async (req: any, res) => {\n    try {\n      const userId = req.user._id;\n      const userRole = req.user.role;\n      \n      let stats: any = {};\n      \n      if (userRole === 'client') {\n        const cases = await storage.getCases({ clientId: userId });\n        const activeCases = cases.filter(c => c.status === 'approved' || c.status === 'under_review').length;\n        const pendingApprovals = cases.filter(c => c.status === 'under_review').length;\n        const upcomingHearings = cases.filter(c => \n          c.hearingDate && new Date(c.hearingDate) > new Date()\n        ).length;\n        \n        stats = {\n          activeCases,\n          pendingApprovals,\n          upcomingHearings,\n          totalCases: cases.length,\n        };\n      } else if (userRole === 'police') {\n        const casesForReview = await CaseModel.countDocuments({ status: 'under_review' });\n        const approvedToday = await CaseModel.countDocuments({\n          status: 'approved',\n          updatedAt: { $gte: new Date().setHours(0, 0, 0, 0) }\n        });\n        const rejectedCases = await CaseModel.countDocuments({ status: 'rejected' });\n        \n        stats = {\n          pendingReview: casesForReview,\n          approvedToday,\n          rejectedCases,\n        };\n      }\n      \n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch dashboard stats' });\n    }\n  });\n\n  // Case Request routes (for client-lawyer communication)\n  app.get('/api/case-requests', authenticateToken, async (req: any, res) => {\n    try {\n      const filters: any = {};\n      \n      if (req.user.role === 'client') {\n        filters.clientId = req.user._id;\n      } else if (req.user.role === 'lawyer') {\n        filters.lawyerId = req.user._id;\n      }\n      \n      if (req.query.status) {\n        filters.status = req.query.status;\n      }\n      \n      const requests = await storage.getCaseRequests(filters);\n      res.json(requests);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch case requests' });\n    }\n  });\n\n  app.get('/api/case-requests/:id', authenticateToken, async (req: any, res) => {\n    try {\n      const request = await storage.getCaseRequest(req.params.id);\n      if (!request) {\n        return res.status(404).json({ message: 'Case request not found' });\n      }\n      \n      // Check if user has access to this request\n      if (req.user.role === 'client' && request.clientId !== req.user._id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      if (req.user.role === 'lawyer' && request.lawyerId !== req.user._id) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      res.json(request);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || 'Failed to fetch case request' });\n    }\n  });\n\n  app.post('/api/case-requests', authenticateToken, requireRole(['client']), async (req: any, res) => {\n    try {\n      const requestData = {\n        ...req.body,\n        clientId: req.user._id,\n      };\n      \n      const request = await storage.createCaseRequest(requestData);\n      \n      // Create notification for the lawyer\n      await storage.createNotification({\n        userId: requestData.lawyerId,\n        title: 'New Case Request',\n        message: `You have received a new case request from ${req.user.name}: ${requestData.title}`,\n        type: 'case_request',\n        caseRequestId: request._id,\n      });\n      \n      res.status(201).json(request);\n    } catch (error: any) {\n      console.error('Case request creation error:', error);\n      res.status(400).json({ message: error.message || 'Failed to create case request' });\n    }\n  });\n\n  app.patch('/api/case-requests/:id', authenticateToken, requireRole(['lawyer']), async (req: any, res) => {\n    try {\n      const { status, lawyerResponse, autoCreateCase = true, caseDetails } = req.body;\n      \n      // Verify lawyer owns this request\n      const existingRequest = await storage.getCaseRequest(req.params.id);\n      if (!existingRequest || existingRequest.lawyerId.toString() !== req.user._id.toString()) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      const updatedRequest = await storage.updateCaseRequest(req.params.id, {\n        status,\n        lawyerResponse,\n      });\n      \n      if (!updatedRequest) {\n        return res.status(404).json({ message: 'Case request not found' });\n      }\n      \n      // Create notification for client\n      const notificationMessage = status === 'accepted' \n        ? `Your case request \"${updatedRequest.title}\" has been accepted by ${req.user.name}`\n        : `Your case request \"${updatedRequest.title}\" has been rejected by ${req.user.name}`;\n        \n      await storage.createNotification({\n        userId: updatedRequest.clientId,\n        title: status === 'accepted' ? 'Case Request Accepted' : 'Case Request Rejected',\n        message: notificationMessage,\n        type: 'case_request',\n        caseRequestId: updatedRequest._id,\n      });\n      \n      let newCase = null;\n      \n      // If accepted and auto-create is enabled, create the case with submitted status\n      if (status === 'accepted' && autoCreateCase) {\n        // Check if a case already exists for this case request\n        const existingCases = await storage.getCases({ clientId: updatedRequest.clientId, lawyerId: updatedRequest.lawyerId });\n        const hasExistingCase = existingCases.some(c => \n          c.title === updatedRequest.title && \n          c.description === updatedRequest.description\n        );\n        \n        if (hasExistingCase) {\n          return res.status(400).json({ \n            message: 'A case with similar details already exists for this client-lawyer pair',\n            caseRequest: updatedRequest,\n            createdCase: null\n          });\n        }\n\n        // Get client info for city and police station assignment\n        const client = await storage.getUser(updatedRequest.clientId);\n        if (!client) {\n          throw new Error('Client not found');\n        }\n\n        // Debug: Log the actual request data to understand what we have\n        console.log('Case Request Data:', {\n          victimName: updatedRequest.victimName,\n          accusedName: updatedRequest.accusedName,\n          clientPhone: updatedRequest.clientPhone,\n          clientEmail: updatedRequest.clientEmail,\n          victim: updatedRequest.victim,\n          accused: updatedRequest.accused\n        });\n\n        // Find a police station in the client's city, or use any available station\n        let policeStations = await storage.getPoliceStations(client.city);\n        if (policeStations.length === 0) {\n          // If no stations in client's city, get all available stations\n          policeStations = await storage.getAllPoliceStations();\n          if (policeStations.length === 0) {\n            throw new Error('No police stations available in the system');\n          }\n        }\n\n        // Ensure all required fields are populated with fallbacks\n        const victimName = updatedRequest.victimName || updatedRequest.victim?.name || client.name || 'Client';\n        const victimPhone = updatedRequest.victim?.phone || updatedRequest.clientPhone || client.phone || 'Not provided';\n        const accusedName = updatedRequest.accusedName || updatedRequest.accused?.name || 'Unknown';\n\n        console.log('Resolved data:', { victimName, victimPhone, accusedName });\n\n        const caseData = {\n          title: updatedRequest.title,\n          description: updatedRequest.description,\n          caseType: updatedRequest.caseType || caseDetails?.caseType || 'civil' as const,\n          victim: {\n            name: victimName,\n            phone: victimPhone,\n            email: updatedRequest.victim?.email || updatedRequest.clientEmail || client.email || ''\n          },\n          accused: {\n            name: accusedName,\n            phone: updatedRequest.accused?.phone || caseDetails?.accusedPhone || '',\n            address: updatedRequest.accused?.address || caseDetails?.accusedAddress || ''\n          },\n          city: updatedRequest.city || client.city || '',\n          policeStationId: updatedRequest.policeStationId || policeStations[0]._id || '',\n          documents: updatedRequest.documents || [],\n          clientId: updatedRequest.clientId,\n          lawyerId: updatedRequest.lawyerId,\n          status: 'submitted' as const,\n          pnr: caseDetails?.pnr || `PNR${Date.now()}`, // Auto-generate PNR if not provided\n          hearingDate: caseDetails?.hearingDate ? new Date(caseDetails.hearingDate) : undefined,\n        };\n        \n        console.log('Final case data:', caseData);\n        newCase = await storage.createCase(caseData);\n        \n        // Notify client about case creation\n        await storage.createNotification({\n          userId: updatedRequest.clientId,\n          title: 'Case Created',\n          message: `Your case \"${newCase.title}\" has been created and submitted for police review`,\n          type: 'case_created',\n          caseId: newCase._id,\n        });\n      }\n      \n      res.json({ \n        caseRequest: updatedRequest,\n        createdCase: newCase \n      });\n    } catch (error: any) {\n      console.error('Case request update error:', error);\n      res.status(400).json({ message: error.message || 'Failed to update case request' });\n    }\n  });\n\n  // Create case from case request with detailed information\n  app.post('/api/case-requests/:id/create-case', authenticateToken, requireRole(['lawyer']), async (req: any, res) => {\n    try {\n      const caseRequestId = req.params.id;\n      const caseDetails = req.body;\n      \n      // Get the case request\n      const caseRequest = await storage.getCaseRequest(caseRequestId);\n      if (!caseRequest) {\n        return res.status(404).json({ message: 'Case request not found' });\n      }\n      \n      // Verify lawyer owns this request\n      if (caseRequest.lawyerId.toString() !== req.user._id.toString()) {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n      \n      // Get client info\n      const client = await storage.getUser(caseRequest.clientId);\n      if (!client) {\n        throw new Error('Client not found');\n      }\n\n      // Find police station in client's city, or use any available station\n      let policeStations = await storage.getPoliceStations(client.city);\n      if (policeStations.length === 0) {\n        policeStations = await storage.getAllPoliceStations();\n        if (policeStations.length === 0) {\n          throw new Error('No police stations available in the system');\n        }\n      }\n      \n      let policeStationId = caseDetails.policeStationId;\n      if (!policeStationId && policeStations.length > 0) {\n        policeStationId = policeStations[0]._id;\n      }\n\n      // Ensure all required fields are populated with fallbacks\n      const victimName = caseDetails.victimName || caseRequest.victimName || client.name || 'Client';\n      const victimPhone = caseDetails.victimPhone || caseRequest.clientPhone || client.phone || 'Not provided';\n      const accusedName = caseDetails.accusedName || caseRequest.accusedName || 'Unknown';\n\n      // Create comprehensive case data with client details preserved\n      const caseData = {\n        title: caseDetails.title || caseRequest.title,\n        description: caseDetails.description || caseRequest.description,\n        caseType: caseDetails.caseType || caseRequest.caseType || 'civil' as const,\n        victim: {\n          name: victimName,\n          phone: victimPhone,\n          email: caseDetails.victimEmail || caseRequest.clientEmail || client.email || ''\n        },\n        accused: {\n          name: accusedName,\n          phone: caseDetails.accusedPhone || '',\n          address: caseDetails.accusedAddress || ''\n        },\n        city: caseDetails.city || client.city || '',\n        policeStationId: policeStationId,\n        documents: caseDetails.documents || caseRequest.documents || [],\n        clientId: caseRequest.clientId,\n        lawyerId: caseRequest.lawyerId,\n        status: 'submitted' as const,\n        pnr: caseDetails.pnr || `PNR${Date.now()}${Math.floor(Math.random() * 1000)}`,\n        hearingDate: caseDetails.hearingDate ? new Date(caseDetails.hearingDate) : undefined,\n      };\n      \n      const newCase = await storage.createCase(caseData);\n      \n      // Update case request status to accepted if not already\n      if (caseRequest.status !== 'accepted') {\n        await storage.updateCaseRequest(caseRequestId, {\n          status: 'accepted',\n          lawyerResponse: 'Case has been created and submitted for review',\n        });\n      }\n      \n      // Notify client about case creation\n      await storage.createNotification({\n        userId: caseRequest.clientId,\n        title: 'Case Created',\n        message: `Your case \"${newCase.title}\" has been created and submitted for police review. PNR: ${newCase.pnr}`,\n        type: 'case_created',\n        caseId: newCase._id,\n      });\n      \n      res.status(201).json({\n        case: newCase,\n        message: 'Case created successfully with client details'\n      });\n    } catch (error: any) {\n      console.error('Case creation error:', error);\n      res.status(400).json({ message: error.message || 'Failed to create case' });\n    }\n  });\n\n  // Get detailed case request with client information\n  app.get('/api/case-requests/:id/details', authenticateToken, async (req: any, res) => {\n    try {\n      const caseRequest = await storage.getCaseRequest(req.params.id);\n      if (!caseRequest) {\n        return res.status(404).json({ message: 'Case request not found' });\n      }\n      \n      // Get client and lawyer details\n      const client = await storage.getUser(caseRequest.clientId);\n      const lawyer = await storage.getUser(caseRequest.lawyerId);\n      \n      // Get police stations in client's city\n      const policeStations = client?.city ? await storage.getPoliceStations(client.city) : [];\n      \n      res.json({\n        ...caseRequest,\n        clientDetails: client,\n        lawyerDetails: lawyer,\n        availablePoliceStations: policeStations\n      });\n    } catch (error: any) {\n      console.error('Error fetching case request details:', error);\n      res.status(500).json({ message: 'Failed to fetch case request details' });\n    }\n  });\n\n  // Serve uploaded files\n  app.use('/api/uploads', express.static(path.join(process.cwd(), 'uploads')));\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":31151},"server/seeder.ts":{"content":"import { UserModel, LawyerModel, CaseModel, PoliceStationModel } from './db.js';\nimport bcrypt from 'bcrypt';\n\nexport const seedDatabase = async () => {\n  try {\n    // Check if data already exists\n    const existingUsers = await UserModel.countDocuments();\n    if (existingUsers > 0) {\n      console.log('Database already seeded');\n      return;\n    }\n\n    console.log('Seeding database...');\n\n    // Create Comprehensive Police Stations across Indian States\n    const policeStations = [\n      // Delhi\n      { name: 'Connaught Place', code: 'DEL-001', city: 'delhi', address: 'Connaught Place, New Delhi', phone: '+91-11-23341234', email: 'cp.delhi@police.gov.in' },\n      { name: 'Karol Bagh', code: 'DEL-002', city: 'delhi', address: 'Karol Bagh, New Delhi', phone: '+91-11-25753456', email: 'kb.delhi@police.gov.in' },\n      { name: 'Rohini', code: 'DEL-003', city: 'delhi', address: 'Sector 7, Rohini, Delhi', phone: '+91-11-27051234', email: 'rohini.delhi@police.gov.in' },\n      { name: 'Dwarka', code: 'DEL-004', city: 'delhi', address: 'Sector 10, Dwarka, Delhi', phone: '+91-11-25081234', email: 'dwarka.delhi@police.gov.in' },\n      \n      // Mumbai/Maharashtra\n      { name: 'Bandra', code: 'MUM-001', city: 'mumbai', address: 'Bandra West, Mumbai', phone: '+91-22-26421234', email: 'bandra.mumbai@police.gov.in' },\n      { name: 'Andheri', code: 'MUM-002', city: 'mumbai', address: 'Andheri East, Mumbai', phone: '+91-22-26851234', email: 'andheri.mumbai@police.gov.in' },\n      { name: 'Colaba', code: 'MUM-003', city: 'mumbai', address: 'Colaba, Mumbai', phone: '+91-22-22151234', email: 'colaba.mumbai@police.gov.in' },\n      { name: 'Thane', code: 'MAH-001', city: 'pune', address: 'Thane West, Maharashtra', phone: '+91-22-25331234', email: 'thane.maharashtra@police.gov.in' },\n      { name: 'Pune City', code: 'PUN-001', city: 'pune', address: 'FC Road, Pune', phone: '+91-20-26051234', email: 'pune.maharashtra@police.gov.in' },\n      { name: 'Nashik Road', code: 'NAS-001', city: 'nashik', address: 'Nashik Road, Nashik', phone: '+91-253-2451234', email: 'nashik.maharashtra@police.gov.in' },\n      \n      // Bangalore/Karnataka\n      { name: 'Koramangala', code: 'BLR-001', city: 'bangalore', address: 'Koramangala, Bangalore', phone: '+91-80-25531234', email: 'koramangala.bangalore@police.gov.in' },\n      { name: 'Whitefield', code: 'BLR-002', city: 'bangalore', address: 'Whitefield, Bangalore', phone: '+91-80-28451234', email: 'whitefield.bangalore@police.gov.in' },\n      { name: 'MG Road', code: 'BLR-003', city: 'bangalore', address: 'MG Road, Bangalore', phone: '+91-80-25581234', email: 'mgroad.bangalore@police.gov.in' },\n      { name: 'Mysore Palace', code: 'MYS-001', city: 'mysore', address: 'Mysore Palace Road, Mysore', phone: '+91-821-2421234', email: 'mysore.karnataka@police.gov.in' },\n      \n      // Chennai/Tamil Nadu\n      { name: 'T Nagar', code: 'CHN-001', city: 'chennai', address: 'T Nagar, Chennai', phone: '+91-44-24331234', email: 'tnagar.chennai@police.gov.in' },\n      { name: 'Anna Nagar', code: 'CHN-002', city: 'chennai', address: 'Anna Nagar, Chennai', phone: '+91-44-26151234', email: 'annanagar.chennai@police.gov.in' },\n      { name: 'Velachery', code: 'CHN-003', city: 'chennai', address: 'Velachery, Chennai', phone: '+91-44-22351234', email: 'velachery.chennai@police.gov.in' },\n      { name: 'Coimbatore Town', code: 'COI-001', city: 'coimbatore', address: 'RS Puram, Coimbatore', phone: '+91-422-2441234', email: 'coimbatore.tamilnadu@police.gov.in' },\n      { name: 'Madurai Central', code: 'MAD-001', city: 'madurai', address: 'West Masi Street, Madurai', phone: '+91-452-2531234', email: 'madurai.tamilnadu@police.gov.in' },\n      \n      // Hyderabad/Telangana\n      { name: 'Cyberabad', code: 'HYD-001', city: 'hyderabad', address: 'Gachibowli, Hyderabad', phone: '+91-40-27731234', email: 'cyberabad.hyderabad@police.gov.in' },\n      { name: 'Secunderabad', code: 'HYD-002', city: 'hyderabad', address: 'SP Road, Secunderabad', phone: '+91-40-27801234', email: 'secunderabad.hyderabad@police.gov.in' },\n      { name: 'Banjara Hills', code: 'HYD-003', city: 'hyderabad', address: 'Road No 12, Banjara Hills', phone: '+91-40-23551234', email: 'banjarahills.hyderabad@police.gov.in' },\n      \n      // Kolkata/West Bengal\n      { name: 'Park Street', code: 'KOL-001', city: 'kolkata', address: 'Park Street, Kolkata', phone: '+91-33-22651234', email: 'parkstreet.kolkata@police.gov.in' },\n      { name: 'Salt Lake', code: 'KOL-002', city: 'kolkata', address: 'Salt Lake City, Kolkata', phone: '+91-33-23351234', email: 'saltlake.kolkata@police.gov.in' },\n      { name: 'Howrah', code: 'HOW-001', city: 'kolkata', address: 'Howrah Station Road, Howrah', phone: '+91-33-26651234', email: 'howrah.westbengal@police.gov.in' },\n      \n      // Ahmedabad/Gujarat\n      { name: 'Ellis Bridge', code: 'AHM-001', city: 'ahmedabad', address: 'Ellis Bridge, Ahmedabad', phone: '+91-79-26581234', email: 'ellisbridge.ahmedabad@police.gov.in' },\n      { name: 'Satellite', code: 'AHM-002', city: 'ahmedabad', address: 'Satellite Road, Ahmedabad', phone: '+91-79-26851234', email: 'satellite.ahmedabad@police.gov.in' },\n      { name: 'Surat City', code: 'SUR-001', city: 'surat', address: 'Ring Road, Surat', phone: '+91-261-2651234', email: 'surat.gujarat@police.gov.in' },\n      \n      // Jaipur/Rajasthan\n      { name: 'Civil Lines', code: 'JAI-001', city: 'jaipur', address: 'Civil Lines, Jaipur', phone: '+91-141-2651234', email: 'civillines.jaipur@police.gov.in' },\n      { name: 'Malviya Nagar', code: 'JAI-002', city: 'jaipur', address: 'Malviya Nagar, Jaipur', phone: '+91-141-2751234', email: 'malviyanagar.jaipur@police.gov.in' },\n      { name: 'Jodhpur Central', code: 'JOD-001', city: 'jodhpur', address: 'High Court Road, Jodhpur', phone: '+91-291-2651234', email: 'jodhpur.rajasthan@police.gov.in' },\n      \n      // Lucknow/Uttar Pradesh\n      { name: 'Hazratganj', code: 'LUC-001', city: 'lucknow', address: 'Hazratganj, Lucknow', phone: '+91-522-2651234', email: 'hazratganj.lucknow@police.gov.in' },\n      { name: 'Gomti Nagar', code: 'LUC-002', city: 'lucknow', address: 'Gomti Nagar, Lucknow', phone: '+91-522-2751234', email: 'gomtinagar.lucknow@police.gov.in' },\n      { name: 'Varanasi Cantonment', code: 'VAR-001', city: 'varanasi', address: 'Cantonment, Varanasi', phone: '+91-542-2651234', email: 'varanasi.uttarpradesh@police.gov.in' },\n      { name: 'Agra Cantt', code: 'AGR-001', city: 'agra', address: 'Cantt Area, Agra', phone: '+91-562-2651234', email: 'agra.uttarpradesh@police.gov.in' },\n      \n      // Chandigarh/Punjab/Haryana\n      { name: 'Sector 17', code: 'CHD-001', city: 'chandigarh', address: 'Sector 17, Chandigarh', phone: '+91-172-2651234', email: 'sector17.chandigarh@police.gov.in' },\n      { name: 'Mohali', code: 'MOH-001', city: 'mohali', address: 'Phase 7, Mohali', phone: '+91-172-2751234', email: 'mohali.punjab@police.gov.in' },\n      { name: 'Ludhiana Central', code: 'LUD-001', city: 'ludhiana', address: 'Civil Lines, Ludhiana', phone: '+91-161-2651234', email: 'ludhiana.punjab@police.gov.in' },\n      { name: 'Gurgaon Cyber City', code: 'GUR-001', city: 'gurgaon', address: 'Cyber City, Gurgaon', phone: '+91-124-2651234', email: 'gurgaon.haryana@police.gov.in' },\n      \n      // Bhubaneswar/Odisha\n      { name: 'Bhubaneswar Capital', code: 'BBR-001', city: 'bhubaneswar', address: 'Unit 3, Bhubaneswar', phone: '+91-674-2651234', email: 'bhubaneswar.odisha@police.gov.in' },\n      { name: 'Cuttack Sadar', code: 'CUT-001', city: 'cuttack', address: 'Link Road, Cuttack', phone: '+91-671-2651234', email: 'cuttack.odisha@police.gov.in' },\n      \n      // Kochi/Kerala\n      { name: 'Ernakulam South', code: 'KOC-001', city: 'kochi', address: 'MG Road, Ernakulam', phone: '+91-484-2651234', email: 'ernakulam.kochi@police.gov.in' },\n      { name: 'Fort Kochi', code: 'KOC-002', city: 'kochi', address: 'Fort Kochi, Kochi', phone: '+91-484-2751234', email: 'fortkochi.kerala@police.gov.in' },\n      { name: 'Thiruvananthapuram Central', code: 'TVM-001', city: 'thiruvananthapuram', address: 'Museum Road, Trivandrum', phone: '+91-471-2651234', email: 'trivandrum.kerala@police.gov.in' },\n      \n      // Guwahati/Assam & Northeast\n      { name: 'Pan Bazaar', code: 'GUW-001', city: 'guwahati', address: 'Pan Bazaar, Guwahati', phone: '+91-361-2651234', email: 'panbazaar.guwahati@police.gov.in' },\n      { name: 'Dispur', code: 'GUW-002', city: 'guwahati', address: 'Dispur, Guwahati', phone: '+91-361-2751234', email: 'dispur.assam@police.gov.in' },\n      { name: 'Imphal East', code: 'IMP-001', city: 'imphal', address: 'Thangal Bazaar, Imphal', phone: '+91-385-2651234', email: 'imphal.manipur@police.gov.in' },\n      \n      // Indore/Madhya Pradesh\n      { name: 'Vijay Nagar', code: 'IND-001', city: 'indore', address: 'Vijay Nagar, Indore', phone: '+91-731-2651234', email: 'vijaynagar.indore@police.gov.in' },\n      { name: 'Bhopal MP Nagar', code: 'BHO-001', city: 'bhopal', address: 'MP Nagar, Bhopal', phone: '+91-755-2651234', email: 'mpnagar.bhopal@police.gov.in' },\n      \n      // Patna/Bihar\n      { name: 'Boring Road', code: 'PAT-001', city: 'patna', address: 'Boring Road, Patna', phone: '+91-612-2651234', email: 'boringroad.patna@police.gov.in' },\n      { name: 'Gandhi Maidan', code: 'PAT-002', city: 'patna', address: 'Gandhi Maidan, Patna', phone: '+91-612-2751234', email: 'gandhimaidan.bihar@police.gov.in' },\n      \n      // Dehradun/Uttarakhand\n      { name: 'Clock Tower', code: 'DEH-001', city: 'dehradun', address: 'Clock Tower, Dehradun', phone: '+91-135-2651234', email: 'clocktower.dehradun@police.gov.in' },\n      { name: 'Haridwar', code: 'HAR-001', city: 'haridwar', address: 'Railway Road, Haridwar', phone: '+91-1334-651234', email: 'haridwar.uttarakhand@police.gov.in' },\n      \n      // Raipur/Chhattisgarh\n      { name: 'Civil Lines', code: 'RAI-001', city: 'raipur', address: 'Civil Lines, Raipur', phone: '+91-771-2651234', email: 'civillines.raipur@police.gov.in' },\n      \n      // Ranchi/Jharkhand\n      { name: 'Main Road', code: 'RAN-001', city: 'ranchi', address: 'Main Road, Ranchi', phone: '+91-651-2651234', email: 'mainroad.ranchi@police.gov.in' },\n      \n      // Shimla/Himachal Pradesh\n      { name: 'The Mall', code: 'SHI-001', city: 'shimla', address: 'The Mall Road, Shimla', phone: '+91-177-2651234', email: 'themall.shimla@police.gov.in' },\n      \n      // Jammu/Jammu & Kashmir\n      { name: 'Gandhi Nagar', code: 'JAM-001', city: 'jammu', address: 'Gandhi Nagar, Jammu', phone: '+91-191-2651234', email: 'gandhinagar.jammu@police.gov.in' },\n      { name: 'Srinagar Dal Gate', code: 'SRI-001', city: 'srinagar', address: 'Dal Gate, Srinagar', phone: '+91-194-2651234', email: 'dalgate.srinagar@police.gov.in' },\n      \n      // Goa\n      { name: 'Panaji', code: 'GOA-001', city: 'panaji', address: 'MG Road, Panaji', phone: '+91-832-2651234', email: 'panaji.goa@police.gov.in' },\n      { name: 'Margao', code: 'GOA-002', city: 'margao', address: 'Station Road, Margao', phone: '+91-832-2751234', email: 'margao.goa@police.gov.in' },\n    ];\n\n    await PoliceStationModel.insertMany(policeStations);\n\n    // Create Lawyers\n    const hashedPassword = await bcrypt.hash('password123', 10);\n    \n    const lawyers = [\n      {\n        name: 'Sarah Johnson',\n        email: 'sarah.johnson@lawfirm.com',\n        phone: '+91-9876543210',\n        specialization: ['criminal', 'civil'],\n        city: 'delhi',\n        experience: 12,\n        rating: 4.8,\n        stats: { totalCases: 156, wonCases: 132, lostCases: 24 },\n        description: 'Experienced criminal law attorney with expertise in fraud and theft cases.',\n      },\n      {\n        name: 'Michael Chen',\n        email: 'michael.chen@lawfirm.com',\n        phone: '+91-9876543211',\n        specialization: ['corporate', 'civil'],\n        city: 'mumbai',\n        experience: 8,\n        rating: 4.6,\n        stats: { totalCases: 89, wonCases: 82, lostCases: 7 },\n        description: 'Corporate law specialist with focus on business disputes.',\n      },\n      {\n        name: 'Priya Sharma',\n        email: 'priya.sharma@lawfirm.com',\n        phone: '+91-9876543212',\n        specialization: ['criminal', 'murder'],\n        city: 'bangalore',\n        experience: 15,\n        rating: 4.9,\n        stats: { totalCases: 203, wonCases: 189, lostCases: 14 },\n        description: 'Senior criminal defense attorney specializing in serious crimes.',\n      },\n      {\n        name: 'Rajesh Kumar',\n        email: 'rajesh.kumar@lawfirm.com',\n        phone: '+91-9876543213',\n        specialization: ['civil', 'property'],\n        city: 'chennai',\n        experience: 10,\n        rating: 4.5,\n        stats: { totalCases: 134, wonCases: 119, lostCases: 15 },\n        description: 'Civil law expert with specialization in property disputes.',\n      }\n    ];\n\n    await LawyerModel.insertMany(lawyers);\n\n    // Create Users (including comprehensive police officers for all stations)\n    const users = [\n      // Client Users\n      {\n        name: 'John Smith',\n        email: 'john.smith@email.com',\n        password: hashedPassword,\n        phone: '+91-9876543214',\n        role: 'client',\n        city: 'delhi',\n      },\n      {\n        name: 'Alice Johnson',\n        email: 'alice.johnson@email.com',\n        password: hashedPassword,\n        phone: '+91-9876543215',\n        role: 'client',\n        city: 'mumbai',\n      },\n      \n      // Lawyer Users (matching the lawyers in LawyerModel)\n      {\n        name: 'Sarah Johnson',\n        email: 'sarah.johnson@lawfirm.com',\n        password: hashedPassword,\n        phone: '+91-9876543210',\n        role: 'lawyer',\n        city: 'delhi',\n      },\n      {\n        name: 'Michael Chen',\n        email: 'michael.chen@lawfirm.com',\n        password: hashedPassword,\n        phone: '+91-9876543211',\n        role: 'lawyer',\n        city: 'mumbai',\n      },\n      {\n        name: 'Priya Sharma',\n        email: 'priya.sharma@lawfirm.com',\n        password: hashedPassword,\n        phone: '+91-9876543212',\n        role: 'lawyer',\n        city: 'bangalore',\n      },\n      {\n        name: 'Rajesh Kumar',\n        email: 'rajesh.kumar@lawfirm.com',\n        password: hashedPassword,\n        phone: '+91-9876543213',\n        role: 'lawyer',\n        city: 'chennai',\n      },\n      \n      // Police Officers for each station (using same emails as police station emails)\n      // All police officers have password: password123\n      \n      // Delhi Police Officers\n      { name: 'Officer CP Delhi', email: 'cp.delhi@police.gov.in', password: hashedPassword, phone: '+91-11-23341234', role: 'police', policeStationCode: 'DEL-001' },\n      { name: 'Officer KB Delhi', email: 'kb.delhi@police.gov.in', password: hashedPassword, phone: '+91-11-25753456', role: 'police', policeStationCode: 'DEL-002' },\n      { name: 'Officer Rohini', email: 'rohini.delhi@police.gov.in', password: hashedPassword, phone: '+91-11-27051234', role: 'police', policeStationCode: 'DEL-003' },\n      { name: 'Officer Dwarka', email: 'dwarka.delhi@police.gov.in', password: hashedPassword, phone: '+91-11-25081234', role: 'police', policeStationCode: 'DEL-004' },\n      \n      // Mumbai/Maharashtra Police Officers  \n      { name: 'Officer Bandra', email: 'bandra.mumbai@police.gov.in', password: hashedPassword, phone: '+91-22-26421234', role: 'police', policeStationCode: 'MUM-001' },\n      { name: 'Officer Andheri', email: 'andheri.mumbai@police.gov.in', password: hashedPassword, phone: '+91-22-26851234', role: 'police', policeStationCode: 'MUM-002' },\n      { name: 'Officer Colaba', email: 'colaba.mumbai@police.gov.in', password: hashedPassword, phone: '+91-22-22151234', role: 'police', policeStationCode: 'MUM-003' },\n      { name: 'Officer Thane', email: 'thane.maharashtra@police.gov.in', password: hashedPassword, phone: '+91-22-25331234', role: 'police', policeStationCode: 'MAH-001' },\n      { name: 'Officer Pune', email: 'pune.maharashtra@police.gov.in', password: hashedPassword, phone: '+91-20-26051234', role: 'police', policeStationCode: 'PUN-001' },\n      { name: 'Officer Nashik', email: 'nashik.maharashtra@police.gov.in', password: hashedPassword, phone: '+91-253-2451234', role: 'police', policeStationCode: 'NAS-001' },\n      \n      // Bangalore/Karnataka Police Officers\n      { name: 'Officer Koramangala', email: 'koramangala.bangalore@police.gov.in', password: hashedPassword, phone: '+91-80-25531234', role: 'police', policeStationCode: 'BLR-001' },\n      { name: 'Officer Whitefield', email: 'whitefield.bangalore@police.gov.in', password: hashedPassword, phone: '+91-80-28451234', role: 'police', policeStationCode: 'BLR-002' },\n      { name: 'Officer MG Road', email: 'mgroad.bangalore@police.gov.in', password: hashedPassword, phone: '+91-80-25581234', role: 'police', policeStationCode: 'BLR-003' },\n      { name: 'Officer Mysore', email: 'mysore.karnataka@police.gov.in', password: hashedPassword, phone: '+91-821-2421234', role: 'police', policeStationCode: 'MYS-001' },\n      \n      // Chennai/Tamil Nadu Police Officers\n      { name: 'Officer T Nagar', email: 'tnagar.chennai@police.gov.in', password: hashedPassword, phone: '+91-44-24331234', role: 'police', policeStationCode: 'CHN-001' },\n      { name: 'Officer Anna Nagar', email: 'annanagar.chennai@police.gov.in', password: hashedPassword, phone: '+91-44-26151234', role: 'police', policeStationCode: 'CHN-002' },\n      { name: 'Officer Velachery', email: 'velachery.chennai@police.gov.in', password: hashedPassword, phone: '+91-44-22351234', role: 'police', policeStationCode: 'CHN-003' },\n      { name: 'Officer Coimbatore', email: 'coimbatore.tamilnadu@police.gov.in', password: hashedPassword, phone: '+91-422-2441234', role: 'police', policeStationCode: 'COI-001' },\n      { name: 'Officer Madurai', email: 'madurai.tamilnadu@police.gov.in', password: hashedPassword, phone: '+91-452-2531234', role: 'police', policeStationCode: 'MAD-001' },\n      \n      // Hyderabad/Telangana Police Officers\n      { name: 'Officer Cyberabad', email: 'cyberabad.hyderabad@police.gov.in', password: hashedPassword, phone: '+91-40-27731234', role: 'police', policeStationCode: 'HYD-001' },\n      { name: 'Officer Secunderabad', email: 'secunderabad.hyderabad@police.gov.in', password: hashedPassword, phone: '+91-40-27801234', role: 'police', policeStationCode: 'HYD-002' },\n      { name: 'Officer Banjara Hills', email: 'banjarahills.hyderabad@police.gov.in', password: hashedPassword, phone: '+91-40-23551234', role: 'police', policeStationCode: 'HYD-003' },\n      \n      // Kolkata/West Bengal Police Officers\n      { name: 'Officer Park Street', email: 'parkstreet.kolkata@police.gov.in', password: hashedPassword, phone: '+91-33-22651234', role: 'police', policeStationCode: 'KOL-001' },\n      { name: 'Officer Salt Lake', email: 'saltlake.kolkata@police.gov.in', password: hashedPassword, phone: '+91-33-23351234', role: 'police', policeStationCode: 'KOL-002' },\n      { name: 'Officer Howrah', email: 'howrah.westbengal@police.gov.in', password: hashedPassword, phone: '+91-33-26651234', role: 'police', policeStationCode: 'HOW-001' },\n      \n      // Ahmedabad/Gujarat Police Officers\n      { name: 'Officer Ellis Bridge', email: 'ellisbridge.ahmedabad@police.gov.in', password: hashedPassword, phone: '+91-79-26581234', role: 'police', policeStationCode: 'AHM-001' },\n      { name: 'Officer Satellite', email: 'satellite.ahmedabad@police.gov.in', password: hashedPassword, phone: '+91-79-26851234', role: 'police', policeStationCode: 'AHM-002' },\n      { name: 'Officer Surat', email: 'surat.gujarat@police.gov.in', password: hashedPassword, phone: '+91-261-2651234', role: 'police', policeStationCode: 'SUR-001' },\n      \n      // Jaipur/Rajasthan Police Officers\n      { name: 'Officer Civil Lines Jaipur', email: 'civillines.jaipur@police.gov.in', password: hashedPassword, phone: '+91-141-2651234', role: 'police', policeStationCode: 'JAI-001' },\n      { name: 'Officer Malviya Nagar', email: 'malviyanagar.jaipur@police.gov.in', password: hashedPassword, phone: '+91-141-2751234', role: 'police', policeStationCode: 'JAI-002' },\n      { name: 'Officer Jodhpur', email: 'jodhpur.rajasthan@police.gov.in', password: hashedPassword, phone: '+91-291-2651234', role: 'police', policeStationCode: 'JOD-001' },\n      \n      // Lucknow/Uttar Pradesh Police Officers\n      { name: 'Officer Hazratganj', email: 'hazratganj.lucknow@police.gov.in', password: hashedPassword, phone: '+91-522-2651234', role: 'police', policeStationCode: 'LUC-001' },\n      { name: 'Officer Gomti Nagar', email: 'gomtinagar.lucknow@police.gov.in', password: hashedPassword, phone: '+91-522-2751234', role: 'police', policeStationCode: 'LUC-002' },\n      { name: 'Officer Varanasi', email: 'varanasi.uttarpradesh@police.gov.in', password: hashedPassword, phone: '+91-542-2651234', role: 'police', policeStationCode: 'VAR-001' },\n      { name: 'Officer Agra', email: 'agra.uttarpradesh@police.gov.in', password: hashedPassword, phone: '+91-562-2651234', role: 'police', policeStationCode: 'AGR-001' },\n      \n      // Chandigarh/Punjab/Haryana Police Officers\n      { name: 'Officer Sector 17', email: 'sector17.chandigarh@police.gov.in', password: hashedPassword, phone: '+91-172-2651234', role: 'police', policeStationCode: 'CHD-001' },\n      { name: 'Officer Mohali', email: 'mohali.punjab@police.gov.in', password: hashedPassword, phone: '+91-172-2751234', role: 'police', policeStationCode: 'MOH-001' },\n      { name: 'Officer Ludhiana', email: 'ludhiana.punjab@police.gov.in', password: hashedPassword, phone: '+91-161-2651234', role: 'police', policeStationCode: 'LUD-001' },\n      { name: 'Officer Gurgaon', email: 'gurgaon.haryana@police.gov.in', password: hashedPassword, phone: '+91-124-2651234', role: 'police', policeStationCode: 'GUR-001' },\n      \n      // Other States Police Officers  \n      { name: 'Officer Bhubaneswar', email: 'bhubaneswar.odisha@police.gov.in', password: hashedPassword, phone: '+91-674-2651234', role: 'police', policeStationCode: 'BBR-001' },\n      { name: 'Officer Cuttack', email: 'cuttack.odisha@police.gov.in', password: hashedPassword, phone: '+91-671-2651234', role: 'police', policeStationCode: 'CUT-001' },\n      { name: 'Officer Ernakulam', email: 'ernakulam.kochi@police.gov.in', password: hashedPassword, phone: '+91-484-2651234', role: 'police', policeStationCode: 'KOC-001' },\n      { name: 'Officer Fort Kochi', email: 'fortkochi.kerala@police.gov.in', password: hashedPassword, phone: '+91-484-2751234', role: 'police', policeStationCode: 'KOC-002' },\n      { name: 'Officer Trivandrum', email: 'trivandrum.kerala@police.gov.in', password: hashedPassword, phone: '+91-471-2651234', role: 'police', policeStationCode: 'TVM-001' },\n      { name: 'Officer Pan Bazaar', email: 'panbazaar.guwahati@police.gov.in', password: hashedPassword, phone: '+91-361-2651234', role: 'police', policeStationCode: 'GUW-001' },\n      { name: 'Officer Dispur', email: 'dispur.assam@police.gov.in', password: hashedPassword, phone: '+91-361-2751234', role: 'police', policeStationCode: 'GUW-002' },\n      { name: 'Officer Imphal', email: 'imphal.manipur@police.gov.in', password: hashedPassword, phone: '+91-385-2651234', role: 'police', policeStationCode: 'IMP-001' },\n      { name: 'Officer Vijay Nagar', email: 'vijaynagar.indore@police.gov.in', password: hashedPassword, phone: '+91-731-2651234', role: 'police', policeStationCode: 'IND-001' },\n      { name: 'Officer MP Nagar', email: 'mpnagar.bhopal@police.gov.in', password: hashedPassword, phone: '+91-755-2651234', role: 'police', policeStationCode: 'BHO-001' },\n      { name: 'Officer Boring Road', email: 'boringroad.patna@police.gov.in', password: hashedPassword, phone: '+91-612-2651234', role: 'police', policeStationCode: 'PAT-001' },\n      { name: 'Officer Gandhi Maidan', email: 'gandhimaidan.bihar@police.gov.in', password: hashedPassword, phone: '+91-612-2751234', role: 'police', policeStationCode: 'PAT-002' },\n      { name: 'Officer Clock Tower', email: 'clocktower.dehradun@police.gov.in', password: hashedPassword, phone: '+91-135-2651234', role: 'police', policeStationCode: 'DEH-001' },\n      { name: 'Officer Haridwar', email: 'haridwar.uttarakhand@police.gov.in', password: hashedPassword, phone: '+91-1334-651234', role: 'police', policeStationCode: 'HAR-001' },\n      { name: 'Officer Raipur', email: 'civillines.raipur@police.gov.in', password: hashedPassword, phone: '+91-771-2651234', role: 'police', policeStationCode: 'RAI-001' },\n      { name: 'Officer Ranchi', email: 'mainroad.ranchi@police.gov.in', password: hashedPassword, phone: '+91-651-2651234', role: 'police', policeStationCode: 'RAN-001' },\n      { name: 'Officer Shimla', email: 'themall.shimla@police.gov.in', password: hashedPassword, phone: '+91-177-2651234', role: 'police', policeStationCode: 'SHI-001' },\n      { name: 'Officer Jammu', email: 'gandhinagar.jammu@police.gov.in', password: hashedPassword, phone: '+91-191-2651234', role: 'police', policeStationCode: 'JAM-001' },\n      { name: 'Officer Srinagar', email: 'dalgate.srinagar@police.gov.in', password: hashedPassword, phone: '+91-194-2651234', role: 'police', policeStationCode: 'SRI-001' },\n      { name: 'Officer Panaji', email: 'panaji.goa@police.gov.in', password: hashedPassword, phone: '+91-832-2651234', role: 'police', policeStationCode: 'GOA-001' },\n      { name: 'Officer Margao', email: 'margao.goa@police.gov.in', password: hashedPassword, phone: '+91-832-2751234', role: 'police', policeStationCode: 'GOA-002' },\n    ];\n\n    await UserModel.insertMany(users);\n\n    // Create Sample Cases\n    const delhiStation = await PoliceStationModel.findOne({ code: 'DEL-001' });\n    const mumStation = await PoliceStationModel.findOne({ code: 'MUM-001' });\n    const johnUser = await UserModel.findOne({ email: 'john.smith@email.com' });\n    const aliceUser = await UserModel.findOne({ email: 'alice.johnson@email.com' });\n\n    if (delhiStation && mumStation && johnUser && aliceUser) {\n      const sampleCases = [\n        {\n          title: 'Property Dispute Case',\n          description: 'Commercial property ownership dispute between two parties.',\n          caseType: 'civil',\n          victim: {\n            name: 'Robert Anderson',\n            phone: '+91-9876543220',\n            email: 'robert.anderson@email.com',\n          },\n          accused: {\n            name: 'Michael Thompson',\n            phone: '+91-8765432109',\n            address: '123 Business District, Delhi',\n          },\n          clientId: johnUser._id,\n          policeStationId: delhiStation._id,\n          city: 'delhi',\n          status: 'under_review',\n        },\n        {\n          title: 'Fraud Investigation',\n          description: 'Financial fraud case involving unauthorized transactions.',\n          caseType: 'fraud',\n          victim: {\n            name: 'Sarah Wilson',\n            phone: '+91-9876543221',\n            email: 'sarah.wilson@email.com',\n          },\n          accused: {\n            name: 'David Brown',\n            phone: '+91-8765432108',\n            address: '456 Finance Street, Mumbai',\n          },\n          clientId: aliceUser._id,\n          policeStationId: mumStation._id,\n          city: 'mumbai',\n          status: 'approved',\n          pnr: 'PNR-2024-001235',\n          hearingDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n        },\n      ];\n\n      await CaseModel.insertMany(sampleCases);\n    }\n\n    console.log('Database seeded successfully!');\n  } catch (error) {\n    console.error('Error seeding database:', error);\n  }\n};\n","size_bytes":27626},"server/storage-backup.ts":{"content":"import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { \n  type User, type InsertUser, type Lawyer, type InsertLawyer,\n  type Case, type InsertCase, type PoliceStation, type InsertPoliceStation,\n  type Message, type InsertMessage, type Notification, type InsertNotification,\n  type LoginData, type AuthResponse\n} from \"@shared/schema\";\nimport { \n  UserModel, LawyerModel, CaseModel, PoliceStationModel, \n  MessageModel, NotificationModel \n} from \"./db.js\";\n\nexport interface IStorage {\n  // Auth\n  login(data: LoginData): Promise<AuthResponse>;\n  register(user: InsertUser): Promise<User>;\n  \n  // Users\n  getUser(id: string): Promise<User | null>;\n  getUserByEmail(email: string): Promise<User | null>;\n  updateUser(id: string, data: Partial<User>): Promise<User | null>;\n  getUsersByRole(role: string): Promise<User[]>;\n  \n  // Lawyers\n  getLawyers(filters?: { city?: string; caseType?: string }): Promise<Lawyer[]>;\n  getLawyer(id: string): Promise<Lawyer | null>;\n  createLawyer(lawyer: InsertLawyer): Promise<Lawyer>;\n  \n  // Cases\n  getCases(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<Case[]>;\n  getCase(id: string): Promise<Case | null>;\n  createCase(caseData: InsertCase): Promise<Case>;\n  updateCase(id: string, data: Partial<Case>): Promise<Case | null>;\n  \n  // Police Stations\n  getPoliceStations(city?: string): Promise<PoliceStation[]>;\n  getPoliceStation(id: string): Promise<PoliceStation | null>;\n  \n  // Messages\n  getMessages(userId: string, otherUserId?: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  \n  // Notifications\n  getNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<void>;\n}\n\nexport class MongoStorage implements IStorage {\n  async login(data: LoginData): Promise<AuthResponse> {\n    const user = await UserModel.findOne({ email: data.email });\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const isValidPassword = await bcrypt.compare(data.password, user.password);\n    if (!isValidPassword) {\n      throw new Error('Invalid password');\n    }\n\n    const token = jwt.sign(\n      { userId: user._id, email: user.email, role: user.role },\n      process.env.JWT_SECRET || 'fallback-secret',\n      { expiresIn: '24h' }\n    );\n\n    return {\n      user: {\n        _id: user._id.toString(),\n        name: user.name,\n        email: user.email,\n        password: user.password,\n        phone: user.phone,\n        role: user.role,\n        city: user.city || undefined,\n        specialization: user.specialization || undefined,\n        experience: user.experience || undefined,\n        policeStationCode: user.policeStationCode || undefined,\n        stats: user.stats || undefined,\n        rating: user.rating || undefined,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n      },\n      token\n    };\n  }\n\n  async register(userData: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(userData.password, 10);\n    const user = new UserModel({\n      ...userData,\n      password: hashedPassword,\n    });\n    \n    const savedUser = await user.save();\n    return {\n      _id: savedUser._id.toString(),\n      name: savedUser.name,\n      email: savedUser.email,\n      password: savedUser.password,\n      phone: savedUser.phone,\n      role: savedUser.role,\n      city: savedUser.city || undefined,\n      specialization: savedUser.specialization || undefined,\n      experience: savedUser.experience || undefined,\n      policeStationCode: savedUser.policeStationCode || undefined,\n      stats: savedUser.stats || undefined,\n      rating: savedUser.rating || undefined,\n      description: savedUser.description || undefined,\n      image: savedUser.image || undefined,\n      createdAt: savedUser.createdAt,\n      updatedAt: savedUser.updatedAt,\n    };\n  }\n\n  async getUser(id: string): Promise<User | null> {\n    const user = await UserModel.findById(id);\n    if (!user) return null;\n    \n    return {\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city || undefined,\n      specialization: user.specialization || undefined,\n      experience: user.experience || undefined,\n      policeStationCode: user.policeStationCode || undefined,\n      stats: user.stats || undefined,\n      rating: user.rating || undefined,\n      description: user.description || undefined,\n      image: user.image || undefined,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    };\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    const user = await UserModel.findOne({ email });\n    if (!user) return null;\n    \n    return {\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city || undefined,\n      specialization: user.specialization || undefined,\n      experience: user.experience || undefined,\n      policeStationCode: user.policeStationCode || undefined,\n      stats: user.stats || undefined,\n      rating: user.rating || undefined,\n      description: user.description || undefined,\n      image: user.image || undefined,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    };\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User | null> {\n    const user = await UserModel.findByIdAndUpdate(id, data, { new: true });\n    if (!user) return null;\n    \n    return {\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city || undefined,\n      specialization: user.specialization || undefined,\n      experience: user.experience || undefined,\n      policeStationCode: user.policeStationCode || undefined,\n      stats: user.stats || undefined,\n      rating: user.rating || undefined,\n      description: user.description || undefined,\n      image: user.image || undefined,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    };\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    const users = await UserModel.find({ role });\n    return users.map(user => ({\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city || undefined,\n      specialization: user.specialization || undefined,\n      experience: user.experience || undefined,\n      policeStationCode: user.policeStationCode || undefined,\n      stats: user.stats || undefined,\n      rating: user.rating || undefined,\n      description: user.description || undefined,\n      image: user.image || undefined,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    }));\n  }\n\n  async getLawyers(filters?: { city?: string; caseType?: string }): Promise<Lawyer[]> {\n    const query: any = { role: 'lawyer' };\n    \n    if (filters?.city) {\n      query.city = filters.city;\n    }\n    \n    if (filters?.caseType) {\n      query.specialization = { $in: [filters.caseType] };\n    }\n\n    const lawyers = await UserModel.find(query);\n    return lawyers.map(lawyer => ({\n      _id: lawyer._id.toString(),\n      name: lawyer.name,\n      email: lawyer.email,\n      phone: lawyer.phone,\n      specialization: lawyer.specialization || [],\n      city: lawyer.city || '',\n      experience: lawyer.experience || 0,\n      rating: lawyer.rating || 0,\n      stats: lawyer.stats || { totalCases: 0, wonCases: 0, lostCases: 0 },\n      description: lawyer.description || undefined,\n      image: lawyer.image || undefined,\n      createdAt: lawyer.createdAt,\n    }));\n  }\n\n  async getLawyer(id: string): Promise<Lawyer | null> {\n    const lawyer = await UserModel.findOne({ _id: id, role: 'lawyer' });\n    if (!lawyer) return null;\n    \n    return {\n      _id: lawyer._id.toString(),\n      name: lawyer.name,\n      email: lawyer.email,\n      phone: lawyer.phone,\n      specialization: lawyer.specialization || [],\n      city: lawyer.city || '',\n      experience: lawyer.experience || 0,\n      rating: lawyer.rating || 0,\n      stats: lawyer.stats || { totalCases: 0, wonCases: 0, lostCases: 0 },\n      description: lawyer.description || undefined,\n      image: lawyer.image || undefined,\n      createdAt: lawyer.createdAt,\n    };\n  }\n\n  async createLawyer(lawyerData: InsertLawyer): Promise<Lawyer> {\n    const lawyer = new LawyerModel(lawyerData);\n    const savedLawyer = await lawyer.save();\n    \n    return {\n      _id: savedLawyer._id.toString(),\n      name: savedLawyer.name,\n      email: savedLawyer.email,\n      phone: savedLawyer.phone,\n      specialization: savedLawyer.specialization,\n      city: savedLawyer.city,\n      experience: savedLawyer.experience,\n      rating: savedLawyer.rating,\n      stats: savedLawyer.stats,\n      description: savedLawyer.description,\n      image: savedLawyer.image,\n      createdAt: savedLawyer.createdAt,\n    };\n  }\n\n  async getCases(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<Case[]> {\n    const query: any = {};\n    \n    if (filters?.clientId) {\n      query.clientId = filters.clientId;\n    }\n    \n    if (filters?.lawyerId) {\n      query.lawyerId = filters.lawyerId;\n    }\n    \n    if (filters?.status) {\n      query.status = filters.status;\n    }\n\n    const cases = await CaseModel.find(query).populate('clientId lawyerId policeStationId');\n    return cases.map(case_ => ({\n      _id: case_._id.toString(),\n      title: case_.title,\n      description: case_.description,\n      caseType: case_.caseType,\n      victim: case_.victim,\n      accused: case_.accused,\n      clientId: case_.clientId.toString(),\n      lawyerId: case_.lawyerId?.toString(),\n      policeStationId: case_.policeStationId.toString(),\n      city: case_.city,\n      status: case_.status,\n      pnr: case_.pnr,\n      hearingDate: case_.hearingDate,\n      documents: case_.documents,\n      createdAt: case_.createdAt,\n      updatedAt: case_.updatedAt,\n    }));\n  }\n\n  async getCase(id: string): Promise<Case | null> {\n    const case_ = await CaseModel.findById(id).populate('clientId lawyerId policeStationId');\n    if (!case_) return null;\n    \n    return {\n      _id: case_._id.toString(),\n      title: case_.title,\n      description: case_.description,\n      caseType: case_.caseType,\n      victim: case_.victim,\n      accused: case_.accused,\n      clientId: case_.clientId.toString(),\n      lawyerId: case_.lawyerId?.toString(),\n      policeStationId: case_.policeStationId.toString(),\n      city: case_.city,\n      status: case_.status,\n      pnr: case_.pnr,\n      hearingDate: case_.hearingDate,\n      documents: case_.documents,\n      createdAt: case_.createdAt,\n      updatedAt: case_.updatedAt,\n    };\n  }\n\n  async createCase(caseData: InsertCase): Promise<Case> {\n    const newCase = new CaseModel(caseData);\n    const savedCase = await newCase.save();\n    \n    return {\n      _id: savedCase._id.toString(),\n      title: savedCase.title,\n      description: savedCase.description,\n      caseType: savedCase.caseType,\n      victim: savedCase.victim,\n      accused: savedCase.accused,\n      clientId: savedCase.clientId.toString(),\n      lawyerId: savedCase.lawyerId?.toString(),\n      policeStationId: savedCase.policeStationId.toString(),\n      city: savedCase.city,\n      status: savedCase.status,\n      pnr: savedCase.pnr,\n      hearingDate: savedCase.hearingDate,\n      documents: savedCase.documents,\n      createdAt: savedCase.createdAt,\n      updatedAt: savedCase.updatedAt,\n    };\n  }\n\n  async updateCase(id: string, data: Partial<Case>): Promise<Case | null> {\n    const case_ = await CaseModel.findByIdAndUpdate(id, data, { new: true });\n    if (!case_) return null;\n    \n    return {\n      _id: case_._id.toString(),\n      title: case_.title,\n      description: case_.description,\n      caseType: case_.caseType,\n      victim: case_.victim,\n      accused: case_.accused,\n      clientId: case_.clientId.toString(),\n      lawyerId: case_.lawyerId?.toString(),\n      policeStationId: case_.policeStationId.toString(),\n      city: case_.city,\n      status: case_.status,\n      pnr: case_.pnr,\n      hearingDate: case_.hearingDate,\n      documents: case_.documents,\n      createdAt: case_.createdAt,\n      updatedAt: case_.updatedAt,\n    };\n  }\n\n  async getPoliceStations(city?: string): Promise<PoliceStation[]> {\n    const query = city ? { city } : {};\n    const stations = await PoliceStationModel.find(query);\n    \n    return stations.map(station => ({\n      _id: station._id.toString(),\n      name: station.name,\n      code: station.code,\n      city: station.city,\n      address: station.address,\n      phone: station.phone,\n      email: station.email,\n      createdAt: station.createdAt,\n    }));\n  }\n\n  async getPoliceStation(id: string): Promise<PoliceStation | null> {\n    const station = await PoliceStationModel.findById(id);\n    if (!station) return null;\n    \n    return {\n      _id: station._id.toString(),\n      name: station.name,\n      code: station.code,\n      city: station.city,\n      address: station.address,\n      phone: station.phone,\n      email: station.email,\n      createdAt: station.createdAt,\n    };\n  }\n\n  async getMessages(userId: string, otherUserId?: string): Promise<Message[]> {\n    const query = otherUserId \n      ? {\n          $or: [\n            { senderId: userId, receiverId: otherUserId },\n            { senderId: otherUserId, receiverId: userId }\n          ]\n        }\n      : {\n          $or: [\n            { senderId: userId },\n            { receiverId: userId }\n          ]\n        };\n\n    const messages = await MessageModel.find(query)\n      .populate('senderId receiverId')\n      .sort({ createdAt: 1 });\n    \n    return messages.map(message => ({\n      _id: message._id.toString(),\n      senderId: message.senderId.toString(),\n      receiverId: message.receiverId.toString(),\n      caseId: message.caseId?.toString(),\n      content: message.content,\n      read: message.read,\n      timestamp: message.createdAt,\n    }));\n  }\n\n  async createMessage(messageData: InsertMessage): Promise<Message> {\n    const message = new MessageModel(messageData);\n    const savedMessage = await message.save();\n    \n    return {\n      _id: savedMessage._id.toString(),\n      senderId: savedMessage.senderId.toString(),\n      receiverId: savedMessage.receiverId.toString(),\n      caseId: savedMessage.caseId?.toString(),\n      content: savedMessage.content,\n      read: savedMessage.read,\n      timestamp: savedMessage.createdAt,\n    };\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    const notifications = await NotificationModel.find({ userId })\n      .sort({ createdAt: -1 });\n    \n    return notifications.map(notification => ({\n      _id: notification._id.toString(),\n      userId: notification.userId.toString(),\n      title: notification.title,\n      message: notification.message,\n      type: notification.type,\n      read: notification.read,\n      caseId: notification.caseId?.toString(),\n      createdAt: notification.createdAt,\n    }));\n  }\n\n  async createNotification(notificationData: InsertNotification): Promise<Notification> {\n    const notification = new NotificationModel(notificationData);\n    const savedNotification = await notification.save();\n    \n    return {\n      _id: savedNotification._id.toString(),\n      userId: savedNotification.userId.toString(),\n      title: savedNotification.title,\n      message: savedNotification.message,\n      type: savedNotification.type,\n      read: savedNotification.read,\n      caseId: savedNotification.caseId?.toString(),\n      createdAt: savedNotification.createdAt,\n    };\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await NotificationModel.findByIdAndUpdate(id, { read: true });\n  }\n}\n\nexport const storage = new MongoStorage();\n","size_bytes":16061},"server/storage-clean.ts":{"content":"import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { \n  type User, type InsertUser, type Lawyer, type InsertLawyer,\n  type Case, type InsertCase, type PoliceStation, type InsertPoliceStation,\n  type Message, type InsertMessage, type Notification, type InsertNotification,\n  type LoginData, type AuthResponse\n} from \"@shared/schema\";\nimport { \n  UserModel, LawyerModel, CaseModel, PoliceStationModel, \n  MessageModel, NotificationModel \n} from \"./db.js\";\n\nexport interface IStorage {\n  // Auth\n  login(data: LoginData): Promise<AuthResponse>;\n  register(user: InsertUser): Promise<User>;\n  \n  // Users\n  getUser(id: string): Promise<User | null>;\n  getUserByEmail(email: string): Promise<User | null>;\n  updateUser(id: string, data: Partial<User>): Promise<User | null>;\n  getUsersByRole(role: string): Promise<User[]>;\n  \n  // Lawyers\n  getLawyers(filters?: { city?: string; caseType?: string }): Promise<Lawyer[]>;\n  getLawyer(id: string): Promise<Lawyer | null>;\n  createLawyer(lawyer: InsertLawyer): Promise<Lawyer>;\n  \n  // Cases\n  getCases(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<Case[]>;\n  getCase(id: string): Promise<Case | null>;\n  createCase(caseData: InsertCase): Promise<Case>;\n  updateCase(id: string, data: Partial<Case>): Promise<Case | null>;\n  \n  // Police Stations\n  getPoliceStations(city?: string): Promise<PoliceStation[]>;\n  getPoliceStation(id: string): Promise<PoliceStation | null>;\n  \n  // Messages\n  getMessages(userId: string, otherUserId?: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  \n  // Notifications\n  getNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<void>;\n}\n\nexport class MongoStorage implements IStorage {\n  async login(data: LoginData): Promise<AuthResponse> {\n    const user = await UserModel.findOne({ email: data.email });\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const isValidPassword = await bcrypt.compare(data.password, user.password);\n    if (!isValidPassword) {\n      throw new Error('Invalid password');\n    }\n\n    const token = jwt.sign(\n      { userId: user._id, email: user.email, role: user.role },\n      process.env.JWT_SECRET || 'fallback-secret',\n      { expiresIn: '24h' }\n    );\n\n    return {\n      user: {\n        _id: user._id.toString(),\n        name: user.name,\n        email: user.email,\n        password: user.password,\n        phone: user.phone,\n        role: user.role,\n        city: user.city,\n        specialization: user.specialization,\n        experience: user.experience,\n        policeStationCode: user.policeStationCode,\n        stats: user.stats,\n        rating: user.rating,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n      },\n      token\n    };\n  }\n\n  async register(userData: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(userData.password, 10);\n    const user = new UserModel({\n      ...userData,\n      password: hashedPassword,\n    });\n    \n    const savedUser = await user.save();\n    return {\n      _id: savedUser._id.toString(),\n      name: savedUser.name,\n      email: savedUser.email,\n      password: savedUser.password,\n      phone: savedUser.phone,\n      role: savedUser.role,\n      city: savedUser.city,\n      specialization: savedUser.specialization,\n      experience: savedUser.experience,\n      policeStationCode: savedUser.policeStationCode,\n      stats: savedUser.stats,\n      rating: savedUser.rating,\n      createdAt: savedUser.createdAt,\n      updatedAt: savedUser.updatedAt,\n    };\n  }\n\n  async getUser(id: string): Promise<User | null> {\n    const user = await UserModel.findById(id);\n    if (!user) return null;\n    \n    return {\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city,\n      specialization: user.specialization,\n      experience: user.experience,\n      policeStationCode: user.policeStationCode,\n      stats: user.stats,\n      rating: user.rating,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    };\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    const user = await UserModel.findOne({ email });\n    if (!user) return null;\n    \n    return {\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city,\n      specialization: user.specialization,\n      experience: user.experience,\n      policeStationCode: user.policeStationCode,\n      stats: user.stats,\n      rating: user.rating,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    };\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User | null> {\n    const user = await UserModel.findByIdAndUpdate(id, data, { new: true });\n    if (!user) return null;\n    \n    return {\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city,\n      specialization: user.specialization,\n      experience: user.experience,\n      policeStationCode: user.policeStationCode,\n      stats: user.stats,\n      rating: user.rating,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    };\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    const users = await UserModel.find({ role });\n    return users.map(user => ({\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city,\n      specialization: user.specialization,\n      experience: user.experience,\n      policeStationCode: user.policeStationCode,\n      stats: user.stats,\n      rating: user.rating,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    }));\n  }\n\n  async getLawyers(filters?: { city?: string; caseType?: string }): Promise<Lawyer[]> {\n    const query: any = { role: 'lawyer' };\n    \n    if (filters?.city) {\n      query.city = filters.city;\n    }\n    \n    if (filters?.caseType) {\n      query.specialization = { $in: [filters.caseType] };\n    }\n\n    const lawyers = await UserModel.find(query);\n    return lawyers.map(lawyer => ({\n      _id: lawyer._id.toString(),\n      name: lawyer.name,\n      email: lawyer.email,\n      phone: lawyer.phone,\n      specialization: lawyer.specialization || [],\n      city: lawyer.city || '',\n      experience: lawyer.experience || 0,\n      rating: lawyer.rating || 0,\n      stats: lawyer.stats || { totalCases: 0, wonCases: 0, lostCases: 0 },\n      createdAt: lawyer.createdAt,\n    }));\n  }\n\n  async getLawyer(id: string): Promise<Lawyer | null> {\n    const lawyer = await UserModel.findOne({ _id: id, role: 'lawyer' });\n    if (!lawyer) return null;\n    \n    return {\n      _id: lawyer._id.toString(),\n      name: lawyer.name,\n      email: lawyer.email,\n      phone: lawyer.phone,\n      specialization: lawyer.specialization || [],\n      city: lawyer.city || '',\n      experience: lawyer.experience || 0,\n      rating: lawyer.rating || 0,\n      stats: lawyer.stats || { totalCases: 0, wonCases: 0, lostCases: 0 },\n      createdAt: lawyer.createdAt,\n    };\n  }\n\n  async createLawyer(lawyerData: InsertLawyer): Promise<Lawyer> {\n    const lawyer = new LawyerModel(lawyerData);\n    const savedLawyer = await lawyer.save();\n    \n    return {\n      _id: savedLawyer._id.toString(),\n      name: savedLawyer.name,\n      email: savedLawyer.email,\n      phone: savedLawyer.phone,\n      specialization: savedLawyer.specialization,\n      city: savedLawyer.city,\n      experience: savedLawyer.experience,\n      rating: savedLawyer.rating,\n      stats: savedLawyer.stats,\n      createdAt: savedLawyer.createdAt,\n    };\n  }\n\n  // Cases implementation...\n  async getCases(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<Case[]> {\n    const query: any = {};\n    \n    if (filters?.clientId) query.clientId = filters.clientId;\n    if (filters?.lawyerId) query.lawyerId = filters.lawyerId;\n    if (filters?.status) query.status = filters.status;\n\n    const cases = await CaseModel.find(query);\n    return cases.map(case_ => ({\n      _id: case_._id.toString(),\n      title: case_.title,\n      description: case_.description,\n      caseType: case_.caseType,\n      victim: case_.victim || { name: '', phone: '' },\n      accused: case_.accused || { name: '' },\n      clientId: case_.clientId,\n      lawyerId: case_.lawyerId,\n      policeStationId: case_.policeStationId,\n      city: case_.city,\n      status: case_.status,\n      pnr: case_.pnr,\n      hearingDate: case_.hearingDate,\n      documents: case_.documents,\n      createdAt: case_.createdAt,\n      updatedAt: case_.updatedAt,\n    }));\n  }\n\n  async getCase(id: string): Promise<Case | null> {\n    const case_ = await CaseModel.findById(id);\n    if (!case_) return null;\n    \n    return {\n      _id: case_._id.toString(),\n      title: case_.title,\n      description: case_.description,\n      caseType: case_.caseType,\n      victim: case_.victim || { name: '', phone: '' },\n      accused: case_.accused || { name: '' },\n      clientId: case_.clientId,\n      lawyerId: case_.lawyerId,\n      policeStationId: case_.policeStationId,\n      city: case_.city,\n      status: case_.status,\n      pnr: case_.pnr,\n      hearingDate: case_.hearingDate,\n      documents: case_.documents,\n      createdAt: case_.createdAt,\n      updatedAt: case_.updatedAt,\n    };\n  }\n\n  async createCase(caseData: InsertCase): Promise<Case> {\n    const case_ = new CaseModel(caseData);\n    const savedCase = await case_.save();\n    \n    return {\n      _id: savedCase._id.toString(),\n      title: savedCase.title,\n      description: savedCase.description,\n      caseType: savedCase.caseType,\n      victim: savedCase.victim || { name: '', phone: '' },\n      accused: savedCase.accused || { name: '' },\n      clientId: savedCase.clientId,\n      lawyerId: savedCase.lawyerId,\n      policeStationId: savedCase.policeStationId,\n      city: savedCase.city,\n      status: savedCase.status,\n      pnr: savedCase.pnr,\n      hearingDate: savedCase.hearingDate,\n      documents: savedCase.documents,\n      createdAt: savedCase.createdAt,\n      updatedAt: savedCase.updatedAt,\n    };\n  }\n\n  async updateCase(id: string, data: Partial<Case>): Promise<Case | null> {\n    const case_ = await CaseModel.findByIdAndUpdate(id, data, { new: true });\n    if (!case_) return null;\n    \n    return {\n      _id: case_._id.toString(),\n      title: case_.title,\n      description: case_.description,\n      caseType: case_.caseType,\n      victim: case_.victim || { name: '', phone: '' },\n      accused: case_.accused || { name: '' },\n      clientId: case_.clientId,\n      lawyerId: case_.lawyerId,\n      policeStationId: case_.policeStationId,\n      city: case_.city,\n      status: case_.status,\n      pnr: case_.pnr,\n      hearingDate: case_.hearingDate,\n      documents: case_.documents,\n      createdAt: case_.createdAt,\n      updatedAt: case_.updatedAt,\n    };\n  }\n\n  async getPoliceStations(city?: string): Promise<PoliceStation[]> {\n    const query: any = {};\n    if (city) query.city = city;\n\n    const stations = await PoliceStationModel.find(query);\n    return stations.map(station => ({\n      _id: station._id.toString(),\n      name: station.name,\n      code: station.code,\n      city: station.city,\n      address: station.address,\n      phone: station.phone,\n      email: station.email,\n      createdAt: station.createdAt,\n    }));\n  }\n\n  async getPoliceStation(id: string): Promise<PoliceStation | null> {\n    const station = await PoliceStationModel.findById(id);\n    if (!station) return null;\n    \n    return {\n      _id: station._id.toString(),\n      name: station.name,\n      code: station.code,\n      city: station.city,\n      address: station.address,\n      phone: station.phone,\n      email: station.email,\n      createdAt: station.createdAt,\n    };\n  }\n\n  async getMessages(userId: string, otherUserId?: string): Promise<Message[]> {\n    const query: any = {\n      $or: [\n        { senderId: userId },\n        { receiverId: userId }\n      ]\n    };\n    \n    if (otherUserId) {\n      query.$or = [\n        { senderId: userId, receiverId: otherUserId },\n        { senderId: otherUserId, receiverId: userId }\n      ];\n    }\n\n    const messages = await MessageModel.find(query).sort({ timestamp: 1 });\n    return messages.map(msg => ({\n      _id: msg._id.toString(),\n      senderId: msg.senderId,\n      receiverId: msg.receiverId,\n      caseId: msg.caseId,\n      content: msg.content,\n      timestamp: msg.timestamp,\n      read: msg.read,\n    }));\n  }\n\n  async createMessage(messageData: InsertMessage): Promise<Message> {\n    const message = new MessageModel({\n      ...messageData,\n      timestamp: new Date(),\n      read: false,\n    });\n    \n    const savedMessage = await message.save();\n    return {\n      _id: savedMessage._id.toString(),\n      senderId: savedMessage.senderId,\n      receiverId: savedMessage.receiverId,\n      caseId: savedMessage.caseId,\n      content: savedMessage.content,\n      timestamp: savedMessage.timestamp,\n      read: savedMessage.read,\n    };\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    const notifications = await NotificationModel.find({ userId }).sort({ createdAt: -1 });\n    return notifications.map(notif => ({\n      _id: notif._id.toString(),\n      userId: notif.userId,\n      title: notif.title,\n      message: notif.message,\n      type: notif.type,\n      read: notif.read,\n      caseId: notif.caseId,\n      createdAt: notif.createdAt,\n    }));\n  }\n\n  async createNotification(notificationData: InsertNotification): Promise<Notification> {\n    const notification = new NotificationModel({\n      ...notificationData,\n      read: false,\n      createdAt: new Date(),\n    });\n    \n    const savedNotification = await notification.save();\n    return {\n      _id: savedNotification._id.toString(),\n      userId: savedNotification.userId,\n      title: savedNotification.title,\n      message: savedNotification.message,\n      type: savedNotification.type,\n      read: savedNotification.read,\n      caseId: savedNotification.caseId,\n      createdAt: savedNotification.createdAt,\n    };\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await NotificationModel.findByIdAndUpdate(id, { read: true });\n  }\n}\n\nexport const storage = new MongoStorage();","size_bytes":14645},"server/storage-memory.ts":{"content":"import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport { \n  type User, type InsertUser, type Lawyer, type InsertLawyer,\n  type Case, type InsertCase, type PoliceStation, type InsertPoliceStation,\n  type Message, type InsertMessage, type Notification, type InsertNotification,\n  type CaseRequest, type InsertCaseRequest, type LoginData, type AuthResponse\n} from \"@shared/schema\";\nimport { type IStorage } from \"./storage.js\";\n\n// In-memory storage for development fallback\nexport class MemoryStorage implements IStorage {\n  private users: User[] = [];\n  private lawyers: Lawyer[] = [];\n  private cases: Case[] = [];\n  private policeStations: PoliceStation[] = [];\n  private messages: Message[] = [];\n  private notifications: Notification[] = [];\n  private caseRequests: CaseRequest[] = [];\n  private idCounter = 1;\n\n  constructor() {\n    this.seedData();\n  }\n\n  private generateId(): string {\n    return (this.idCounter++).toString();\n  }\n\n  private seedData() {\n    // Add some test data\n    const hashedPassword = bcrypt.hashSync('password123', 10);\n    \n    this.users = [\n      {\n        _id: '1',\n        name: 'Test Client',\n        email: 'client@test.com',\n        password: hashedPassword,\n        phone: '1234567890',\n        role: 'client',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        _id: '2', \n        name: 'Test Lawyer',\n        email: 'lawyer@test.com',\n        password: hashedPassword,\n        phone: '0987654321',\n        role: 'lawyer',\n        city: 'Mumbai',\n        specialization: ['civil', 'corporate'],\n        experience: 5,\n        rating: 4.5,\n        stats: { totalCases: 10, wonCases: 8, lostCases: 2 },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }\n    ];\n\n    this.policeStations = [\n      // Mumbai Police Stations\n      {\n        _id: '1',\n        name: 'Central Police Station',\n        code: 'MUM001',\n        city: 'Mumbai',\n        address: '123 Central Street, Mumbai',\n        phone: '022-12345678',\n        email: 'central@mumbaipolice.gov.in',\n        createdAt: new Date(),\n      },\n      {\n        _id: '2',\n        name: 'Bandra Police Station',\n        code: 'MUM002',\n        city: 'Mumbai',\n        address: '456 Bandra West, Mumbai',\n        phone: '022-26401234',\n        email: 'bandra@mumbaipolice.gov.in',\n        createdAt: new Date(),\n      },\n      // Delhi Police Stations\n      {\n        _id: '3',\n        name: 'Connaught Place Police Station',\n        code: 'DEL001',\n        city: 'Delhi',\n        address: 'CP Metro Station, New Delhi',\n        phone: '011-23456789',\n        email: 'cp@delhipolice.gov.in',\n        createdAt: new Date(),\n      },\n      {\n        _id: '4',\n        name: 'Karol Bagh Police Station',\n        code: 'DEL002',\n        city: 'Delhi',\n        address: 'Karol Bagh, New Delhi',\n        phone: '011-25742101',\n        email: 'karolbagh@delhipolice.gov.in',\n        createdAt: new Date(),\n      },\n      // Bangalore Police Stations\n      {\n        _id: '5',\n        name: 'MG Road Police Station',\n        code: 'BLR001',\n        city: 'Bangalore',\n        address: 'MG Road, Bangalore',\n        phone: '080-22234567',\n        email: 'mgroad@bangalorepolice.gov.in',\n        createdAt: new Date(),\n      },\n      {\n        _id: '6',\n        name: 'Koramangala Police Station',\n        code: 'BLR002',\n        city: 'Bangalore',\n        address: '5th Block Koramangala, Bangalore',\n        phone: '080-25553333',\n        email: 'koramangala@bangalorepolice.gov.in',\n        createdAt: new Date(),\n      },\n      // Pune Police Stations\n      {\n        _id: '7',\n        name: 'Pune City Police Station',\n        code: 'PUN001',\n        city: 'Pune',\n        address: 'FC Road, Pune',\n        phone: '020-26124567',\n        email: 'fcroad@punepolice.gov.in',\n        createdAt: new Date(),\n      },\n      {\n        _id: '8',\n        name: 'Kothrud Police Station',\n        code: 'PUN002',\n        city: 'Pune',\n        address: 'Kothrud, Pune',\n        phone: '020-25384455',\n        email: 'kothrud@punepolice.gov.in',\n        createdAt: new Date(),\n      },\n      // Ahmedabad Police Stations\n      {\n        _id: '9',\n        name: 'Navrangpura Police Station',\n        code: 'AMD001',\n        city: 'Ahmedabad',\n        address: 'Navrangpura, Ahmedabad',\n        phone: '079-26302222',\n        email: 'navrangpura@ahmedabadpolice.gov.in',\n        createdAt: new Date(),\n      },\n      {\n        _id: '10',\n        name: 'Satellite Police Station',\n        code: 'AMD002',\n        city: 'Ahmedabad',\n        address: 'Satellite Road, Ahmedabad',\n        phone: '079-26921111',\n        email: 'satellite@ahmedabadpolice.gov.in',\n        createdAt: new Date(),\n      }\n    ];\n  }\n\n  async login(data: LoginData): Promise<AuthResponse> {\n    const user = this.users.find(u => u.email === data.email);\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const isValidPassword = await bcrypt.compare(data.password, user.password);\n    if (!isValidPassword) {\n      throw new Error('Invalid password');\n    }\n\n    const token = jwt.sign(\n      { userId: user._id, email: user.email, role: user.role },\n      process.env.JWT_SECRET || 'fallback-secret',\n      { expiresIn: '24h' }\n    );\n\n    return { user, token };\n  }\n\n  async register(userData: InsertUser): Promise<User> {\n    const existingUser = this.users.find(u => u.email === userData.email);\n    if (existingUser) {\n      throw new Error('User with this email already exists');\n    }\n\n    // Auto-assign police station for police officers based on their city\n    if (userData.role === 'police' && userData.city && !userData.policeStationCode) {\n      const cityStations = this.policeStations.filter(station => station.city === userData.city);\n      console.log(`🔍 Found ${cityStations.length} stations for city: ${userData.city}`);\n      if (cityStations.length > 0) {\n        userData.policeStationCode = cityStations[0].code; // Assign first station in the city\n        console.log(`🚔 Auto-assigned station ${cityStations[0].code}: ${cityStations[0].name}`);\n      } else {\n        console.log(`⚠️  No police stations found for city: ${userData.city}`);\n      }\n    }\n\n    const hashedPassword = await bcrypt.hash(userData.password, 10);\n    const user: User = {\n      _id: this.generateId(),\n      ...userData,\n      password: hashedPassword,\n      stats: userData.stats || { totalCases: 0, wonCases: 0, lostCases: 0 },\n      rating: userData.rating || 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    \n    this.users.push(user);\n    console.log(`✅ New user registered: ${user.email} (ID: ${user._id})`);\n    if (userData.role === 'police' && userData.policeStationCode) {\n      console.log(`🚔 Police officer assigned to station: ${userData.policeStationCode}`);\n    }\n    console.log(`Total users in memory: ${this.users.length}`);\n    return user;\n  }\n\n  async getUser(id: string): Promise<User | null> {\n    return this.users.find(u => u._id === id) || null;\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    return this.users.find(u => u.email === email) || null;\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User | null> {\n    const index = this.users.findIndex(u => u._id === id);\n    if (index === -1) return null;\n    \n    this.users[index] = { ...this.users[index], ...data, updatedAt: new Date() };\n    return this.users[index];\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return this.users.filter(u => u.role === role);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return this.users;\n  }\n\n  async getLawyers(filters?: { city?: string; caseType?: string }): Promise<Lawyer[]> {\n    let result = this.users.filter(u => u.role === 'lawyer') as Lawyer[];\n    \n    if (filters?.city) {\n      result = result.filter(l => l.city === filters.city);\n    }\n    \n    return result;\n  }\n\n  async getLawyer(id: string): Promise<Lawyer | null> {\n    const user = this.users.find(u => u._id === id && u.role === 'lawyer');\n    return user as Lawyer || null;\n  }\n\n  async createLawyer(lawyer: InsertLawyer): Promise<Lawyer> {\n    const newLawyer: Lawyer = {\n      _id: this.generateId(),\n      ...lawyer,\n      createdAt: new Date(),\n    };\n    this.lawyers.push(newLawyer);\n    return newLawyer;\n  }\n\n  async getCases(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<Case[]> {\n    let result = [...this.cases];\n    \n    if (filters?.clientId) {\n      result = result.filter(c => c.clientId === filters.clientId);\n    }\n    if (filters?.lawyerId) {\n      result = result.filter(c => c.lawyerId === filters.lawyerId);\n    }\n    if (filters?.status) {\n      result = result.filter(c => c.status === filters.status);\n    }\n    \n    return result;\n  }\n\n  async getCase(id: string): Promise<Case | null> {\n    return this.cases.find(c => c._id === id) || null;\n  }\n\n  async createCase(caseData: InsertCase): Promise<Case> {\n    const newCase: Case = {\n      _id: this.generateId(),\n      ...caseData,\n      status: 'submitted',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.cases.push(newCase);\n    return newCase;\n  }\n\n  async updateCase(id: string, data: Partial<Case>): Promise<Case | null> {\n    const index = this.cases.findIndex(c => c._id === id);\n    if (index === -1) return null;\n    \n    this.cases[index] = { ...this.cases[index], ...data, updatedAt: new Date() };\n    return this.cases[index];\n  }\n\n  async getPoliceStations(city?: string): Promise<PoliceStation[]> {\n    let result = [...this.policeStations];\n    if (city) {\n      result = result.filter(ps => ps.city === city);\n    }\n    return result;\n  }\n\n  async getAllPoliceStations(): Promise<PoliceStation[]> {\n    return [...this.policeStations];\n  }\n\n  async getPoliceStation(id: string): Promise<PoliceStation | null> {\n    return this.policeStations.find(ps => ps._id === id) || null;\n  }\n\n  async getMessages(userId: string, otherUserId?: string): Promise<Message[]> {\n    let result = this.messages.filter(m => \n      m.senderId === userId || m.receiverId === userId\n    );\n    \n    if (otherUserId) {\n      result = result.filter(m => \n        (m.senderId === userId && m.receiverId === otherUserId) ||\n        (m.senderId === otherUserId && m.receiverId === userId)\n      );\n    }\n    \n    return result.sort((a, b) => \n      (a.timestamp?.getTime() || 0) - (b.timestamp?.getTime() || 0)\n    );\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const newMessage: Message = {\n      _id: this.generateId(),\n      ...message,\n      timestamp: new Date(),\n      read: false,\n    };\n    this.messages.push(newMessage);\n    return newMessage;\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return this.notifications.filter(n => n.userId === userId)\n      .sort((a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0));\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const newNotification: Notification = {\n      _id: this.generateId(),\n      ...notification,\n      read: false,\n      createdAt: new Date(),\n    };\n    this.notifications.push(newNotification);\n    return newNotification;\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    const index = this.notifications.findIndex(n => n._id === id);\n    if (index !== -1) {\n      this.notifications[index].read = true;\n    }\n  }\n\n  async deleteReadNotifications(userId: string): Promise<void> {\n    this.notifications = this.notifications.filter(n => !(n.userId === userId && n.read));\n  }\n\n  async getCaseRequests(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<CaseRequest[]> {\n    let result = [...this.caseRequests];\n    \n    if (filters?.clientId) {\n      result = result.filter(cr => cr.clientId === filters.clientId);\n    }\n    if (filters?.lawyerId) {\n      result = result.filter(cr => cr.lawyerId === filters.lawyerId);\n    }\n    if (filters?.status) {\n      result = result.filter(cr => cr.status === filters.status);\n    }\n    \n    return result;\n  }\n\n  async getCaseRequest(id: string): Promise<CaseRequest | null> {\n    return this.caseRequests.find(cr => cr._id === id) || null;\n  }\n\n  async createCaseRequest(caseRequest: InsertCaseRequest): Promise<CaseRequest> {\n    const newCaseRequest: CaseRequest = {\n      _id: this.generateId(),\n      ...caseRequest,\n      status: 'pending',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.caseRequests.push(newCaseRequest);\n    return newCaseRequest;\n  }\n\n  async updateCaseRequest(id: string, data: Partial<CaseRequest>): Promise<CaseRequest | null> {\n    const index = this.caseRequests.findIndex(cr => cr._id === id);\n    if (index === -1) return null;\n    \n    this.caseRequests[index] = { ...this.caseRequests[index], ...data, updatedAt: new Date() };\n    return this.caseRequests[index];\n  }\n}","size_bytes":12974},"server/storage.ts":{"content":"import bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\nimport mongoose from 'mongoose';\nimport { \n  type User, type InsertUser, type Lawyer, type InsertLawyer,\n  type Case, type InsertCase, type PoliceStation, type InsertPoliceStation,\n  type Message, type InsertMessage, type Notification, type InsertNotification,\n  type CaseRequest, type InsertCaseRequest, type LoginData, type AuthResponse\n} from \"@shared/schema\";\nimport { \n  UserModel, LawyerModel, CaseModel, PoliceStationModel, \n  MessageModel, NotificationModel, CaseRequestModel \n} from \"./db.js\";\nimport { MemoryStorage } from \"./storage-memory.js\";\n\nexport interface IStorage {\n  // Auth\n  login(data: LoginData): Promise<AuthResponse>;\n  register(user: InsertUser): Promise<User>;\n  \n  // Users\n  getUser(id: string): Promise<User | null>;\n  getUserByEmail(email: string): Promise<User | null>;\n  updateUser(id: string, data: Partial<User>): Promise<User | null>;\n  getUsersByRole(role: string): Promise<User[]>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Lawyers\n  getLawyers(filters?: { city?: string; caseType?: string }): Promise<Lawyer[]>;\n  getLawyer(id: string): Promise<Lawyer | null>;\n  createLawyer(lawyer: InsertLawyer): Promise<Lawyer>;\n  \n  // Cases\n  getCases(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<Case[]>;\n  getCase(id: string): Promise<Case | null>;\n  createCase(caseData: InsertCase): Promise<Case>;\n  updateCase(id: string, data: Partial<Case>): Promise<Case | null>;\n  \n  // Police Stations\n  getPoliceStations(city?: string): Promise<PoliceStation[]>;\n  getAllPoliceStations(): Promise<PoliceStation[]>;\n  getPoliceStation(id: string): Promise<PoliceStation | null>;\n  \n  // Messages\n  getMessages(userId: string, otherUserId?: string): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  \n  // Notifications\n  getNotifications(userId: string): Promise<Notification[]>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationAsRead(id: string): Promise<void>;\n  deleteReadNotifications(userId: string): Promise<void>;\n  \n  // Case Requests\n  getCaseRequests(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<CaseRequest[]>;\n  getCaseRequest(id: string): Promise<CaseRequest | null>;\n  createCaseRequest(caseRequest: InsertCaseRequest): Promise<CaseRequest>;\n  updateCaseRequest(id: string, data: Partial<CaseRequest>): Promise<CaseRequest | null>;\n}\n\nexport class MongoStorage implements IStorage {\n  private isConnected(): boolean {\n    return mongoose.connection.readyState === 1;\n  }\n  async login(data: LoginData): Promise<AuthResponse> {\n    const user = await UserModel.findOne({ email: data.email });\n    if (!user) {\n      throw new Error('User not found');\n    }\n\n    const isValidPassword = await bcrypt.compare(data.password, user.password);\n    if (!isValidPassword) {\n      throw new Error('Invalid password');\n    }\n\n    const token = jwt.sign(\n      { userId: user._id, email: user.email, role: user.role },\n      process.env.JWT_SECRET || 'fallback-secret',\n      { expiresIn: '24h' }\n    );\n\n    return {\n      user: {\n        _id: user._id.toString(),\n        name: user.name,\n        email: user.email,\n        password: user.password,\n        phone: user.phone,\n        role: user.role,\n        city: user.city || undefined,\n        specialization: user.specialization || undefined,\n        experience: user.experience || undefined,\n        policeStationCode: user.policeStationCode || undefined,\n        stats: user.stats || undefined,\n        rating: user.rating || undefined,\n        createdAt: user.createdAt,\n        updatedAt: user.updatedAt,\n      },\n      token\n    };\n  }\n\n  async register(userData: InsertUser): Promise<User> {\n    // Auto-assign police station for police officers based on their city\n    if (userData.role === 'police' && userData.city && !userData.policeStationCode) {\n      const cityStations = await PoliceStationModel.find({ city: userData.city });\n      if (cityStations.length > 0) {\n        userData.policeStationCode = cityStations[0].code; // Assign first station in the city\n      }\n    }\n\n    const hashedPassword = await bcrypt.hash(userData.password, 10);\n    const user = new UserModel({\n      ...userData,\n      password: hashedPassword,\n    });\n    \n    const savedUser = await user.save();\n    return {\n      _id: savedUser._id.toString(),\n      name: savedUser.name,\n      email: savedUser.email,\n      password: savedUser.password,\n      phone: savedUser.phone,\n      role: savedUser.role,\n      city: savedUser.city || undefined,\n      specialization: savedUser.specialization || undefined,\n      experience: savedUser.experience || undefined,\n      policeStationCode: savedUser.policeStationCode || undefined,\n      stats: savedUser.stats || undefined,\n      rating: savedUser.rating || undefined,\n      createdAt: savedUser.createdAt,\n      updatedAt: savedUser.updatedAt,\n    };\n  }\n\n  async getUser(id: string): Promise<User | null> {\n    const user = await UserModel.findById(id);\n    if (!user) return null;\n    \n    return {\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city || undefined,\n      specialization: user.specialization || undefined,\n      experience: user.experience || undefined,\n      policeStationCode: user.policeStationCode || undefined,\n      stats: user.stats || undefined,\n      rating: user.rating || undefined,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    };\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    const user = await UserModel.findOne({ email });\n    if (!user) return null;\n    \n    return {\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city || undefined,\n      specialization: user.specialization || undefined,\n      experience: user.experience || undefined,\n      policeStationCode: user.policeStationCode || undefined,\n      stats: user.stats || undefined,\n      rating: user.rating || undefined,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    };\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User | null> {\n    const user = await UserModel.findByIdAndUpdate(id, data, { new: true });\n    if (!user) return null;\n    \n    return {\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city,\n      specialization: user.specialization,\n      experience: user.experience,\n      policeStationCode: user.policeStationCode,\n      stats: user.stats,\n      rating: user.rating,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    };\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    const users = await UserModel.find({ role });\n    return users.map(user => ({\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city,\n      specialization: user.specialization,\n      experience: user.experience,\n      policeStationCode: user.policeStationCode,\n      stats: user.stats,\n      rating: user.rating,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    }));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const users = await UserModel.find({});\n    return users.map(user => ({\n      _id: user._id.toString(),\n      name: user.name,\n      email: user.email,\n      password: user.password,\n      phone: user.phone,\n      role: user.role,\n      city: user.city,\n      specialization: user.specialization,\n      experience: user.experience,\n      policeStationCode: user.policeStationCode,\n      stats: user.stats,\n      rating: user.rating,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    }));\n  }\n\n  async getLawyers(filters?: { city?: string; caseType?: string }): Promise<Lawyer[]> {\n    const query: any = { role: 'lawyer' };\n    \n    if (filters?.city) {\n      query.city = filters.city;\n    }\n    \n    if (filters?.caseType) {\n      query.specialization = { $in: [filters.caseType] };\n    }\n\n    const lawyers = await UserModel.find(query);\n    return lawyers.map(lawyer => ({\n      _id: lawyer._id.toString(),\n      name: lawyer.name,\n      email: lawyer.email,\n      phone: lawyer.phone,\n      specialization: lawyer.specialization || [],\n      city: lawyer.city || '',\n      experience: lawyer.experience || 0,\n      rating: lawyer.rating || 0,\n      stats: lawyer.stats || { totalCases: 0, wonCases: 0, lostCases: 0 },\n      createdAt: lawyer.createdAt,\n    }));\n  }\n\n  async getLawyer(id: string): Promise<Lawyer | null> {\n    const lawyer = await UserModel.findOne({ _id: id, role: 'lawyer' });\n    if (!lawyer) return null;\n    \n    return {\n      _id: lawyer._id.toString(),\n      name: lawyer.name,\n      email: lawyer.email,\n      phone: lawyer.phone,\n      specialization: lawyer.specialization || [],\n      city: lawyer.city || '',\n      experience: lawyer.experience || 0,\n      rating: lawyer.rating || 0,\n      stats: lawyer.stats || { totalCases: 0, wonCases: 0, lostCases: 0 },\n      createdAt: lawyer.createdAt,\n    };\n  }\n\n  async createLawyer(lawyerData: InsertLawyer): Promise<Lawyer> {\n    const lawyer = new LawyerModel(lawyerData);\n    const savedLawyer = await lawyer.save();\n    \n    return {\n      _id: savedLawyer._id.toString(),\n      name: savedLawyer.name,\n      email: savedLawyer.email,\n      phone: savedLawyer.phone,\n      specialization: savedLawyer.specialization,\n      city: savedLawyer.city,\n      experience: savedLawyer.experience,\n      rating: savedLawyer.rating,\n      stats: savedLawyer.stats,\n      createdAt: savedLawyer.createdAt,\n    };\n  }\n\n  // Cases implementation...\n  async getCases(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<Case[]> {\n    const query: any = {};\n    \n    if (filters?.clientId) query.clientId = filters.clientId;\n    if (filters?.lawyerId) query.lawyerId = filters.lawyerId;\n    if (filters?.status) query.status = filters.status;\n\n    const cases = await CaseModel.find(query).populate('policeStationId');\n    return cases.map(case_ => ({\n      _id: case_._id.toString(),\n      title: case_.title,\n      description: case_.description,\n      caseType: case_.caseType,\n      victim: case_.victim || { name: '', phone: '' },\n      accused: case_.accused || { name: '' },\n      clientId: case_.clientId,\n      lawyerId: case_.lawyerId,\n      policeStationId: case_.policeStationId,\n      policeStation: case_.policeStationId ? {\n        _id: (case_.policeStationId as any)._id?.toString(),\n        name: (case_.policeStationId as any).name,\n        code: (case_.policeStationId as any).code,\n        city: (case_.policeStationId as any).city,\n        address: (case_.policeStationId as any).address,\n        phone: (case_.policeStationId as any).phone,\n        email: (case_.policeStationId as any).email,\n      } : undefined,\n      city: case_.city,\n      status: case_.status,\n      pnr: case_.pnr,\n      hearingDate: case_.hearingDate,\n      documents: case_.documents,\n      createdAt: case_.createdAt,\n      updatedAt: case_.updatedAt,\n    }));\n  }\n\n  async getCase(id: string): Promise<Case | null> {\n    const case_ = await CaseModel.findById(id).populate('policeStationId');\n    if (!case_) return null;\n    \n    return {\n      _id: case_._id.toString(),\n      title: case_.title,\n      description: case_.description,\n      caseType: case_.caseType,\n      victim: case_.victim || { name: '', phone: '' },\n      accused: case_.accused || { name: '' },\n      clientId: case_.clientId,\n      lawyerId: case_.lawyerId,\n      policeStationId: case_.policeStationId,\n      policeStation: case_.policeStationId ? {\n        _id: (case_.policeStationId as any)._id?.toString(),\n        name: (case_.policeStationId as any).name,\n        code: (case_.policeStationId as any).code,\n        city: (case_.policeStationId as any).city,\n        address: (case_.policeStationId as any).address,\n        phone: (case_.policeStationId as any).phone,\n        email: (case_.policeStationId as any).email,\n      } : undefined,\n      city: case_.city,\n      status: case_.status,\n      pnr: case_.pnr,\n      hearingDate: case_.hearingDate,\n      documents: case_.documents,\n      createdAt: case_.createdAt,\n      updatedAt: case_.updatedAt,\n    };\n  }\n\n  async createCase(caseData: InsertCase): Promise<Case> {\n    // Set default status to under_review if not specified\n    const caseWithStatus = {\n      ...caseData,\n      status: caseData.status || 'under_review' as const\n    };\n    const case_ = new CaseModel(caseWithStatus);\n    const savedCase = await case_.save();\n    \n    return {\n      _id: savedCase._id.toString(),\n      title: savedCase.title,\n      description: savedCase.description,\n      caseType: savedCase.caseType,\n      victim: savedCase.victim || { name: '', phone: '' },\n      accused: savedCase.accused || { name: '' },\n      clientId: savedCase.clientId,\n      lawyerId: savedCase.lawyerId,\n      policeStationId: savedCase.policeStationId,\n      city: savedCase.city,\n      status: savedCase.status,\n      pnr: savedCase.pnr,\n      hearingDate: savedCase.hearingDate,\n      documents: savedCase.documents,\n      createdAt: savedCase.createdAt,\n      updatedAt: savedCase.updatedAt,\n    };\n  }\n\n  async updateCase(id: string, data: Partial<Case>): Promise<Case | null> {\n    const case_ = await CaseModel.findByIdAndUpdate(id, data, { new: true });\n    if (!case_) return null;\n    \n    return {\n      _id: case_._id.toString(),\n      title: case_.title,\n      description: case_.description,\n      caseType: case_.caseType,\n      victim: case_.victim || { name: '', phone: '' },\n      accused: case_.accused || { name: '' },\n      clientId: case_.clientId,\n      lawyerId: case_.lawyerId,\n      policeStationId: case_.policeStationId,\n      city: case_.city,\n      status: case_.status,\n      pnr: case_.pnr,\n      hearingDate: case_.hearingDate,\n      documents: case_.documents,\n      createdAt: case_.createdAt,\n      updatedAt: case_.updatedAt,\n    };\n  }\n\n  async getPoliceStations(city?: string): Promise<PoliceStation[]> {\n    const query: any = {};\n    if (city) query.city = city;\n\n    const stations = await PoliceStationModel.find(query);\n    return stations.map(station => ({\n      _id: station._id.toString(),\n      name: station.name,\n      code: station.code,\n      city: station.city,\n      address: station.address,\n      phone: station.phone,\n      email: station.email,\n      createdAt: station.createdAt,\n    }));\n  }\n\n  async getAllPoliceStations(): Promise<PoliceStation[]> {\n    const stations = await PoliceStationModel.find({});\n    return stations.map(station => ({\n      _id: station._id.toString(),\n      name: station.name,\n      code: station.code,\n      city: station.city,\n      address: station.address,\n      phone: station.phone,\n      email: station.email,\n      createdAt: station.createdAt,\n    }));\n  }\n\n  async getPoliceStation(id: string): Promise<PoliceStation | null> {\n    const station = await PoliceStationModel.findById(id);\n    if (!station) return null;\n    \n    return {\n      _id: station._id.toString(),\n      name: station.name,\n      code: station.code,\n      city: station.city,\n      address: station.address,\n      phone: station.phone,\n      email: station.email,\n      createdAt: station.createdAt,\n    };\n  }\n\n  async getMessages(userId: string, otherUserId?: string): Promise<Message[]> {\n    const query: any = {\n      $or: [\n        { senderId: userId },\n        { receiverId: userId }\n      ]\n    };\n    \n    if (otherUserId) {\n      query.$or = [\n        { senderId: userId, receiverId: otherUserId },\n        { senderId: otherUserId, receiverId: userId }\n      ];\n    }\n\n    const messages = await MessageModel.find(query).sort({ timestamp: 1 });\n    return messages.map(msg => ({\n      _id: msg._id.toString(),\n      senderId: msg.senderId,\n      receiverId: msg.receiverId,\n      caseId: msg.caseId,\n      content: msg.content,\n      timestamp: msg.timestamp,\n      read: msg.read,\n    }));\n  }\n\n  async createMessage(messageData: InsertMessage): Promise<Message> {\n    const message = new MessageModel({\n      ...messageData,\n      timestamp: new Date(),\n      read: false,\n    });\n    \n    const savedMessage = await message.save();\n    return {\n      _id: savedMessage._id.toString(),\n      senderId: savedMessage.senderId,\n      receiverId: savedMessage.receiverId,\n      caseId: savedMessage.caseId,\n      content: savedMessage.content,\n      timestamp: savedMessage.timestamp,\n      read: savedMessage.read,\n    };\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    const notifications = await NotificationModel.find({ userId }).sort({ createdAt: -1 });\n    return notifications.map(notif => ({\n      _id: notif._id.toString(),\n      userId: notif.userId,\n      title: notif.title,\n      message: notif.message,\n      type: notif.type,\n      read: notif.read,\n      caseId: notif.caseId,\n      createdAt: notif.createdAt,\n    }));\n  }\n\n  async createNotification(notificationData: InsertNotification): Promise<Notification> {\n    const notification = new NotificationModel({\n      ...notificationData,\n      read: false,\n      createdAt: new Date(),\n    });\n    \n    const savedNotification = await notification.save();\n    return {\n      _id: savedNotification._id.toString(),\n      userId: savedNotification.userId,\n      title: savedNotification.title,\n      message: savedNotification.message,\n      type: savedNotification.type,\n      read: savedNotification.read,\n      caseId: savedNotification.caseId,\n      createdAt: savedNotification.createdAt,\n    };\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    await NotificationModel.findByIdAndUpdate(id, { read: true });\n  }\n\n  async deleteReadNotifications(userId: string): Promise<void> {\n    await NotificationModel.deleteMany({ userId, read: true });\n  }\n\n  async getCaseRequests(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<CaseRequest[]> {\n    const query: any = {};\n    \n    if (filters?.clientId) query.clientId = filters.clientId;\n    if (filters?.lawyerId) query.lawyerId = filters.lawyerId;\n    if (filters?.status) query.status = filters.status;\n\n    const requests = await CaseRequestModel.find(query).sort({ createdAt: -1 });\n    return requests.map(req => ({\n      _id: req._id.toString(),\n      clientId: req.clientId,\n      lawyerId: req.lawyerId,\n      title: req.title,\n      description: req.description,\n      victimName: req.victimName,\n      accusedName: req.accusedName,\n      clientPhone: req.clientPhone,\n      clientEmail: req.clientEmail,\n      caseType: req.caseType,\n      victim: req.victim,\n      accused: req.accused,\n      city: req.city,\n      policeStationId: req.policeStationId,\n      documents: req.documents,\n      status: req.status,\n      lawyerResponse: req.lawyerResponse,\n      createdAt: req.createdAt,\n    }));\n  }\n\n  async getCaseRequest(id: string): Promise<CaseRequest | null> {\n    const request = await CaseRequestModel.findById(id);\n    if (!request) return null;\n    \n    return {\n      _id: request._id.toString(),\n      clientId: request.clientId,\n      lawyerId: request.lawyerId,\n      title: request.title,\n      description: request.description,\n      victimName: request.victimName,\n      accusedName: request.accusedName,\n      clientPhone: request.clientPhone,\n      clientEmail: request.clientEmail,\n      caseType: request.caseType,\n      victim: request.victim,\n      accused: request.accused,\n      city: request.city,\n      policeStationId: request.policeStationId,\n      documents: request.documents,\n      status: request.status,\n      lawyerResponse: request.lawyerResponse,\n      createdAt: request.createdAt,\n    };\n  }\n\n  async createCaseRequest(requestData: InsertCaseRequest): Promise<CaseRequest> {\n    const request = new CaseRequestModel({\n      ...requestData,\n      status: 'pending',\n      createdAt: new Date(),\n    });\n    \n    const savedRequest = await request.save();\n    return {\n      _id: savedRequest._id.toString(),\n      clientId: savedRequest.clientId,\n      lawyerId: savedRequest.lawyerId,\n      title: savedRequest.title,\n      description: savedRequest.description,\n      victimName: savedRequest.victimName,\n      accusedName: savedRequest.accusedName,\n      clientPhone: savedRequest.clientPhone,\n      clientEmail: savedRequest.clientEmail,\n      caseType: savedRequest.caseType,\n      victim: savedRequest.victim,\n      accused: savedRequest.accused,\n      city: savedRequest.city,\n      policeStationId: savedRequest.policeStationId,\n      documents: savedRequest.documents,\n      status: savedRequest.status,\n      lawyerResponse: savedRequest.lawyerResponse,\n      createdAt: savedRequest.createdAt,\n    };\n  }\n\n  async updateCaseRequest(id: string, data: Partial<CaseRequest>): Promise<CaseRequest | null> {\n    const request = await CaseRequestModel.findByIdAndUpdate(id, data, { new: true });\n    if (!request) return null;\n    \n    return {\n      _id: request._id.toString(),\n      clientId: request.clientId,\n      lawyerId: request.lawyerId,\n      title: request.title,\n      description: request.description,\n      victimName: request.victimName,\n      accusedName: request.accusedName,\n      clientPhone: request.clientPhone,\n      clientEmail: request.clientEmail,\n      caseType: request.caseType,\n      victim: request.victim,\n      accused: request.accused,\n      city: request.city,\n      policeStationId: request.policeStationId,\n      documents: request.documents,\n      status: request.status,\n      lawyerResponse: request.lawyerResponse,\n      createdAt: request.createdAt,\n    };\n  }\n}\n\n// Storage instance that dynamically switches based on MongoDB connection\nclass StorageManager implements IStorage {\n  private mongoStorage = new MongoStorage();\n  private memoryStorage = new MemoryStorage();\n\n  private getStorage(): IStorage {\n    return mongoose.connection.readyState === 1 ? this.mongoStorage : this.memoryStorage;\n  }\n\n  async login(data: LoginData): Promise<AuthResponse> {\n    return this.getStorage().login(data);\n  }\n\n  async register(user: InsertUser): Promise<User> {\n    return this.getStorage().register(user);\n  }\n\n  async getUser(id: string): Promise<User | null> {\n    return this.getStorage().getUser(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    return this.getStorage().getUserByEmail(email);\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User | null> {\n    return this.getStorage().updateUser(id, data);\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return this.getStorage().getUsersByRole(role);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return this.getStorage().getAllUsers();\n  }\n\n  async getLawyers(filters?: { city?: string; caseType?: string }): Promise<Lawyer[]> {\n    return this.getStorage().getLawyers(filters);\n  }\n\n  async getLawyer(id: string): Promise<Lawyer | null> {\n    return this.getStorage().getLawyer(id);\n  }\n\n  async createLawyer(lawyer: InsertLawyer): Promise<Lawyer> {\n    return this.getStorage().createLawyer(lawyer);\n  }\n\n  async getCases(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<Case[]> {\n    return this.getStorage().getCases(filters);\n  }\n\n  async getCase(id: string): Promise<Case | null> {\n    return this.getStorage().getCase(id);\n  }\n\n  async createCase(caseData: InsertCase): Promise<Case> {\n    return this.getStorage().createCase(caseData);\n  }\n\n  async updateCase(id: string, data: Partial<Case>): Promise<Case | null> {\n    return this.getStorage().updateCase(id, data);\n  }\n\n  async getPoliceStations(city?: string): Promise<PoliceStation[]> {\n    return this.getStorage().getPoliceStations(city);\n  }\n\n  async getAllPoliceStations(): Promise<PoliceStation[]> {\n    return this.getStorage().getAllPoliceStations();\n  }\n\n  async getPoliceStation(id: string): Promise<PoliceStation | null> {\n    return this.getStorage().getPoliceStation(id);\n  }\n\n  async getMessages(userId: string, otherUserId?: string): Promise<Message[]> {\n    return this.getStorage().getMessages(userId, otherUserId);\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    return this.getStorage().createMessage(message);\n  }\n\n  async getNotifications(userId: string): Promise<Notification[]> {\n    return this.getStorage().getNotifications(userId);\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    return this.getStorage().createNotification(notification);\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    return this.getStorage().markNotificationAsRead(id);\n  }\n\n  async deleteReadNotifications(userId: string): Promise<void> {\n    return this.getStorage().deleteReadNotifications(userId);\n  }\n\n  async getCaseRequests(filters?: { clientId?: string; lawyerId?: string; status?: string }): Promise<CaseRequest[]> {\n    return this.getStorage().getCaseRequests(filters);\n  }\n\n  async getCaseRequest(id: string): Promise<CaseRequest | null> {\n    return this.getStorage().getCaseRequest(id);\n  }\n\n  async createCaseRequest(caseRequest: InsertCaseRequest): Promise<CaseRequest> {\n    return this.getStorage().createCaseRequest(caseRequest);\n  }\n\n  async updateCaseRequest(id: string, data: Partial<CaseRequest>): Promise<CaseRequest | null> {\n    return this.getStorage().updateCaseRequest(id, data);\n  }\n}\n\nexport const storage = new StorageManager();","size_bytes":25840},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// User Schema\nexport const userSchema = z.object({\n  _id: z.string().optional(),\n  name: z.string(),\n  email: z.string().email(),\n  password: z.string().min(6),\n  phone: z.string(),\n  role: z.enum(['client', 'lawyer', 'police']),\n  city: z.string().optional(),\n  specialization: z.array(z.string()).optional(), // for lawyers\n  experience: z.number().optional(), // for lawyers\n  policeStationCode: z.string().optional(), // for police\n  stats: z.object({\n    totalCases: z.number(),\n    wonCases: z.number(),\n    lostCases: z.number(),\n  }).optional(),\n  rating: z.number().optional(),\n  description: z.string().optional(),\n  image: z.string().optional(),\n  createdAt: z.date().optional(),\n  updatedAt: z.date().optional(),\n});\n\nexport const insertUserSchema = userSchema.omit({ _id: true, createdAt: true, updatedAt: true });\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\n// Lawyer Schema\nexport const lawyerSchema = z.object({\n  _id: z.string().optional(),\n  name: z.string(),\n  email: z.string().email(),\n  phone: z.string(),\n  specialization: z.array(z.string()),\n  city: z.string(),\n  experience: z.number(),\n  rating: z.number(),\n  stats: z.object({\n    totalCases: z.number(),\n    wonCases: z.number(),\n    lostCases: z.number(),\n  }),\n  description: z.string().optional(),\n  image: z.string().optional(),\n  createdAt: z.date().optional(),\n});\n\nexport const insertLawyerSchema = lawyerSchema.omit({ _id: true, createdAt: true });\nexport type Lawyer = z.infer<typeof lawyerSchema>;\nexport type InsertLawyer = z.infer<typeof insertLawyerSchema>;\n\n// Police Station Schema\nexport const policeStationSchema = z.object({\n  _id: z.string().optional(),\n  name: z.string(),\n  code: z.string(), // e.g., DEL-001\n  city: z.string(),\n  address: z.string(),\n  phone: z.string(),\n  email: z.string().email(),\n  createdAt: z.date().optional(),\n});\n\n// Case Schema\nexport const caseSchema = z.object({\n  _id: z.string().optional(),\n  title: z.string(),\n  description: z.string(),\n  caseType: z.enum(['fraud', 'theft', 'murder', 'civil', 'corporate']),\n  victim: z.object({\n    name: z.string(),\n    phone: z.string(),\n    email: z.string().optional(),\n  }),\n  accused: z.object({\n    name: z.string(),\n    phone: z.string().optional(),\n    address: z.string().optional(),\n  }),\n  clientId: z.string(),\n  lawyerId: z.string().optional(),\n  policeStationId: z.string(),\n  policeStation: policeStationSchema.optional(),\n  city: z.string(),\n  status: z.enum(['draft', 'submitted', 'under_review', 'approved', 'rejected']),\n  pnr: z.string().optional(),\n  hearingDate: z.date().optional(),\n  documents: z.array(z.string()).optional(),\n  createdAt: z.date().optional(),\n  updatedAt: z.date().optional(),\n});\n\nexport const insertCaseSchema = caseSchema.omit({ _id: true, createdAt: true, updatedAt: true, pnr: true, policeStation: true });\nexport type Case = z.infer<typeof caseSchema>;\nexport type InsertCase = z.infer<typeof insertCaseSchema>;\n\nexport const insertPoliceStationSchema = policeStationSchema.omit({ _id: true, createdAt: true });\nexport type PoliceStation = z.infer<typeof policeStationSchema>;\nexport type InsertPoliceStation = z.infer<typeof insertPoliceStationSchema>;\n\n// Message Schema\nexport const messageSchema = z.object({\n  _id: z.string().optional(),\n  senderId: z.string(),\n  receiverId: z.string(),\n  caseId: z.string().optional(),\n  content: z.string(),\n  timestamp: z.date().optional(),\n  read: z.boolean().optional(),\n});\n\nexport const insertMessageSchema = messageSchema.omit({ _id: true, timestamp: true });\nexport type Message = z.infer<typeof messageSchema>;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n\n// Case Request Schema (for client to lawyer communication)\nexport const caseRequestSchema = z.object({\n  _id: z.string().optional(),\n  clientId: z.string(),\n  lawyerId: z.string(),\n  title: z.string(),\n  description: z.string(),\n  // Simplified fields - only basic info from client\n  victimName: z.string(),\n  accusedName: z.string(),\n  clientPhone: z.string(),\n  clientEmail: z.string().optional(),\n  documents: z.array(z.string()).optional(),\n  status: z.enum(['pending', 'accepted', 'rejected']).default('pending'),\n  lawyerResponse: z.string().optional(),\n  // Optional detailed fields (filled by lawyer later)\n  caseType: z.enum(['fraud', 'theft', 'murder', 'civil', 'corporate']).optional(),\n  victim: z.object({\n    name: z.string(),\n    phone: z.string(),\n    email: z.string().optional(),\n  }).optional(),\n  accused: z.object({\n    name: z.string(),\n    phone: z.string().optional(),\n    address: z.string().optional(),\n  }).optional(),\n  city: z.string().optional(),\n  policeStationId: z.string().optional(),\n  createdAt: z.date().optional(),\n});\n\nexport const insertCaseRequestSchema = caseRequestSchema.omit({ _id: true, createdAt: true });\nexport type CaseRequest = z.infer<typeof caseRequestSchema>;\nexport type InsertCaseRequest = z.infer<typeof insertCaseRequestSchema>;\n\n// Notification Schema\nexport const notificationSchema = z.object({\n  _id: z.string().optional(),\n  userId: z.string(),\n  title: z.string(),\n  message: z.string(),\n  type: z.enum(['case_approved', 'case_rejected', 'hearing_scheduled', 'new_message', 'case_created', 'case_request']),\n  read: z.boolean().optional(),\n  caseId: z.string().optional(),\n  caseRequestId: z.string().optional(),\n  createdAt: z.date().optional(),\n});\n\nexport const insertNotificationSchema = notificationSchema.omit({ _id: true, createdAt: true });\nexport type Notification = z.infer<typeof notificationSchema>;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\n// Login Schema\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport type LoginData = z.infer<typeof loginSchema>;\n\n// Auth Response\nexport const authResponseSchema = z.object({\n  user: userSchema,\n  token: z.string(),\n});\n\nexport type AuthResponse = z.infer<typeof authResponseSchema>;\n","size_bytes":6031},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { authService } from \"./lib/auth\";\nimport Login from \"@/pages/login\";\n\nimport Dashboard from \"@/pages/dashboard\";\nimport Lawyers from \"@/pages/lawyers\";\nimport FindLawyers from \"@/pages/find-lawyers\";\nimport CaseRequests from \"@/pages/case-requests\";\nimport Cases from \"@/pages/cases\";\nimport Calendar from \"@/pages/calendar\";\nimport Messages from \"@/pages/messages\";\nimport Documents from \"@/pages/documents\";\nimport ModernLayout from \"@/components/ModernLayout\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  if (!authService.isAuthenticated()) {\n    return <Redirect to=\"/login\" />;\n  }\n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\">\n        <Redirect to=\"/login\" />\n      </Route>\n      \n      <Route path=\"/\">\n        {authService.isAuthenticated() ? (\n          <Redirect to=\"/dashboard\" />\n        ) : (\n          <Redirect to=\"/login\" />\n        )}\n      </Route>\n\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <ModernLayout>\n            <Dashboard />\n          </ModernLayout>\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/lawyers\">\n        <ProtectedRoute>\n          <ModernLayout>\n            <Lawyers />\n          </ModernLayout>\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/find-lawyers\">\n        <ProtectedRoute>\n          <ModernLayout>\n            <FindLawyers />\n          </ModernLayout>\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/case-requests\">\n        <ProtectedRoute>\n          <ModernLayout>\n            <CaseRequests />\n          </ModernLayout>\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/cases\">\n        <ProtectedRoute>\n          <ModernLayout>\n            <Cases />\n          </ModernLayout>\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/calendar\">\n        <ProtectedRoute>\n          <ModernLayout>\n            <Calendar />\n          </ModernLayout>\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/messages\">\n        <ProtectedRoute>\n          <ModernLayout>\n            <Messages />\n          </ModernLayout>\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/documents\">\n        <ProtectedRoute>\n          <ModernLayout>\n            <Documents />\n          </ModernLayout>\n        </ProtectedRoute>\n      </Route>\n\n      <Route>\n        <div className=\"min-h-screen flex items-center justify-center bg-legal-gray\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl font-bold text-legal-blue mb-4\">404</h1>\n            <p className=\"text-gray-600\">Page not found</p>\n          </div>\n        </div>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3249},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Legal theme colors */\n  --legal-blue: hsl(220, 91%, 25%);\n  --legal-slate: hsl(215, 16%, 47%);\n  --legal-emerald: hsl(160, 84%, 39%);\n  --legal-gray: hsl(210, 40%, 98%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n\n  /* Legal theme colors for dark mode */\n  --legal-blue: hsl(220, 91%, 45%);\n  --legal-slate: hsl(215, 16%, 67%);\n  --legal-emerald: hsl(160, 84%, 59%);\n  --legal-gray: hsl(240, 10%, 10%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n@layer utilities {\n  .legal-blue {\n    color: var(--legal-blue);\n  }\n  \n  .bg-legal-blue {\n    background-color: var(--legal-blue);\n  }\n  \n  .legal-slate {\n    color: var(--legal-slate);\n  }\n  \n  .bg-legal-slate {\n    background-color: var(--legal-slate);\n  }\n  \n  .legal-emerald {\n    color: var(--legal-emerald);\n  }\n  \n  .bg-legal-emerald {\n    background-color: var(--legal-emerald);\n  }\n  \n  .bg-legal-gray {\n    background-color: var(--legal-gray);\n  }\n}\n","size_bytes":2548},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport { type Request, type Response, type NextFunction } from 'express';\nimport { UserModel } from '../db.js';\n\ninterface AuthRequest extends Request {\n  user?: any;\n}\n\nexport const authenticateToken = async (req: AuthRequest, res: Response, next: NextFunction) => {\n  const authHeader = req.headers.authorization;\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'fallback-secret') as any;\n    const user = await UserModel.findById(decoded.userId);\n    \n    if (!user) {\n      return res.status(401).json({ message: 'User not found' });\n    }\n\n    req.user = user;\n    next();\n  } catch (error) {\n    return res.status(403).json({ message: 'Invalid or expired token' });\n  }\n};\n\nexport const requireRole = (roles: string[]) => {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user || !roles.includes(req.user.role)) {\n      return res.status(403).json({ message: 'Insufficient permissions' });\n    }\n    next();\n  };\n};\n","size_bytes":1160},"client/src/components/CalendarComponent.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronLeft, ChevronRight, Download } from \"lucide-react\";\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isToday } from 'date-fns';\nimport type { Case } from \"@shared/schema\";\n\ninterface CalendarComponentProps {\n  cases: Case[];\n}\n\nexport default function CalendarComponent({ cases }: CalendarComponentProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const days = eachDayOfInterval({ start: monthStart, end: monthEnd });\n\n  const getCasesForDay = (day: Date) => {\n    return cases.filter(case_ => \n      case_.hearingDate && \n      format(new Date(case_.hearingDate), 'yyyy-MM-dd') === format(day, 'yyyy-MM-dd')\n    );\n  };\n\n  const getCaseColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-legal-emerald text-white';\n      case 'under_review':\n        return 'bg-yellow-500 text-white';\n      default:\n        return 'bg-legal-blue text-white';\n    }\n  };\n\n  const previousMonth = () => {\n    setCurrentDate(new Date(currentDate.setMonth(currentDate.getMonth() - 1)));\n  };\n\n  const nextMonth = () => {\n    setCurrentDate(new Date(currentDate.setMonth(currentDate.getMonth() + 1)));\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-xl font-bold text-gray-900\">\n            Hearing Calendar\n          </CardTitle>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={previousMonth}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <span className=\"text-lg font-medium text-gray-900 min-w-[150px] text-center\">\n                {format(currentDate, 'MMMM yyyy')}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={nextMonth}\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button className=\"bg-legal-blue hover:bg-blue-700 text-white\">\n                Month\n              </Button>\n              <Button variant=\"outline\">\n                Week\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {/* Calendar Header */}\n        <div className=\"grid grid-cols-7 gap-1 mb-4\">\n          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n            <div key={day} className=\"p-3 text-center text-sm font-medium text-gray-500\">\n              {day}\n            </div>\n          ))}\n        </div>\n\n        {/* Calendar Grid */}\n        <div className=\"grid grid-cols-7 gap-1 mb-6\">\n          {days.map(day => {\n            const dayCases = getCasesForDay(day);\n            const isCurrentMonth = isSameMonth(day, currentDate);\n            const isDayToday = isToday(day);\n            \n            return (\n              <div\n                key={day.toISOString()}\n                className={`min-h-[100px] p-2 border border-gray-100 hover:bg-gray-50 transition-colors ${\n                  isDayToday ? 'bg-blue-50 border-legal-blue' : ''\n                }`}\n              >\n                <div className={`text-right text-sm mb-2 ${\n                  isDayToday \n                    ? 'font-medium text-legal-blue' \n                    : isCurrentMonth \n                      ? 'text-gray-600' \n                      : 'text-gray-400'\n                }`}>\n                  {format(day, 'd')}\n                </div>\n                <div className=\"space-y-1\">\n                  {dayCases.slice(0, 2).map(case_ => (\n                    <Badge\n                      key={case_._id}\n                      className={`text-xs px-2 py-1 rounded text-center block truncate ${getCaseColor(case_.status)}`}\n                    >\n                      {case_.title}\n                    </Badge>\n                  ))}\n                  {dayCases.length > 2 && (\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      +{dayCases.length - 2} more\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Calendar Legend */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4 text-sm\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-legal-blue rounded\"></div>\n              <span className=\"text-gray-600\">Active Cases</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-legal-emerald rounded\"></div>\n              <span className=\"text-gray-600\">Approved Cases</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-yellow-500 rounded\"></div>\n              <span className=\"text-gray-600\">Pending Review</span>\n            </div>\n          </div>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export Calendar\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5746},"client/src/components/CaseCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Case } from \"@shared/schema\";\nimport { format } from \"date-fns\";\n\ninterface CaseCardProps {\n  case: Case;\n  onClick?: (caseData: Case) => void;\n}\n\nexport default function CaseCard({ case: caseData, onClick }: CaseCardProps) {\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'bg-green-100 text-green-800';\n      case 'rejected':\n        return 'bg-red-100 text-red-800';\n      case 'under_review':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-blue-100 text-blue-800';\n    }\n  };\n\n  const getBorderColor = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return 'border-l-legal-emerald';\n      case 'rejected':\n        return 'border-l-red-500';\n      case 'under_review':\n        return 'border-l-yellow-500';\n      default:\n        return 'border-l-legal-blue';\n    }\n  };\n\n  return (\n    <Card \n      className={`border-l-4 ${getBorderColor(caseData.status)} hover:shadow-md transition-shadow cursor-pointer`}\n      onClick={() => onClick?.(caseData)}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <p className=\"font-medium text-gray-900\">{caseData.title}</p>\n          <Badge className={`text-xs ${getStatusColor(caseData.status)}`}>\n            {caseData.status.replace('_', ' ').toUpperCase()}\n          </Badge>\n        </div>\n        <p className=\"text-sm text-gray-600 mb-2 line-clamp-2\">\n          {caseData.description}\n        </p>\n        <div className=\"flex items-center justify-between text-xs text-gray-500\">\n          <span>\n            {caseData.pnr ? (\n              <>PNR: <span className=\"font-medium\">{caseData.pnr}</span></>\n            ) : (\n              'No PNR assigned'\n            )}\n          </span>\n          <span>\n            {caseData.createdAt && format(new Date(caseData.createdAt), 'MMM d, yyyy')}\n          </span>\n        </div>\n        {caseData.hearingDate && (\n          <div className=\"mt-2 text-xs text-legal-blue font-medium\">\n            Hearing: {format(new Date(caseData.hearingDate), 'PPP')}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2321},"client/src/components/CaseCreationForm.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Calendar, User, MapPin, Phone, Mail, FileText, AlertCircle, CheckCircle } from 'lucide-react';\nimport { format } from 'date-fns';\n\nconst caseCreationSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().min(10, 'Description must be at least 10 characters'),\n  caseType: z.enum(['fraud', 'theft', 'murder', 'civil', 'corporate']),\n  victimName: z.string().min(1, 'Victim name is required'),\n  victimPhone: z.string().min(10, 'Valid victim phone is required'),\n  victimEmail: z.string().email().optional().or(z.literal('')),\n  accusedName: z.string().min(1, 'Accused name is required'),\n  accusedPhone: z.string().optional(),\n  accusedAddress: z.string().optional(),\n  city: z.string().min(1, 'City is required'),\n  policeStationId: z.string().min(1, 'Police station is required'),\n  pnr: z.string().min(1, 'PNR is required'),\n  hearingDate: z.string().optional(),\n});\n\ntype CaseCreationForm = z.infer<typeof caseCreationSchema>;\n\ninterface CaseCreationFormProps {\n  caseRequestId: string;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport default function CaseCreationForm({ caseRequestId, onSuccess, onCancel }: CaseCreationFormProps) {\n  const [autoMode, setAutoMode] = useState(true);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get case request details with client information\n  const { data: caseRequestDetails, isLoading: isLoadingDetails } = useQuery({\n    queryKey: [`/api/case-requests/${caseRequestId}/details`],\n    enabled: !!caseRequestId,\n  });\n\n  const form = useForm<CaseCreationForm>({\n    resolver: zodResolver(caseCreationSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      caseType: 'civil',\n      victimName: '',\n      victimPhone: '',\n      victimEmail: '',\n      accusedName: '',\n      accusedPhone: '',\n      accusedAddress: '',\n      city: '',\n      policeStationId: '',\n      pnr: '',\n      hearingDate: '',\n    },\n  });\n\n  // Auto-populate form when case request details are loaded\n  useEffect(() => {\n    if (caseRequestDetails && typeof caseRequestDetails === 'object') {\n      const client = (caseRequestDetails as any).clientDetails;\n      const request = caseRequestDetails as any;\n      form.reset({\n        title: request.title || '',\n        description: request.description || '',\n        caseType: request.caseType || 'civil',\n        victimName: request.victimName || request.victim?.name || client?.name || '',\n        victimPhone: request.victim?.phone || request.clientPhone || client?.phone || '',\n        victimEmail: request.victim?.email || request.clientEmail || client?.email || '',\n        accusedName: request.accusedName || request.accused?.name || '',\n        accusedPhone: request.accused?.phone || '',\n        accusedAddress: request.accused?.address || '',\n        city: client?.city || '',\n        policeStationId: request.availablePoliceStations?.[0]?._id || '',\n        pnr: generatePNR(),\n        hearingDate: '',\n      });\n    }\n  }, [caseRequestDetails, form]);\n\n  const createCaseMutation = useMutation({\n    mutationFn: async (data: CaseCreationForm) => {\n      const response = await apiRequest('POST', `/api/case-requests/${caseRequestId}/create-case`, data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'Case Created Successfully',\n        description: `Case \"${data.case.title}\" has been created with PNR: ${data.case.pnr}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/cases'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/case-requests'] });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create case',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const acceptRequestMutation = useMutation({\n    mutationFn: async ({ autoCreate = true }: { autoCreate?: boolean }) => {\n      const response = await apiRequest('PATCH', `/api/case-requests/${caseRequestId}`, {\n        status: 'accepted',\n        lawyerResponse: 'Case request accepted. Creating official case.',\n        autoCreateCase: autoCreate,\n        caseDetails: autoCreate ? form.getValues() : null,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.createdCase) {\n        toast({\n          title: 'Case Created Automatically',\n          description: `Case has been created and submitted for review.`,\n        });\n        queryClient.invalidateQueries({ queryKey: ['/api/cases'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/case-requests'] });\n        onSuccess();\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to accept request',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  function generatePNR(): string {\n    const year = new Date().getFullYear();\n    const random = Math.floor(Math.random() * 100000).toString().padStart(5, '0');\n    return `PNR${year}${random}`;\n  }\n\n  const handleAutoAccept = () => {\n    acceptRequestMutation.mutate({ autoCreate: true });\n  };\n\n  const handleManualSubmit = (data: CaseCreationForm) => {\n    createCaseMutation.mutate(data);\n  };\n\n  if (isLoadingDetails) {\n    return (\n      <Card className=\"w-full max-w-4xl mx-auto\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">Loading case request details...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!caseRequestDetails) {\n    return (\n      <Card className=\"w-full max-w-4xl mx-auto\">\n        <CardContent className=\"p-6\">\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>Case request not found.</AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const client = (caseRequestDetails as any)?.clientDetails;\n\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          Create Case from Request\n          <Badge variant=\"outline\">Request from {client?.name}</Badge>\n        </CardTitle>\n        <div className=\"flex items-center space-x-2\">\n          <Switch\n            id=\"auto-mode\"\n            checked={autoMode}\n            onCheckedChange={setAutoMode}\n          />\n          <Label htmlFor=\"auto-mode\">\n            {autoMode ? 'Automatic Mode' : 'Manual Mode'}\n          </Label>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Client Information Display */}\n        <Card className=\"bg-blue-50 border-blue-200\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg flex items-center gap-2\">\n              <User className=\"h-5 w-5\" />\n              Client Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <User className=\"h-4 w-4 text-gray-500\" />\n              <span><strong>Name:</strong> {client?.name || 'Not available'}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Phone className=\"h-4 w-4 text-gray-500\" />\n              <span><strong>Phone:</strong> {client?.phone || (caseRequestDetails as any)?.clientPhone || 'Not available'}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Mail className=\"h-4 w-4 text-gray-500\" />\n              <span><strong>Email:</strong> {client?.email || (caseRequestDetails as any)?.clientEmail || 'Not available'}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <MapPin className=\"h-4 w-4 text-gray-500\" />\n              <span><strong>City:</strong> {client?.city || 'Not available'}</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Original Request Summary */}\n        <Card className=\"bg-gray-50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg\">Original Request Details</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-sm\">\n            <div><strong>Title:</strong> {(caseRequestDetails as any)?.title || 'Loading...'}</div>\n            <div><strong>Description:</strong> {(caseRequestDetails as any)?.description || 'Loading...'}</div>\n            <div><strong>Victim:</strong> {(caseRequestDetails as any)?.victimName || (caseRequestDetails as any)?.victim?.name || client?.name || 'Not specified'}</div>\n            <div><strong>Accused:</strong> <span className=\"text-red-600 font-semibold\">{(caseRequestDetails as any)?.accusedName || (caseRequestDetails as any)?.accused?.name || 'Not specified'}</span></div>\n          </CardContent>\n        </Card>\n\n        {autoMode ? (\n          <div className=\"space-y-4\">\n            <Alert>\n              <CheckCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                In automatic mode, the case will be created with client details filled automatically. \n                You can review and accept the case request to proceed.\n              </AlertDescription>\n            </Alert>\n            <div className=\"flex gap-4\">\n              <Button \n                onClick={handleAutoAccept}\n                disabled={acceptRequestMutation.isPending}\n                className=\"flex-1\"\n              >\n                {acceptRequestMutation.isPending ? 'Creating Case...' : 'Accept & Create Case Automatically'}\n              </Button>\n              <Button variant=\"outline\" onClick={onCancel}>\n                Cancel\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleManualSubmit)} className=\"space-y-6\">\n              <Separator />\n              \n              {/* Case Details */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Case Title</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"caseType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Case Type</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"fraud\">Fraud</SelectItem>\n                          <SelectItem value=\"theft\">Theft</SelectItem>\n                          <SelectItem value=\"murder\">Murder</SelectItem>\n                          <SelectItem value=\"civil\">Civil</SelectItem>\n                          <SelectItem value=\"corporate\">Corporate</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Case Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} rows={3} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Victim Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Victim Information</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"victimName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Victim Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"victimPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Victim Phone</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"victimEmail\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Victim Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Accused Information */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Accused Information</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"accusedName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Accused Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"accusedPhone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Accused Phone</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"accusedAddress\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Accused Address</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Location and Legal Details */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"city\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>City</FormLabel>\n                      <FormControl>\n                        <Input {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"policeStationId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Police Station</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select police station\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {(caseRequestDetails as any)?.availablePoliceStations?.map((station: any) => (\n                            <SelectItem key={station._id} value={station._id}>\n                              {station.name} - {station.code}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"pnr\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>PNR Number</FormLabel>\n                      <div className=\"flex gap-2\">\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => form.setValue('pnr', generatePNR())}\n                        >\n                          Generate\n                        </Button>\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"hearingDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Hearing Date (Optional)</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex gap-4 pt-4\">\n                <Button \n                  type=\"submit\" \n                  disabled={createCaseMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {createCaseMutation.isPending ? 'Creating Case...' : 'Create Case'}\n                </Button>\n                <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </Form>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":20355},"client/src/components/CaseForm.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { X, Upload, Trash2 } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { InsertCase, PoliceStation } from \"@shared/schema\";\n\ninterface CaseFormProps {\n  onClose: () => void;\n}\n\nexport default function CaseForm({ onClose }: CaseFormProps) {\n  const [formData, setFormData] = useState<Partial<InsertCase>>({\n    title: \"\",\n    description: \"\",\n    caseType: \"fraud\",\n    victim: {\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n    },\n    accused: {\n      name: \"\",\n      phone: \"\",\n      address: \"\",\n    },\n    city: \"\",\n    policeStationId: \"\",\n    clientId: authService.getUser()?._id || \"\",\n  });\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const queryClient = useQueryClient();\n\n  const { data: policeStations = [] } = useQuery({\n    queryKey: ['/api/police-stations', formData.city],\n    enabled: !!formData.city,\n  });\n\n  const createCase = useMutation({\n    mutationFn: async (data: { caseData: Partial<InsertCase>; files: File[] }) => {\n      const formDataObj = new FormData();\n      \n      // Add case data\n      Object.entries(data.caseData).forEach(([key, value]) => {\n        if (value !== null && value !== undefined) {\n          if (typeof value === 'object') {\n            formDataObj.append(key, JSON.stringify(value));\n          } else {\n            formDataObj.append(key, value.toString());\n          }\n        }\n      });\n      \n      // Add files\n      data.files.forEach(file => {\n        formDataObj.append('documents', file);\n      });\n\n      const response = await fetch('/api/cases', {\n        method: 'POST',\n        headers: {\n          ...authService.getAuthHeaders(),\n        },\n        body: formDataObj,\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create case');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cases'] });\n      onClose();\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    if (field.includes('.')) {\n      const [parent, child] = field.split('.');\n      setFormData(prev => ({\n        ...prev,\n        [parent]: {\n          ...(prev[parent as keyof InsertCase] as any),\n          [child]: value,\n        },\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        [field]: value,\n      }));\n    }\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setSelectedFiles(Array.from(e.target.files));\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title || !formData.description || !formData.victim?.name || \n        !formData.accused?.name || !formData.policeStationId) {\n      alert('Please fill in all required fields');\n      return;\n    }\n\n    createCase.mutate({\n      caseData: formData,\n      files: selectedFiles,\n    });\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-2xl font-bold text-gray-900\">Create New Case</h3>\n        <Button variant=\"ghost\" onClick={onClose}>\n          <X className=\"h-5 w-5\" />\n        </Button>\n      </div>\n\n      {/* Basic Case Information */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div>\n          <Label htmlFor=\"title\">Case Title *</Label>\n          <Input\n            id=\"title\"\n            value={formData.title}\n            onChange={(e) => handleInputChange('title', e.target.value)}\n            placeholder=\"Enter case title\"\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"caseType\">Case Type *</Label>\n          <Select\n            value={formData.caseType}\n            onValueChange={(value) => handleInputChange('caseType', value)}\n          >\n            <SelectTrigger>\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"fraud\">Fraud</SelectItem>\n              <SelectItem value=\"theft\">Theft</SelectItem>\n              <SelectItem value=\"murder\">Murder</SelectItem>\n              <SelectItem value=\"civil\">Civil</SelectItem>\n              <SelectItem value=\"corporate\">Corporate</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      <div>\n        <Label htmlFor=\"description\">Case Description *</Label>\n        <Textarea\n          id=\"description\"\n          value={formData.description}\n          onChange={(e) => handleInputChange('description', e.target.value)}\n          placeholder=\"Describe the case details...\"\n          rows={4}\n          required\n        />\n      </div>\n\n      {/* Victim and Accused Details */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-gray-900\">Victim Details</h4>\n          <div>\n            <Label htmlFor=\"victimName\">Full Name *</Label>\n            <Input\n              id=\"victimName\"\n              value={formData.victim?.name}\n              onChange={(e) => handleInputChange('victim.name', e.target.value)}\n              placeholder=\"Enter victim's full name\"\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"victimPhone\">Contact Number *</Label>\n            <Input\n              id=\"victimPhone\"\n              value={formData.victim?.phone}\n              onChange={(e) => handleInputChange('victim.phone', e.target.value)}\n              placeholder=\"Enter contact number\"\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"victimEmail\">Email Address</Label>\n            <Input\n              id=\"victimEmail\"\n              type=\"email\"\n              value={formData.victim?.email}\n              onChange={(e) => handleInputChange('victim.email', e.target.value)}\n              placeholder=\"Enter email address\"\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-gray-900\">Accused Details</h4>\n          <div>\n            <Label htmlFor=\"accusedName\">Full Name *</Label>\n            <Input\n              id=\"accusedName\"\n              value={formData.accused?.name}\n              onChange={(e) => handleInputChange('accused.name', e.target.value)}\n              placeholder=\"Enter accused's full name\"\n              required\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"accusedPhone\">Contact Number</Label>\n            <Input\n              id=\"accusedPhone\"\n              value={formData.accused?.phone}\n              onChange={(e) => handleInputChange('accused.phone', e.target.value)}\n              placeholder=\"Enter contact number\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"accusedAddress\">Known Address</Label>\n            <Textarea\n              id=\"accusedAddress\"\n              value={formData.accused?.address}\n              onChange={(e) => handleInputChange('accused.address', e.target.value)}\n              placeholder=\"Enter known address\"\n              rows={2}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Location Details */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div>\n          <Label htmlFor=\"city\">City *</Label>\n          <Select\n            value={formData.city}\n            onValueChange={(value) => handleInputChange('city', value)}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select city\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"delhi\">Delhi</SelectItem>\n              <SelectItem value=\"mumbai\">Mumbai</SelectItem>\n              <SelectItem value=\"bangalore\">Bangalore</SelectItem>\n              <SelectItem value=\"chennai\">Chennai</SelectItem>\n              <SelectItem value=\"kolkata\">Kolkata</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label htmlFor=\"policeStation\">Police Station *</Label>\n          <Select\n            value={formData.policeStationId}\n            onValueChange={(value) => handleInputChange('policeStationId', value)}\n            disabled={!formData.city}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select police station\" />\n            </SelectTrigger>\n            <SelectContent>\n              {policeStations.map((station: PoliceStation) => (\n                <SelectItem key={station._id} value={station._id!}>\n                  {station.name} - {station.code}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Document Upload */}\n      <div>\n        <Label>Upload Documents</Label>\n        <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 hover:border-legal-blue transition-colors\">\n          <div className=\"text-center\">\n            <Upload className=\"mx-auto h-8 w-8 text-gray-400 mb-4\" />\n            <p className=\"text-lg font-medium text-gray-700 mb-2\">\n              Drop files here or click to upload\n            </p>\n            <p className=\"text-sm text-gray-500 mb-4\">\n              Support for PDF, DOC, DOCX, JPG, PNG files up to 10MB each\n            </p>\n            <input\n              type=\"file\"\n              multiple\n              accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n              id=\"document-upload\"\n            />\n            <Label\n              htmlFor=\"document-upload\"\n              className=\"bg-legal-blue text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors cursor-pointer inline-block\"\n            >\n              Choose Files\n            </Label>\n          </div>\n          \n          {selectedFiles.length > 0 && (\n            <div className=\"mt-4 space-y-2\">\n              {selectedFiles.map((file, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                >\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{file.name}</p>\n                    <p className=\"text-sm text-gray-500\">{formatFileSize(file.size)}</p>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => removeFile(index)}\n                    className=\"text-red-500 hover:text-red-700\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Form Actions */}\n      <div className=\"flex items-center justify-between pt-6 border-t border-gray-200\">\n        <Button type=\"button\" variant=\"outline\">\n          Save as Draft\n        </Button>\n        <div className=\"flex space-x-4\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={createCase.isPending}\n            className=\"bg-legal-blue hover:bg-blue-700 text-white\"\n          >\n            {createCase.isPending ? 'Creating...' : 'Create Case'}\n          </Button>\n        </div>\n      </div>\n    </form>\n  );\n}\n","size_bytes":12405},"client/src/components/ClientCaseForm.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport CloudinaryUpload from \"./CloudinaryUpload\";\nimport type { Lawyer } from \"@shared/schema\";\n\ninterface ClientCaseFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n  selectedLawyer?: Lawyer | null;\n}\n\nexport default function ClientCaseForm({ isOpen, onClose, selectedLawyer }: ClientCaseFormProps) {\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    caseType: '',\n    city: '',\n    victim: {\n      name: '',\n      phone: '',\n      email: '',\n    },\n    accused: {\n      name: '',\n      phone: '',\n      address: '',\n    },\n    documents: [] as string[],\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch police stations based on selected city\n  const { data: policeStations = [] } = useQuery({\n    queryKey: ['/api/police-stations', formData.city],\n    enabled: !!formData.city,\n  });\n\n  const createCase = useMutation({\n    mutationFn: async (data: any) => {\n      // Get the first police station for the selected city\n      const policeStation = policeStations.length > 0 ? policeStations[0] : null;\n      \n      // Add required fields that might be missing\n      const caseData = {\n        ...data,\n        status: 'submitted',\n        policeStationId: policeStation?._id || '68939cf0eb6ef63a16eb8420', // Use police station from city or fallback\n        victim: {\n          name: data.victim.name || 'Unknown',\n          phone: data.victim.phone || 'N/A',\n          email: data.victim.email || '',\n        },\n        accused: {\n          name: data.accused.name || 'Unknown',\n          phone: data.accused.phone || '',\n          address: data.accused.address || '',\n        },\n      };\n      \n      const formDataObj = new FormData();\n      Object.keys(caseData).forEach(key => {\n        if (key === 'victim' || key === 'accused') {\n          formDataObj.append(key, JSON.stringify(caseData[key]));\n        } else {\n          formDataObj.append(key, caseData[key]);\n        }\n      });\n      \n      const response = await apiRequest('POST', '/api/cases', formDataObj);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Case Created Successfully\",\n        description: \"Your legal case request has been submitted and is under review.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/cases'] });\n      onClose();\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create case\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: '',\n      description: '',\n      caseType: '',\n      city: '',\n      victim: {\n        name: '',\n        phone: '',\n        email: '',\n      },\n      accused: {\n        name: '',\n        phone: '',\n        address: '',\n      },\n      documents: [],\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title || !formData.description || !formData.caseType || !formData.city) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const submitData = {\n      ...formData,\n      lawyerId: selectedLawyer?._id || undefined,\n    };\n\n    createCase.mutate(submitData);\n  };\n\n  const handleDocumentUpload = (documentUrls: string[]) => {\n    setFormData(prev => ({ ...prev, documents: documentUrls }));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Request Legal Assistance</DialogTitle>\n          {selectedLawyer && (\n            <p className=\"text-sm text-gray-600\">\n              Requesting assistance from: <span className=\"font-medium\">{selectedLawyer.name}</span>\n            </p>\n          )}\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Basic Case Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Case Information</h3>\n            \n            <div>\n              <Label htmlFor=\"title\">Case Title *</Label>\n              <Input\n                id=\"title\"\n                value={formData.title}\n                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                placeholder=\"Brief description of your legal issue\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Detailed Description *</Label>\n              <Textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                placeholder=\"Provide detailed information about your legal case...\"\n                rows={4}\n                required\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"caseType\">Case Type *</Label>\n                <Select\n                  value={formData.caseType}\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, caseType: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select case type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"fraud\">Fraud</SelectItem>\n                    <SelectItem value=\"theft\">Theft</SelectItem>\n                    <SelectItem value=\"murder\">Murder</SelectItem>\n                    <SelectItem value=\"civil\">Civil</SelectItem>\n                    <SelectItem value=\"corporate\">Corporate</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"city\">City *</Label>\n                <Select\n                  value={formData.city}\n                  onValueChange={(value) => setFormData(prev => ({ ...prev, city: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select city\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Delhi\">Delhi</SelectItem>\n                    <SelectItem value=\"Mumbai\">Mumbai</SelectItem>\n                    <SelectItem value=\"Bangalore\">Bangalore</SelectItem>\n                    <SelectItem value=\"Chennai\">Chennai</SelectItem>\n                    <SelectItem value=\"Kolkata\">Kolkata</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Victim Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Victim Information</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"victimName\">Victim Name</Label>\n                <Input\n                  id=\"victimName\"\n                  value={formData.victim.name}\n                  onChange={(e) => setFormData(prev => ({ \n                    ...prev, \n                    victim: { ...prev.victim, name: e.target.value }\n                  }))}\n                  placeholder=\"Full name of victim\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"victimPhone\">Victim Phone</Label>\n                <Input\n                  id=\"victimPhone\"\n                  value={formData.victim.phone}\n                  onChange={(e) => setFormData(prev => ({ \n                    ...prev, \n                    victim: { ...prev.victim, phone: e.target.value }\n                  }))}\n                  placeholder=\"Phone number\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"victimEmail\">Victim Email</Label>\n              <Input\n                id=\"victimEmail\"\n                type=\"email\"\n                value={formData.victim.email}\n                onChange={(e) => setFormData(prev => ({ \n                  ...prev, \n                  victim: { ...prev.victim, email: e.target.value }\n                }))}\n                placeholder=\"Email address\"\n              />\n            </div>\n          </div>\n\n          {/* Accused Information */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Accused Information (if known)</h3>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"accusedName\">Accused Name</Label>\n                <Input\n                  id=\"accusedName\"\n                  value={formData.accused.name}\n                  onChange={(e) => setFormData(prev => ({ \n                    ...prev, \n                    accused: { ...prev.accused, name: e.target.value }\n                  }))}\n                  placeholder=\"Full name of accused\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"accusedPhone\">Accused Phone</Label>\n                <Input\n                  id=\"accusedPhone\"\n                  value={formData.accused.phone}\n                  onChange={(e) => setFormData(prev => ({ \n                    ...prev, \n                    accused: { ...prev.accused, phone: e.target.value }\n                  }))}\n                  placeholder=\"Phone number\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"accusedAddress\">Accused Address</Label>\n              <Textarea\n                id=\"accusedAddress\"\n                value={formData.accused.address}\n                onChange={(e) => setFormData(prev => ({ \n                  ...prev, \n                  accused: { ...prev.accused, address: e.target.value }\n                }))}\n                placeholder=\"Address information\"\n                rows={2}\n              />\n            </div>\n          </div>\n\n          {/* Document Upload */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Supporting Documents</h3>\n            <CloudinaryUpload\n              onUpload={handleDocumentUpload}\n              maxFiles={5}\n              label=\"Upload Evidence & Documents\"\n            />\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-3 pt-4 border-t\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={createCase.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={createCase.isPending}\n              className=\"bg-legal-blue hover:bg-blue-700\"\n            >\n              {createCase.isPending ? \"Submitting...\" : \"Submit Case\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11783},"client/src/components/CloudinaryUpload.tsx":{"content":"import { useState, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Upload, X, FileText, Image } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CloudinaryUploadProps {\n  onUpload: (files: string[]) => void;\n  maxFiles?: number;\n  acceptedTypes?: string[];\n  label?: string;\n}\n\ninterface UploadedFile {\n  url: string;\n  publicId: string;\n  name: string;\n  type: string;\n}\n\nexport default function CloudinaryUpload({ \n  onUpload, \n  maxFiles = 5, \n  acceptedTypes = ['image/*', '.pdf', '.doc', '.docx'],\n  label = 'Upload Documents'\n}: CloudinaryUploadProps) {\n  const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]);\n  const [uploading, setUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n\n  const uploadToCloudinary = async (file: File): Promise<UploadedFile> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('upload_preset', 'legal_docs'); // We'll create this preset\n    formData.append('folder', 'legal-cases');\n\n    const response = await fetch(\n      `https://api.cloudinary.com/v1_1/${process.env.REACT_APP_CLOUDINARY_CLOUD_NAME || 'your-cloud-name'}/upload`,\n      {\n        method: 'POST',\n        body: formData,\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error('Upload failed');\n    }\n\n    const data = await response.json();\n    return {\n      url: data.secure_url,\n      publicId: data.public_id,\n      name: file.name,\n      type: file.type,\n    };\n  };\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    \n    if (files.length === 0) return;\n    \n    if (uploadedFiles.length + files.length > maxFiles) {\n      toast({\n        title: 'Too many files',\n        description: `Maximum ${maxFiles} files allowed`,\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    setUploading(true);\n\n    try {\n      const uploadPromises = files.map(uploadToCloudinary);\n      const results = await Promise.all(uploadPromises);\n      \n      const newFiles = [...uploadedFiles, ...results];\n      setUploadedFiles(newFiles);\n      onUpload(newFiles.map(f => f.url));\n      \n      toast({\n        title: 'Upload successful',\n        description: `${files.length} file(s) uploaded successfully`,\n      });\n    } catch (error) {\n      toast({\n        title: 'Upload failed',\n        description: 'Failed to upload files. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setUploading(false);\n      if (fileInputRef.current) {\n        fileInputRef.current.value = '';\n      }\n    }\n  };\n\n  const removeFile = (index: number) => {\n    const newFiles = uploadedFiles.filter((_, i) => i !== index);\n    setUploadedFiles(newFiles);\n    onUpload(newFiles.map(f => f.url));\n  };\n\n  const getFileIcon = (type: string) => {\n    if (type.startsWith('image/')) {\n      return <Image className=\"h-4 w-4\" />;\n    }\n    return <FileText className=\"h-4 w-4\" />;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <Label>{label}</Label>\n      \n      <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n        <div className=\"space-y-2\">\n          <Upload className=\"h-8 w-8 mx-auto text-gray-400\" />\n          <div>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => fileInputRef.current?.click()}\n              disabled={uploading || uploadedFiles.length >= maxFiles}\n            >\n              {uploading ? 'Uploading...' : 'Choose Files'}\n            </Button>\n            <p className=\"text-sm text-gray-500 mt-2\">\n              Upload up to {maxFiles} files (PDF, DOC, DOCX, Images)\n            </p>\n          </div>\n        </div>\n        \n        <Input\n          ref={fileInputRef}\n          type=\"file\"\n          multiple\n          accept={acceptedTypes.join(',')}\n          onChange={handleFileSelect}\n          className=\"hidden\"\n        />\n      </div>\n\n      {uploadedFiles.length > 0 && (\n        <div className=\"space-y-2\">\n          <Label>Uploaded Files ({uploadedFiles.length}/{maxFiles})</Label>\n          <div className=\"space-y-2\">\n            {uploadedFiles.map((file, index) => (\n              <div\n                key={index}\n                className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  {getFileIcon(file.type)}\n                  <span className=\"text-sm font-medium text-gray-900\">\n                    {file.name}\n                  </span>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => removeFile(index)}\n                  className=\"text-red-500 hover:text-red-700\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":5242},"client/src/components/CompleteCase.tsx":{"content":"import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Upload } from 'lucide-react';\nimport type { CaseRequest } from '@shared/schema';\n\nconst completeCaseSchema = z.object({\n  pnr: z.string().min(1, 'PNR is required'),\n  policeStation: z.string().min(1, 'Police station is required'),\n  incidentDate: z.string().min(1, 'Incident date is required'),\n  incidentTime: z.string().min(1, 'Incident time is required'),\n  incidentLocation: z.string().min(1, 'Incident location is required'),\n  caseType: z.enum(['civil', 'criminal', 'family', 'property', 'corporate', 'labor', 'tax', 'immigration', 'personal_injury', 'fraud', 'theft', 'assault', 'other']),\n  urgency: z.enum(['low', 'medium', 'high', 'urgent']),\n  evidenceDescription: z.string().optional(),\n  witnessDetails: z.string().optional(),\n  additionalNotes: z.string().optional(),\n});\n\ntype CompleteCaseForm = z.infer<typeof completeCaseSchema>;\n\ninterface CompleteCaseProps {\n  caseRequest: any;\n  onSubmit: (data: CompleteCaseForm) => void;\n  onCancel: () => void;\n  isSubmitting?: boolean;\n}\n\nexport default function CompleteCase({ caseRequest, onSubmit, onCancel, isSubmitting = false }: CompleteCaseProps) {\n  const [documents, setDocuments] = useState<File[]>([]);\n\n  const form = useForm<CompleteCaseForm>({\n    resolver: zodResolver(completeCaseSchema),\n    defaultValues: {\n      pnr: '',\n      policeStation: '',\n      incidentDate: '',\n      incidentTime: '',\n      incidentLocation: '',\n      caseType: caseRequest.caseType || 'other',\n      urgency: 'medium',\n      evidenceDescription: '',\n      witnessDetails: '',\n      additionalNotes: caseRequest.description,\n    },\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setDocuments(prev => [...prev, ...files]);\n  };\n\n  const removeDocument = (index: number) => {\n    setDocuments(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleSubmit = (data: CompleteCaseForm) => {\n    onSubmit({\n      ...data,\n      documents: documents as any,\n    } as CompleteCaseForm);\n  };\n\n  // Generate PNR number\n  const generatePNR = () => {\n    const year = new Date().getFullYear();\n    const random = Math.floor(Math.random() * 100000).toString().padStart(5, '0');\n    const pnr = `PNR${year}${random}`;\n    form.setValue('pnr', pnr);\n  };\n\n  return (\n    <Card className=\"w-full max-w-4xl mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          Complete Case Details\n          <Badge variant=\"outline\">Case Request from {caseRequest.client?.name}</Badge>\n        </CardTitle>\n        <p className=\"text-sm text-gray-600\">\n          Fill in the complete case information to create the official case record.\n        </p>\n      </CardHeader>\n      <CardContent>\n        {/* Original Request Summary */}\n        <Card className=\"mb-6 bg-gray-50\">\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg\">Original Request</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2\">\n            <div><strong>Title:</strong> {caseRequest.title}</div>\n            <div><strong>Description:</strong> {caseRequest.description}</div>\n            <div><strong>Victim:</strong> {caseRequest.victimName}</div>\n            <div><strong>Accused:</strong> {caseRequest.accusedName}</div>\n            <div><strong>Client Contact:</strong> {caseRequest.clientPhone || 'N/A'} / {caseRequest.clientEmail || 'N/A'}</div>\n          </CardContent>\n        </Card>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit as any)} className=\"space-y-6\">\n            {/* PNR and Basic Info */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control as any}\n                name=\"pnr\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>PNR Number</FormLabel>\n                    <div className=\"flex gap-2\">\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-pnr\" />\n                      </FormControl>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={generatePNR}\n                        data-testid=\"button-generate-pnr\"\n                      >\n                        Generate\n                      </Button>\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control as any}\n                name=\"policeStation\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Police Station</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-police-station\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Incident Details */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control as any}\n                name=\"incidentDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Incident Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} data-testid=\"input-incident-date\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control as any}\n                name=\"incidentTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Incident Time</FormLabel>\n                    <FormControl>\n                      <Input type=\"time\" {...field} data-testid=\"input-incident-time\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control as any}\n              name=\"incidentLocation\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Incident Location</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-incident-location\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Case Type and Urgency */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control as any}\n                name=\"caseType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Case Type</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-case-type\">\n                          <SelectValue placeholder=\"Select case type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"civil\">Civil</SelectItem>\n                        <SelectItem value=\"criminal\">Criminal</SelectItem>\n                        <SelectItem value=\"family\">Family</SelectItem>\n                        <SelectItem value=\"property\">Property</SelectItem>\n                        <SelectItem value=\"corporate\">Corporate</SelectItem>\n                        <SelectItem value=\"labor\">Labor</SelectItem>\n                        <SelectItem value=\"tax\">Tax</SelectItem>\n                        <SelectItem value=\"immigration\">Immigration</SelectItem>\n                        <SelectItem value=\"personal_injury\">Personal Injury</SelectItem>\n                        <SelectItem value=\"fraud\">Fraud</SelectItem>\n                        <SelectItem value=\"theft\">Theft</SelectItem>\n                        <SelectItem value=\"assault\">Assault</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control as any}\n                name=\"urgency\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Case Urgency</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-urgency\">\n                          <SelectValue placeholder=\"Select urgency\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Additional Details */}\n            <FormField\n              control={form.control as any}\n              name=\"evidenceDescription\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Evidence Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Describe any evidence available for this case...\"\n                      data-testid=\"textarea-evidence\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control as any}\n              name=\"witnessDetails\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Witness Details</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"List any witnesses and their contact information...\"\n                      data-testid=\"textarea-witnesses\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control as any}\n              name=\"additionalNotes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Additional Notes</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Any additional information or notes...\"\n                      data-testid=\"textarea-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Document Upload */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Additional Documents\n              </label>\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4\">\n                <div className=\"text-center\">\n                  <Upload className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <div className=\"mt-2\">\n                    <label htmlFor=\"documents\" className=\"cursor-pointer\">\n                      <span className=\"text-legal-blue hover:underline\">Upload files</span>\n                      <input\n                        id=\"documents\"\n                        type=\"file\"\n                        multiple\n                        className=\"hidden\"\n                        onChange={handleFileChange}\n                        accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n                        data-testid=\"input-documents\"\n                      />\n                    </label>\n                  </div>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    PDF, DOC, DOCX, JPG, PNG up to 10MB each\n                  </p>\n                </div>\n              </div>\n              \n              {documents.length > 0 && (\n                <div className=\"mt-3 space-y-2\">\n                  {documents.map((file, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                      <span className=\"text-sm\">{file.name}</span>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => removeDocument(index)}\n                        data-testid={`button-remove-doc-${index}`}\n                      >\n                        Remove\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"flex-1\"\n                data-testid=\"button-create-case\"\n              >\n                {isSubmitting ? 'Creating Case...' : 'Create Official Case'}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onCancel}\n                data-testid=\"button-cancel-case\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":14845},"client/src/components/LawyerCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Star } from \"lucide-react\";\nimport type { Lawyer } from \"@shared/schema\";\n\ninterface LawyerCardProps {\n  lawyer: Lawyer;\n  onSelect: (lawyer: Lawyer) => void;\n}\n\nexport default function LawyerCard({ lawyer, onSelect }: LawyerCardProps) {\n  const winRate = lawyer.stats.totalCases > 0 \n    ? Math.round((lawyer.stats.wonCases / lawyer.stats.totalCases) * 100)\n    : 0;\n\n  return (\n    <Card className=\"group hover:shadow-lg transition-all duration-300 border-0 bg-gradient-to-r from-white to-gray-50 hover:from-blue-50 hover:to-indigo-50 rounded-2xl overflow-hidden h-[140px]\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"w-12 h-12 ring-2 ring-blue-100 group-hover:ring-blue-200 transition-all\">\n              <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-indigo-600 text-white font-bold text-sm\">\n                {lawyer.name.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <h3 className=\"font-bold text-base text-gray-900 group-hover:text-blue-900 transition-colors\">{lawyer.name}</h3>\n                {lawyer.rating > 4.0 && (\n                  <Badge className=\"bg-yellow-100 text-yellow-800 text-xs font-semibold border-0\">\n                    Top Rated\n                  </Badge>\n                )}\n              </div>\n              <p className=\"text-sm text-gray-600 font-medium mb-2\">\n                {lawyer.specialization.join(', ')} Law • {lawyer.city}\n              </p>\n              <div className=\"flex items-center space-x-3\">\n                <Badge className=\"bg-gradient-to-r from-emerald-500 to-green-600 text-white text-xs font-bold px-3 py-1\">\n                  {winRate}% Success\n                </Badge>\n                <span className=\"text-xs text-gray-500 font-medium\">\n                  {lawyer.experience} years exp.\n                </span>\n              </div>\n              {lawyer.rating > 0 && (\n                <div className=\"flex items-center mt-2\">\n                  <div className=\"flex items-center\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star\n                        key={i}\n                        className={`w-4 h-4 ${\n                          i < Math.floor(lawyer.rating)\n                            ? \"text-yellow-400 fill-current\"\n                            : \"text-gray-300\"\n                        }`}\n                      />\n                    ))}\n                  </div>\n                  <span className=\"text-sm font-semibold text-gray-700 ml-2\">\n                    {lawyer.rating.toFixed(1)}\n                  </span>\n                  <span className=\"text-xs text-gray-500 ml-1\">\n                    (127 reviews)\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n          <Button\n            onClick={() => onSelect(lawyer)}\n            className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white shadow-lg hover:shadow-xl transition-all duration-300 px-6 py-3 text-sm font-semibold rounded-xl\"\n          >\n            View Details\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3651},"client/src/components/LawyerProfileModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Star, MapPin, Calendar, Phone, Mail, Award, Briefcase } from \"lucide-react\";\nimport WinLossChart from \"./WinLossChart\";\nimport type { Lawyer } from \"@shared/schema\";\n\ninterface LawyerProfileModalProps {\n  lawyer: Lawyer | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onSelectLawyer?: (lawyer: Lawyer) => void;\n}\n\nexport default function LawyerProfileModal({ \n  lawyer, \n  isOpen, \n  onClose, \n  onSelectLawyer \n}: LawyerProfileModalProps) {\n  if (!lawyer) return null;\n\n  const handleSelectLawyer = () => {\n    onSelectLawyer?.(lawyer);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-gray-900\">\n            Lawyer Profile\n          </DialogTitle>\n        </DialogHeader>\n\n        <ScrollArea className=\"h-[75vh]\">\n        <div className=\"space-y-6 pr-4\">\n          {/* Header Section */}\n          <div className=\"flex flex-col md:flex-row gap-6\">\n            <div className=\"flex-shrink-0\">\n              <Avatar className=\"w-24 h-24\">\n                <AvatarFallback className=\"text-2xl bg-legal-blue text-white\">\n                  {lawyer.name.split(' ').map(n => n[0]).join('')}\n                </AvatarFallback>\n              </Avatar>\n            </div>\n            \n            <div className=\"flex-1\">\n              <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">{lawyer.name}</h3>\n              \n              <div className=\"flex items-center gap-4 mb-3\">\n                <div className=\"flex items-center\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star\n                      key={i}\n                      className={`h-4 w-4 ${\n                        i < Math.floor(lawyer.rating)\n                          ? 'text-yellow-400 fill-current'\n                          : 'text-gray-300'\n                      }`}\n                    />\n                  ))}\n                  <span className=\"ml-2 text-sm font-medium\">{lawyer.rating}</span>\n                </div>\n                <div className=\"flex items-center text-gray-600\">\n                  <MapPin className=\"h-4 w-4 mr-1\" />\n                  <span className=\"text-sm\">{lawyer.city}</span>\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                {lawyer.specialization.map((spec, index) => (\n                  <Badge key={index} variant=\"secondary\">\n                    {spec}\n                  </Badge>\n                ))}\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600\">\n                <div className=\"flex items-center\">\n                  <Briefcase className=\"h-4 w-4 mr-2\" />\n                  <span>{lawyer.experience} years experience</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Phone className=\"h-4 w-4 mr-2\" />\n                  <span>{lawyer.phone}</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Mail className=\"h-4 w-4 mr-2\" />\n                  <span>{lawyer.email}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Description */}\n          {lawyer.description && (\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-semibold text-gray-900 mb-2\">About</h4>\n              <p className=\"text-gray-700\">{lawyer.description}</p>\n            </div>\n          )}\n\n          {/* Statistics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"bg-white border rounded-lg p-4\">\n              <h4 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                <Award className=\"h-5 w-5 mr-2 text-legal-blue\" />\n                Case Statistics\n              </h4>\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\n                <div>\n                  <div className=\"text-2xl font-bold text-legal-blue\">\n                    {lawyer.stats.totalCases}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Total Cases</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {lawyer.stats.wonCases}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Won</div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {lawyer.stats.lostCases}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Lost</div>\n                </div>\n              </div>\n              <div className=\"mt-4 text-center\">\n                <div className=\"text-lg font-semibold\">\n                  Success Rate: {\n                    lawyer.stats.totalCases > 0 \n                      ? Math.round((lawyer.stats.wonCases / lawyer.stats.totalCases) * 100)\n                      : 0\n                  }%\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white border rounded-lg p-4\">\n              <h4 className=\"font-semibold text-gray-900 mb-4\">Win/Loss Chart</h4>\n              <WinLossChart \n                wonCases={lawyer.stats.wonCases}\n                lostCases={lawyer.stats.lostCases}\n              />\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-3 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Close\n            </Button>\n            {onSelectLawyer && (\n              <Button onClick={handleSelectLawyer} className=\"bg-legal-blue hover:bg-blue-700\">\n                Select This Lawyer\n              </Button>\n            )}\n          </div>\n        </div>\n        </ScrollArea>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6328},"client/src/components/Layout.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Scale, LayoutDashboard, FolderOpen, Users, Calendar, FileText, MessageSquare, Bell, Settings, LogOut } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport NotificationModal from \"./NotificationModal\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [location, navigate] = useLocation();\n  const [showNotifications, setShowNotifications] = useState(false);\n  const user = authService.getUser();\n\n  // Fetch notifications count\n  const { data: notifications = [] } = useQuery({\n    queryKey: ['/api/notifications'],\n    enabled: !!user,\n  });\n\n  const unreadCount = Array.isArray(notifications) ? notifications.filter((notif: any) => !notif.read).length : 0;\n\n  const handleLogout = () => {\n    authService.logout();\n    navigate(\"/login\");\n  };\n\n  const getSidebarItems = () => {\n    const baseItems = [\n      { path: \"/dashboard\", icon: LayoutDashboard, label: \"Dashboard\" },\n      { path: \"/cases\", icon: FolderOpen, label: \"Cases\" },\n      { path: \"/calendar\", icon: Calendar, label: \"Calendar\" },\n    ];\n\n    if (user?.role === 'client') {\n      return [\n        ...baseItems,\n        { path: \"/find-lawyers\", icon: Users, label: \"Find Lawyers\" },\n        { path: \"/documents\", icon: FileText, label: \"Documents\" },\n        { path: \"/messages\", icon: MessageSquare, label: \"Messages\" },\n      ];\n    } else if (user?.role === 'lawyer') {\n      return [\n        ...baseItems,\n        { path: \"/case-requests\", icon: Users, label: \"Case Requests\" },\n        { path: \"/documents\", icon: FileText, label: \"Documents\" },\n        { path: \"/messages\", icon: MessageSquare, label: \"Messages\" },\n      ];\n    } else if (user?.role === 'police') {\n      // Police officers only see Dashboard, Cases, and Calendar\n      return baseItems;\n    }\n\n    return baseItems;\n  };\n\n  const sidebarItems = getSidebarItems();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50\">\n      {/* Modern Sidebar */}\n      <aside className=\"fixed left-0 top-0 h-full w-72 bg-gradient-to-b from-slate-900 via-slate-800 to-slate-900 border-r border-slate-700 shadow-2xl z-50\">\n        {/* Logo Section */}\n        <div className=\"p-6 border-b border-slate-700\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-lg\">\n              <Scale className=\"text-white text-xl\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-white\">LegalCaseMS</h1>\n              <p className=\"text-xs text-slate-400\">Professional Legal Management</p>\n            </div>\n          </div>\n        </div>\n\n        {/* User Profile Section */}\n        <div className=\"p-4 border-b border-slate-700\">\n          <div className=\"flex items-center space-x-3 p-3 bg-slate-800/50 rounded-lg backdrop-blur-sm\">\n            <Avatar className=\"w-10 h-10 ring-2 ring-blue-500/30\">\n              <AvatarFallback className=\"bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-semibold\">\n                {user?.name?.charAt(0) || 'U'}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1 min-w-0\">\n              <p className=\"text-sm font-medium text-white truncate\">{user?.name}</p>\n              <p className=\"text-xs text-slate-400 capitalize\">{user?.role}</p>\n            </div>\n            <div className=\"relative\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowNotifications(true)}\n                className=\"relative text-slate-400 hover:text-white hover:bg-slate-700\"\n              >\n                <Bell className=\"h-4 w-4\" />\n                {unreadCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 h-4 w-4 flex items-center justify-center text-xs p-0 bg-red-500 animate-pulse\"\n                  >\n                    {unreadCount}\n                  </Badge>\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"p-4 space-y-2\">\n          {sidebarItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.path;\n            return (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={`flex items-center space-x-3 px-4 py-3 rounded-xl transition-all duration-200 group ${\n                  isActive \n                    ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white shadow-lg scale-105' \n                    : 'text-slate-300 hover:text-white hover:bg-slate-800/50 hover:scale-105'\n                }`}\n              >\n                <Icon className={`h-5 w-5 ${isActive ? 'text-white' : 'text-slate-400 group-hover:text-white'}`} />\n                <span className=\"font-medium\">{item.label}</span>\n                {isActive && (\n                  <div className=\"ml-auto w-2 h-2 bg-white rounded-full animate-pulse\" />\n                )}\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Bottom Section - Settings and Logout */}\n        <div className=\"absolute bottom-4 left-0 right-0 p-6 space-y-2\">\n          <Link href=\"/settings\">\n            <Button \n              variant=\"ghost\" \n              className={`w-full justify-start ${\n                location === '/settings' \n                  ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white shadow-lg' \n                  : 'text-slate-300 hover:text-white hover:bg-slate-800/50'\n              }`}\n            >\n              <Settings className=\"mr-3 h-4 w-4\" />\n              Settings\n            </Button>\n          </Link>\n          \n          <Button \n            variant=\"ghost\" \n            className=\"w-full justify-start text-red-400 hover:text-red-300 hover:bg-red-900/20\"\n            onClick={handleLogout}\n          >\n            <LogOut className=\"mr-3 h-4 w-4\" />\n            Logout\n          </Button>\n        </div>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"ml-72 min-h-screen\">\n        <div className=\"p-6\">\n          {children}\n        </div>\n      </main>\n\n      {/* Notifications Modal */}\n      <NotificationModal \n        isOpen={showNotifications} \n        onClose={() => setShowNotifications(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":6941},"client/src/components/MessageThread.tsx":{"content":"import { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { format } from \"date-fns\";\nimport type { Message } from \"@shared/schema\";\n\ninterface MessageThreadProps {\n  messages: Message[];\n  currentUserId: string;\n}\n\nexport default function MessageThread({ messages, currentUserId }: MessageThreadProps) {\n  const sortedMessages = messages.sort((a, b) => {\n    const aTime = a.timestamp ? new Date(a.timestamp).getTime() : 0;\n    const bTime = b.timestamp ? new Date(b.timestamp).getTime() : 0;\n    return aTime - bTime;\n  });\n\n  if (messages.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center h-full text-gray-500\">\n        <p>No messages yet. Start the conversation!</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {sortedMessages.map((message, index) => {\n        const isOwnMessage = message.senderId === currentUserId;\n        const showTimestamp = index === 0 || \n          (message.timestamp && sortedMessages[index - 1].timestamp &&\n           new Date(message.timestamp).getTime() - new Date(sortedMessages[index - 1].timestamp!).getTime() > 300000); // 5 minutes\n\n        return (\n          <div key={message._id} className=\"space-y-2\">\n            {showTimestamp && (\n              <div className=\"text-center\">\n                <span className=\"text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded\">\n                  {message.timestamp ? format(new Date(message.timestamp), 'MMM d, yyyy h:mm a') : 'Now'}\n                </span>\n              </div>\n            )}\n            \n            <div className={`flex items-start space-x-3 ${isOwnMessage ? 'justify-end' : ''}`}>\n              {!isOwnMessage && (\n                <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                  <AvatarFallback className=\"text-xs\">\n                    {message.senderId.substring(0, 2).toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n              )}\n              \n              <div className={`flex-1 min-w-0 ${isOwnMessage ? 'text-right' : ''}`}>\n                <div\n                  className={`inline-block px-4 py-3 rounded-lg max-w-xs lg:max-w-md ${\n                    isOwnMessage\n                      ? 'bg-legal-blue text-white rounded-br-sm'\n                      : 'bg-gray-100 text-gray-900 rounded-bl-sm'\n                  }`}\n                >\n                  <p className=\"text-sm break-words\">{message.content}</p>\n                </div>\n                <div className={`mt-1 text-xs text-gray-500 ${isOwnMessage ? 'text-right' : ''}`}>\n                  {message.timestamp ? format(new Date(message.timestamp), 'h:mm a') : 'Now'}\n                  {!message.read && !isOwnMessage && (\n                    <span className=\"ml-2 inline-block w-2 h-2 bg-blue-500 rounded-full\"></span>\n                  )}\n                </div>\n              </div>\n\n              {isOwnMessage && (\n                <Avatar className=\"w-8 h-8 flex-shrink-0\">\n                  <AvatarFallback className=\"text-xs bg-legal-blue text-white\">\n                    You\n                  </AvatarFallback>\n                </Avatar>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3229},"client/src/components/ModernLayout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { \n  Scale, \n  LayoutDashboard, \n  FolderOpen, \n  Users, \n  Calendar, \n  FileText, \n  MessageSquare, \n  Bell, \n  ChevronDown, \n  Settings,\n  LogOut,\n  Menu,\n  X,\n  Home\n} from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport NotificationModal from \"./NotificationModal\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function ModernLayout({ children }: LayoutProps) {\n  const [location, navigate] = useLocation();\n  const [showNotifications, setShowNotifications] = useState(false);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const user = authService.getUser();\n  const isMobile = useIsMobile();\n\n  // Fetch notifications count\n  const { data: notifications = [] } = useQuery({\n    queryKey: ['/api/notifications'],\n    enabled: !!user,\n  });\n\n  const unreadCount = Array.isArray(notifications) ? notifications.filter((notif: any) => !notif.read).length : 0;\n\n  const handleLogout = () => {\n    authService.logout();\n    navigate(\"/login\");\n  };\n\n  const getSidebarItems = () => {\n    const baseItems = [\n      { path: \"/dashboard\", icon: LayoutDashboard, label: \"Dashboard\", color: \"text-blue-600\" },\n      { path: \"/cases\", icon: FolderOpen, label: \"Cases\", color: \"text-green-600\" },\n      { path: \"/calendar\", icon: Calendar, label: \"Calendar\", color: \"text-purple-600\" },\n    ];\n\n    if (user?.role === 'client') {\n      return [\n        ...baseItems,\n        { path: \"/find-lawyers\", icon: Users, label: \"Find Lawyers\", color: \"text-orange-600\" },\n        { path: \"/documents\", icon: FileText, label: \"Documents\", color: \"text-indigo-600\" },\n        { path: \"/messages\", icon: MessageSquare, label: \"Messages\", color: \"text-pink-600\" },\n      ];\n    } else if (user?.role === 'lawyer') {\n      return [\n        ...baseItems,\n        { path: \"/case-requests\", icon: Users, label: \"Case Requests\", color: \"text-orange-600\" },\n        { path: \"/documents\", icon: FileText, label: \"Documents\", color: \"text-indigo-600\" },\n        { path: \"/messages\", icon: MessageSquare, label: \"Messages\", color: \"text-pink-600\" },\n      ];\n    } else if (user?.role === 'police') {\n      return baseItems;\n    }\n\n    return baseItems;\n  };\n\n  const sidebarItems = getSidebarItems();\n\n  const roleColors = {\n    client: \"bg-blue-500\",\n    lawyer: \"bg-green-500\", \n    police: \"bg-purple-500\"\n  };\n\n  const roleColor = roleColors[user?.role as keyof typeof roleColors] || \"bg-gray-500\";\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile Header */}\n      {isMobile && (\n        <header className=\"bg-white border-b border-gray-200 shadow-sm sticky top-0 z-50 lg:hidden\">\n          <div className=\"flex justify-between items-center h-16 px-4\">\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setSidebarOpen(!sidebarOpen)}\n              >\n                {sidebarOpen ? <X size={20} /> : <Menu size={20} />}\n              </Button>\n              <Scale className=\"text-blue-600 text-xl\" />\n              <span className=\"text-lg font-bold text-gray-900\">LegalCaseMS</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowNotifications(true)}\n                className=\"relative\"\n              >\n                <Bell size={18} />\n                {unreadCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 h-4 w-4 flex items-center justify-center text-xs p-0\"\n                  >\n                    {unreadCount}\n                  </Badge>\n                )}\n              </Button>\n              \n\n            </div>\n          </div>\n        </header>\n      )}\n\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <aside className={`\n          ${isMobile ? 'fixed inset-y-0 left-0 z-40 transform transition-transform duration-300' : 'relative'}\n          ${isMobile && !sidebarOpen ? '-translate-x-full' : 'translate-x-0'}\n          w-72 bg-white border-r border-gray-200 shadow-lg\n        `}>\n          {/* Desktop Header */}\n          {!isMobile && (\n            <div className=\"h-16 border-b border-gray-200 flex items-center justify-between px-6\">\n              <div className=\"flex items-center space-x-3\">\n                <Scale className=\"text-blue-600 text-2xl\" />\n                <div>\n                  <h1 className=\"text-xl font-bold text-gray-900\">LegalCaseMS</h1>\n                  <p className=\"text-xs text-gray-500 capitalize\">{user?.role} Portal</p>\n                </div>\n              </div>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowNotifications(true)}\n                className=\"relative\"\n              >\n                <Bell size={18} />\n                {unreadCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 h-4 w-4 flex items-center justify-center text-xs p-0\"\n                  >\n                    {unreadCount}\n                  </Badge>\n                )}\n              </Button>\n            </div>\n          )}\n\n          {/* User Info Card */}\n          <div className=\"p-4 border-b border-gray-100\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar className=\"w-10 h-10\">\n                <AvatarFallback className={`${roleColor} text-white text-sm font-semibold`}>\n                  {user?.name?.charAt(0) || 'U'}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <h3 className=\"font-medium text-gray-900 text-sm\">{user?.name}</h3>\n                <p className=\"text-xs text-gray-500 capitalize\">{user?.role}</p>\n                {user?.city && (\n                  <p className=\"text-xs text-gray-400\">{user.city}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <div className=\"flex-1 px-3 py-4\">\n            <ScrollArea className=\"h-full\">\n              <nav className=\"space-y-1\">\n                {sidebarItems.map((item) => {\n                  const Icon = item.icon;\n                  const isActive = location === item.path;\n                  \n                  return (\n                    <Link key={item.path} href={item.path}>\n                      <Button\n                        variant={isActive ? \"default\" : \"ghost\"}\n                        className={`w-full justify-start h-10 text-sm ${\n                          isActive \n                            ? \"bg-blue-600 text-white shadow-md\" \n                            : \"text-gray-700 hover:bg-gray-100 hover:text-gray-900\"\n                        }`}\n                        onClick={() => isMobile && setSidebarOpen(false)}\n                      >\n                        <Icon className={`mr-3 h-4 w-4 ${isActive ? 'text-white' : item.color}`} />\n                        <span className=\"font-medium\">{item.label}</span>\n                      </Button>\n                    </Link>\n                  );\n                })}\n              </nav>\n            </ScrollArea>\n          </div>\n          \n          {/* Bottom Section - Settings and Logout */}\n          <div className=\"mt-auto p-4 border-t border-gray-200\">\n            <div className=\"space-y-2\">\n              <Link href=\"/settings\">\n                <Button\n                  variant={location === '/settings' ? \"default\" : \"ghost\"}\n                  className={`w-full justify-start h-10 text-sm ${\n                    location === '/settings'\n                      ? \"bg-blue-600 text-white shadow-md\" \n                      : \"text-gray-700 hover:bg-gray-100 hover:text-gray-900\"\n                  }`}\n                  onClick={() => isMobile && setSidebarOpen(false)}\n                >\n                  <Settings className={`mr-3 h-4 w-4 ${location === '/settings' ? 'text-white' : 'text-gray-600'}`} />\n                  <span className=\"font-medium\">Settings</span>\n                </Button>\n              </Link>\n              \n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start h-10 text-sm text-red-600 hover:bg-red-50 hover:text-red-700\"\n                onClick={handleLogout}\n              >\n                <LogOut className=\"mr-3 h-4 w-4\" />\n                <span className=\"font-medium\">Logout</span>\n              </Button>\n            </div>\n          </div>\n        </aside>\n\n        {/* Mobile Overlay */}\n        {isMobile && sidebarOpen && (\n          <div \n            className=\"fixed inset-0 bg-black bg-opacity-50 z-30\"\n            onClick={() => setSidebarOpen(false)}\n          />\n        )}\n\n        {/* Main Content */}\n        <main className=\"flex-1 min-h-screen\">\n          <div className=\"h-full\">\n            <ScrollArea className=\"h-screen\">\n              <div className=\"p-6\">\n                {children}\n              </div>\n            </ScrollArea>\n          </div>\n        </main>\n      </div>\n\n      {/* Notification Modal */}\n      <NotificationModal \n        isOpen={showNotifications} \n        onClose={() => setShowNotifications(false)} \n      />\n    </div>\n  );\n}","size_bytes":10021},"client/src/components/NotificationModal.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Gavel, Calendar, MessageSquare, X } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { Notification } from \"@shared/schema\";\n\ninterface NotificationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function NotificationModal({ isOpen, onClose }: NotificationModalProps) {\n  const queryClient = useQueryClient();\n\n  const { data: notifications = [], isLoading } = useQuery({\n    queryKey: ['/api/notifications'],\n    enabled: isOpen && authService.isAuthenticated(),\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('PATCH', `/api/notifications/${id}/read`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      // First mark all unread notifications as read\n      const unreadNotifications = (notifications as Notification[]).filter((n: Notification) => !n.read);\n      await Promise.all(\n        unreadNotifications.map((n: Notification) =>\n          apiRequest('PATCH', `/api/notifications/${n._id}/read`, {})\n        )\n      );\n      // Then delete all read notifications\n      return apiRequest('DELETE', `/api/notifications/read/all`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n    },\n  });\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'case_approved':\n      case 'case_rejected':\n        return <Gavel className=\"text-legal-blue\" />;\n      case 'hearing_scheduled':\n        return <Calendar className=\"text-legal-emerald\" />;\n      case 'new_message':\n        return <MessageSquare className=\"text-yellow-600\" />;\n      default:\n        return <Gavel className=\"text-legal-blue\" />;\n    }\n  };\n\n  const getNotificationBg = (type: string) => {\n    switch (type) {\n      case 'case_approved':\n        return 'bg-green-50 border-green-200';\n      case 'case_rejected':\n        return 'bg-red-50 border-red-200';\n      case 'hearing_scheduled':\n        return 'bg-blue-50 border-blue-200';\n      case 'new_message':\n        return 'bg-yellow-50 border-yellow-200';\n      default:\n        return 'bg-blue-50 border-blue-200';\n    }\n  };\n\n  const handleMarkAsRead = (id: string) => {\n    markAsReadMutation.mutate(id);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md w-full\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Notifications\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"text-center py-4\">Loading notifications...</div>\n          ) : (notifications as Notification[]).length === 0 ? (\n            <div className=\"text-center py-4 text-gray-500\">\n              No notifications\n            </div>\n          ) : (\n            (notifications as Notification[]).map((notification: Notification) => (\n              <div\n                key={notification._id}\n                className={`p-4 border rounded-lg ${getNotificationBg(notification.type)}`}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    {getNotificationIcon(notification.type)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        {notification.title}\n                      </p>\n                      {!notification.read && (\n                        <Badge variant=\"destructive\" className=\"h-2 w-2 p-0\" />\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-2\">\n                      {notification.message}\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <p className=\"text-xs text-gray-500\">\n                        {notification.createdAt && \n                          format(new Date(notification.createdAt), 'MMM d, yyyy h:mm a')\n                        }\n                      </p>\n                      {!notification.read && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleMarkAsRead(notification._id!)}\n                          className=\"text-xs\"\n                        >\n                          Mark as read\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n\n        <div className=\"pt-4 border-t border-gray-200\">\n          <Button\n            variant=\"outline\"\n            className=\"w-full text-center text-sm text-legal-blue hover:text-blue-700 font-medium\"\n            onClick={() => markAllAsReadMutation.mutate()}\n            disabled={markAllAsReadMutation.isPending}\n          >\n            {markAllAsReadMutation.isPending ? 'Processing...' : 'Mark all as read'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5913},"client/src/components/SimpleCaseForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Upload } from \"lucide-react\";\n\nconst simpleCaseRequestSchema = z.object({\n  title: z.string().min(1, 'Case title is required'),\n  description: z.string().min(10, 'Please provide a brief description'),\n  victimName: z.string().min(1, 'Victim name is required'),\n  accusedName: z.string().min(1, 'Accused name is required'),\n  clientPhone: z.string().min(10, 'Valid phone number required'),\n  clientEmail: z.string().email('Valid email required').optional().or(z.literal('')),\n});\n\ntype SimpleCaseRequestData = z.infer<typeof simpleCaseRequestSchema>;\n\ninterface SimpleCaseFormProps {\n  lawyerName: string;\n  onSubmit: (data: SimpleCaseRequestData & { lawyerId: string }) => void;\n  onCancel: () => void;\n  lawyerId: string;\n  isSubmitting?: boolean;\n}\n\nexport default function SimpleCaseForm({ \n  lawyerName, \n  onSubmit, \n  onCancel, \n  lawyerId,\n  isSubmitting = false \n}: SimpleCaseFormProps) {\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n\n  const form = useForm<SimpleCaseRequestData>({\n    resolver: zodResolver(simpleCaseRequestSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      victimName: '',\n      accusedName: '',\n      clientPhone: '',\n      clientEmail: '',\n    },\n  });\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (files) {\n      setUploadedFiles(prev => [...prev, ...Array.from(files)]);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setUploadedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleSubmit = (data: SimpleCaseRequestData) => {\n    onSubmit({\n      ...data,\n      lawyerId,\n    });\n  };\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"mb-4\">\n        <h3 className=\"text-lg font-semibold\">Send Case Request to {lawyerName}</h3>\n        <p className=\"text-sm text-gray-600\">\n          Provide basic case information. The lawyer will help complete the detailed form later.\n        </p>\n      </div>\n      <div>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n          {/* Case Title */}\n          <div>\n            <Label htmlFor=\"title\">Case Title</Label>\n            <Input\n              id=\"title\"\n              {...form.register('title')}\n              placeholder=\"Brief title for your case\"\n              data-testid=\"input-case-title\"\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-red-600 mt-1\">\n                {form.formState.errors.title.message}\n              </p>\n            )}\n          </div>\n\n          {/* Description */}\n          <div>\n            <Label htmlFor=\"description\">Brief Description</Label>\n            <Textarea\n              id=\"description\"\n              {...form.register('description')}\n              placeholder=\"Provide a brief description of your case...\"\n              className=\"min-h-[100px]\"\n              data-testid=\"textarea-description\"\n            />\n            {form.formState.errors.description && (\n              <p className=\"text-sm text-red-600 mt-1\">\n                {form.formState.errors.description.message}\n              </p>\n            )}\n          </div>\n\n          {/* Victim Name */}\n          <div>\n            <Label htmlFor=\"victimName\">Victim Name</Label>\n            <Input\n              id=\"victimName\"\n              {...form.register('victimName')}\n              placeholder=\"Name of the victim\"\n              data-testid=\"input-victim-name\"\n            />\n            {form.formState.errors.victimName && (\n              <p className=\"text-sm text-red-600 mt-1\">\n                {form.formState.errors.victimName.message}\n              </p>\n            )}\n          </div>\n\n          {/* Accused Name */}\n          <div>\n            <Label htmlFor=\"accusedName\">Accused Name</Label>\n            <Input\n              id=\"accusedName\"\n              {...form.register('accusedName')}\n              placeholder=\"Name of the accused\"\n              data-testid=\"input-accused-name\"\n            />\n            {form.formState.errors.accusedName && (\n              <p className=\"text-sm text-red-600 mt-1\">\n                {form.formState.errors.accusedName.message}\n              </p>\n            )}\n          </div>\n\n          {/* Client Contact Information */}\n          <div>\n            <Label htmlFor=\"clientPhone\">Your Phone Number</Label>\n            <Input\n              id=\"clientPhone\"\n              {...form.register('clientPhone')}\n              placeholder=\"Your contact number\"\n              data-testid=\"input-client-phone\"\n            />\n            {form.formState.errors.clientPhone && (\n              <p className=\"text-sm text-red-600 mt-1\">\n                {form.formState.errors.clientPhone.message}\n              </p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"clientEmail\">Your Email (Optional)</Label>\n            <Input\n              id=\"clientEmail\"\n              type=\"email\"\n              {...form.register('clientEmail')}\n              placeholder=\"your.email@example.com\"\n              data-testid=\"input-client-email\"\n            />\n            {form.formState.errors.clientEmail && (\n              <p className=\"text-sm text-red-600 mt-1\">\n                {form.formState.errors.clientEmail.message}\n              </p>\n            )}\n          </div>\n\n          {/* Document Upload */}\n          <div>\n            <Label htmlFor=\"documents\">Upload Documents (Optional)</Label>\n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4\">\n              <input\n                id=\"documents\"\n                type=\"file\"\n                multiple\n                onChange={handleFileUpload}\n                className=\"hidden\"\n                accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n                data-testid=\"input-documents\"\n              />\n              <label\n                htmlFor=\"documents\"\n                className=\"cursor-pointer flex flex-col items-center justify-center text-gray-600 hover:text-gray-800\"\n              >\n                <Upload className=\"h-8 w-8 mb-2\" />\n                <span className=\"text-sm\">Click to upload documents</span>\n                <span className=\"text-xs text-gray-500\">PDF, DOC, JPG, PNG files supported</span>\n              </label>\n            </div>\n\n            {/* Uploaded Files List */}\n            {uploadedFiles.length > 0 && (\n              <div className=\"mt-3 space-y-2\">\n                <p className=\"text-sm font-medium\">Uploaded Files:</p>\n                {uploadedFiles.map((file, index) => (\n                  <div key={index} className=\"flex items-center justify-between bg-gray-50 p-2 rounded\">\n                    <span className=\"text-sm truncate\">{file.name}</span>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeFile(index)}\n                      className=\"text-red-600 hover:text-red-800\"\n                      data-testid={`button-remove-file-${index}`}\n                    >\n                      Remove\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 pt-4\">\n            <Button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"flex-1\"\n              data-testid=\"button-send-request\"\n            >\n              {isSubmitting ? 'Sending...' : 'Send Case Request'}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onCancel}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}","size_bytes":8342},"client/src/components/StatsCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  description?: string;\n  trend?: string;\n  bgColor?: string;\n  iconColor?: string;\n}\n\nexport default function StatsCard({\n  title,\n  value,\n  icon: Icon,\n  description,\n  trend,\n  bgColor = \"bg-legal-blue bg-opacity-10\",\n  iconColor = \"text-legal-blue\"\n}: StatsCardProps) {\n  return (\n    <Card className=\"shadow-sm border border-gray-200\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n            <p className=\"text-3xl font-bold text-gray-900\">{value}</p>\n          </div>\n          <div className={`p-3 ${bgColor} rounded-lg`}>\n            <Icon className={`${iconColor} text-xl`} />\n          </div>\n        </div>\n        {(description || trend) && (\n          <div className=\"mt-4 flex items-center text-sm\">\n            {trend && <span className=\"text-green-600 font-medium\">{trend}</span>}\n            {description && (\n              <span className={`text-gray-600 ${trend ? \"ml-1\" : \"\"}`}>{description}</span>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1336},"client/src/components/WinLossChart.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { Chart, registerables } from 'chart.js';\n\nChart.register(...registerables);\n\ninterface WinLossChartProps {\n  wonCases: number;\n  lostCases: number;\n}\n\nexport default function WinLossChart({ wonCases, lostCases }: WinLossChartProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<Chart | null>(null);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Destroy existing chart\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    const ctx = canvasRef.current.getContext('2d');\n    if (!ctx) return;\n\n    chartRef.current = new Chart(ctx, {\n      type: 'doughnut',\n      data: {\n        labels: ['Won', 'Lost'],\n        datasets: [{\n          data: [wonCases, lostCases],\n          backgroundColor: ['#059669', '#EF4444'],\n          borderWidth: 0\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            position: 'bottom'\n          }\n        }\n      }\n    });\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.destroy();\n      }\n    };\n  }, [wonCases, lostCases]);\n\n  return (\n    <div className=\"h-48 flex items-center justify-center\">\n      <canvas ref={canvasRef} className=\"max-w-full max-h-full\" />\n    </div>\n  );\n}\n","size_bytes":1358},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { type User, type AuthResponse, type LoginData } from \"@shared/schema\";\n\nconst TOKEN_KEY = 'legal_cms_token';\nconst USER_KEY = 'legal_cms_user';\n\nexport const authService = {\n  getToken(): string | null {\n    return localStorage.getItem(TOKEN_KEY);\n  },\n\n  setToken(token: string): void {\n    localStorage.setItem(TOKEN_KEY, token);\n  },\n\n  removeToken(): void {\n    localStorage.removeItem(TOKEN_KEY);\n  },\n\n  getUser(): User | null {\n    const userStr = localStorage.getItem(USER_KEY);\n    return userStr ? JSON.parse(userStr) : null;\n  },\n\n  setUser(user: User): void {\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  },\n\n  removeUser(): void {\n    localStorage.removeItem(USER_KEY);\n  },\n\n  logout(): void {\n    this.removeToken();\n    this.removeUser();\n  },\n\n  isAuthenticated(): boolean {\n    return !!this.getToken() && !!this.getUser();\n  },\n\n  getAuthHeaders(): Record<string, string> {\n    const token = this.getToken();\n    return token ? { Authorization: `Bearer ${token}` } : {};\n  }\n};\n","size_bytes":1020},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { authService } from \"./auth\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = {\n    ...authService.getAuthHeaders(),\n  };\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  if (res.status === 401) {\n    authService.logout();\n    window.location.reload();\n    throw new Error('Unauthorized');\n  }\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: {\n        ...authService.getAuthHeaders(),\n      },\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      authService.logout();\n      window.location.reload();\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1780},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/calendar.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport CalendarComponent from \"@/components/CalendarComponent\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, MapPin } from \"lucide-react\";\nimport { format, isToday, isTomorrow, addDays } from \"date-fns\";\nimport type { Case } from \"@shared/schema\";\n\nexport default function CalendarPage() {\n  const { data: cases = [], isLoading } = useQuery<Case[]>({\n    queryKey: ['/api/cases'],\n  });\n\n  const upcomingHearings = cases\n    .filter((case_: Case) => case_.hearingDate && new Date(case_.hearingDate) > new Date())\n    .sort((a: Case, b: Case) => \n      new Date(a.hearingDate!).getTime() - new Date(b.hearingDate!).getTime()\n    )\n    .slice(0, 5);\n\n  const todaysHearings = cases.filter((case_: Case) => \n    case_.hearingDate && isToday(new Date(case_.hearingDate))\n  );\n\n  const getHearingPriority = (hearingDate: Date) => {\n    if (isToday(hearingDate)) return { label: \"Today\", color: \"bg-red-100 text-red-800\" };\n    if (isTomorrow(hearingDate)) return { label: \"Tomorrow\", color: \"bg-orange-100 text-orange-800\" };\n    if (hearingDate < addDays(new Date(), 7)) return { label: \"This Week\", color: \"bg-yellow-100 text-yellow-800\" };\n    return { label: \"Upcoming\", color: \"bg-blue-100 text-blue-800\" };\n  };\n\n  if (isLoading) {\n    return <div className=\"p-6\">Loading calendar...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Modern Header */}\n      <div className=\"bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 text-white rounded-xl p-6 shadow-2xl\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-3 bg-white/20 rounded-lg backdrop-blur-sm\">\n            <Calendar className=\"w-8 h-8 text-white\" />\n          </div>\n          <div>\n            <h2 className=\"text-3xl font-bold mb-1\">Legal Calendar</h2>\n            <p className=\"text-blue-100 text-lg\">Manage your hearing dates and case schedules</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6 mb-8\">\n        {/* Today's Hearings */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg flex items-center space-x-2\">\n              <Calendar className=\"h-5 w-5 text-legal-blue\" />\n              <span>Today's Hearings</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {todaysHearings.length === 0 ? (\n              <p className=\"text-sm text-gray-500\">No hearings today</p>\n            ) : (\n              <div className=\"space-y-2\">\n                {todaysHearings.map((case_: Case) => (\n                  <div key={case_._id} className=\"p-2 bg-red-50 rounded-lg\">\n                    <p className=\"font-medium text-sm text-gray-900\">{case_.title}</p>\n                    <p className=\"text-xs text-gray-600\">\n                      {format(new Date(case_.hearingDate!), 'h:mm a')}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Quick Stats */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg flex items-center space-x-2\">\n              <Clock className=\"h-5 w-5 text-legal-emerald\" />\n              <span>Upcoming</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-legal-emerald\">\n                {upcomingHearings.length}\n              </p>\n              <p className=\"text-sm text-gray-600\">hearings scheduled</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg flex items-center space-x-2\">\n              <MapPin className=\"h-5 w-5 text-legal-slate\" />\n              <span>This Month</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              <p className=\"text-2xl font-bold text-legal-slate\">\n                {cases.filter((case_: Case) => {\n                  if (!case_.hearingDate) return false;\n                  const hearingDate = new Date(case_.hearingDate);\n                  const now = new Date();\n                  return hearingDate.getMonth() === now.getMonth() && \n                         hearingDate.getFullYear() === now.getFullYear();\n                }).length}\n              </p>\n              <p className=\"text-sm text-gray-600\">total hearings</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg\">Next Hearing</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {upcomingHearings.length > 0 ? (\n              <div>\n                <p className=\"font-medium text-sm text-gray-900\">\n                  {upcomingHearings[0].title}\n                </p>\n                <p className=\"text-xs text-gray-600\">\n                  {format(new Date(upcomingHearings[0].hearingDate!), 'PPP')}\n                </p>\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-500\">No upcoming hearings</p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Calendar View */}\n        <div className=\"lg:col-span-2\">\n          <CalendarComponent cases={cases} />\n        </div>\n\n        {/* Upcoming Hearings List */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle>Upcoming Hearings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {upcomingHearings.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Calendar className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                  <p>No upcoming hearings scheduled</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {upcomingHearings.map((case_: Case) => {\n                    const hearingDate = new Date(case_.hearingDate!);\n                    const priority = getHearingPriority(hearingDate);\n                    \n                    return (\n                      <div\n                        key={case_._id}\n                        className=\"p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium text-gray-900\">{case_.title}</h4>\n                          <Badge className={`text-xs ${priority.color}`}>\n                            {priority.label}\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm text-gray-600 space-y-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Calendar className=\"h-3 w-3\" />\n                            <span>{format(hearingDate, 'PPP')}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Clock className=\"h-3 w-3\" />\n                            <span>{format(hearingDate, 'h:mm a')}</span>\n                          </div>\n                          {case_.pnr && (\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-xs\">PNR: {case_.pnr}</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8021},"client/src/pages/case-requests.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Clock, CheckCircle, XCircle, User, MapPin, Calendar, Phone, Mail, Upload } from 'lucide-react';\nimport { format } from 'date-fns';\nimport CaseCreationForm from '@/components/CaseCreationForm';\nimport type { CaseRequest } from '@shared/schema';\n\ninterface CaseRequestWithDetails extends CaseRequest {\n  client?: {\n    name: string;\n    email: string;\n    phone: string;\n  };\n  lawyer?: {\n    name: string;\n    email: string;\n    phone: string;\n  };\n}\n\nexport default function CaseRequests() {\n  const [selectedRequest, setSelectedRequest] = useState<CaseRequestWithDetails | null>(null);\n  const [isDetailDialogOpen, setIsDetailDialogOpen] = useState(false);\n  const [isResponseDialogOpen, setIsResponseDialogOpen] = useState(false);\n  const [isCaseCreationDialogOpen, setIsCaseCreationDialogOpen] = useState(false);\n  const [lawyerResponse, setLawyerResponse] = useState('');\n  const [responseAction, setResponseAction] = useState<'accepted' | 'rejected' | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: caseRequests = [], isLoading } = useQuery<CaseRequestWithDetails[]>({\n    queryKey: ['/api/case-requests'],\n  });\n\n  const updateCaseRequestMutation = useMutation({\n    mutationFn: async ({ id, status, lawyerResponse }: { id: string; status: string; lawyerResponse: string }) => {\n      const response = await apiRequest('PATCH', `/api/case-requests/${id}`, { status, lawyerResponse });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      if (responseAction === 'accepted') {\n        toast({\n          title: 'Request Accepted',\n          description: 'Now complete the case details to create the official case.',\n        });\n        setIsResponseDialogOpen(false);\n        setIsCaseCreationDialogOpen(true);\n      } else {\n        toast({\n          title: 'Response Sent',\n          description: 'Your response has been sent to the client.',\n        });\n        setIsResponseDialogOpen(false);\n        setSelectedRequest(null);\n        setLawyerResponse('');\n        setResponseAction(null);\n      }\n      queryClient.invalidateQueries({ queryKey: ['/api/case-requests'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to send response',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleCaseCreationSuccess = () => {\n    setIsCaseCreationDialogOpen(false);\n    setSelectedRequest(null);\n    setLawyerResponse('');\n    setResponseAction(null);\n  };\n\n  const handleCreateCase = (request: CaseRequestWithDetails) => {\n    setSelectedRequest(request);\n    setIsCaseCreationDialogOpen(true);\n  };\n\n  const handleViewDetails = (request: CaseRequestWithDetails) => {\n    setSelectedRequest(request);\n    setIsDetailDialogOpen(true);\n  };\n\n  const handleRespond = (request: CaseRequestWithDetails, action: 'accepted' | 'rejected') => {\n    setSelectedRequest(request);\n    setResponseAction(action);\n    setIsResponseDialogOpen(true);\n  };\n\n  const handleSubmitResponse = () => {\n    if (!selectedRequest || !responseAction) return;\n    \n    updateCaseRequestMutation.mutate({\n      id: selectedRequest._id!,\n      status: responseAction,\n      lawyerResponse,\n    });\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      case 'accepted':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'rejected':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusVariant = (status: string): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    switch (status) {\n      case 'pending':\n        return 'outline';\n      case 'accepted':\n        return 'default';\n      case 'rejected':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n  const pendingRequests = caseRequests.filter(r => r.status === 'pending');\n  const acceptedRequests = caseRequests.filter(r => r.status === 'accepted');\n  const rejectedRequests = caseRequests.filter(r => r.status === 'rejected');\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Case Requests</h1>\n        <p className=\"text-gray-600\">Manage incoming case requests from clients</p>\n      </div>\n\n      <Tabs defaultValue=\"pending\" className=\"space-y-4\">\n        <TabsList>\n          <TabsTrigger value=\"pending\">\n            Pending ({pendingRequests.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"accepted\">\n            Accepted ({acceptedRequests.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"rejected\">\n            Rejected ({rejectedRequests.length})\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"pending\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {pendingRequests.map((request) => (\n              <CaseRequestCard\n                key={request._id}\n                request={request}\n                onViewDetails={handleViewDetails}\n                onRespond={handleRespond}\n                showActions={true}\n              />\n            ))}\n          </div>\n          {pendingRequests.length === 0 && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500\">No pending case requests.</p>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"accepted\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {acceptedRequests.map((request) => (\n              <CaseRequestCard\n                key={request._id}\n                request={request}\n                onViewDetails={handleViewDetails}\n                onRespond={handleRespond}\n                onCreateCase={handleCreateCase}\n                showActions={false}\n              />\n            ))}\n          </div>\n          {acceptedRequests.length === 0 && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500\">No accepted case requests.</p>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"rejected\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {rejectedRequests.map((request) => (\n              <CaseRequestCard\n                key={request._id}\n                request={request}\n                onViewDetails={handleViewDetails}\n                onRespond={handleRespond}\n                showActions={false}\n              />\n            ))}\n          </div>\n          {rejectedRequests.length === 0 && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-500\">No rejected case requests.</p>\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n\n      {/* Detail Dialog */}\n      <Dialog open={isDetailDialogOpen} onOpenChange={setIsDetailDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              {selectedRequest && getStatusIcon(selectedRequest.status)}\n              {selectedRequest?.title}\n            </DialogTitle>\n            <DialogDescription>\n              Case request details\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedRequest && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Case Type</Label>\n                  <p className=\"capitalize\">{selectedRequest.caseType || 'To be determined'}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">City</Label>\n                  <p>{selectedRequest.city || 'To be determined'}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Status</Label>\n                  <Badge variant={getStatusVariant(selectedRequest.status)} className=\"capitalize\">\n                    {selectedRequest.status}\n                  </Badge>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Submitted</Label>\n                  <p>{selectedRequest.createdAt ? format(new Date(selectedRequest.createdAt), 'MMM dd, yyyy') : 'N/A'}</p>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Description</Label>\n                <p className=\"mt-1 text-gray-700\">{selectedRequest.description}</p>\n              </div>\n\n              {/* Client Contact Information */}\n              <div>\n                <Label className=\"text-sm font-medium text-gray-500\">Client Contact Information</Label>\n                <div className=\"mt-2 space-y-1\">\n                  {selectedRequest.client && (\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"h-4 w-4 text-gray-400\" />\n                      <span>{selectedRequest.client.name}</span>\n                    </div>\n                  )}\n                  {selectedRequest.clientPhone && (\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4 text-gray-400\" />\n                      <span>{selectedRequest.clientPhone}</span>\n                    </div>\n                  )}\n                  {selectedRequest.clientEmail && (\n                    <div className=\"flex items-center gap-2\">\n                      <Mail className=\"h-4 w-4 text-gray-400\" />\n                      <span>{selectedRequest.clientEmail}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Victim Information</Label>\n                  <div className=\"mt-2 space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"h-4 w-4 text-gray-400\" />\n                      <span>{selectedRequest.victimName || selectedRequest.victim?.name || selectedRequest.client?.name || 'Not specified'}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4 text-gray-400\" />\n                      <span>{selectedRequest.victim?.phone || selectedRequest.clientPhone || selectedRequest.client?.phone || 'Not provided'}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Mail className=\"h-4 w-4 text-gray-400\" />\n                      <span>{selectedRequest.victim?.email || selectedRequest.clientEmail || selectedRequest.client?.email || 'Not provided'}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Accused Information</Label>\n                  <div className=\"mt-2 space-y-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"font-medium text-red-600\">\n                        {selectedRequest.accusedName || selectedRequest.accused?.name || 'Name not specified'}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4 text-gray-400\" />\n                      <span>{selectedRequest.accused?.phone || 'Phone not provided'}</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-4 w-4 text-gray-400\" />\n                      <span>{selectedRequest.accused?.address || 'Address not provided'}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Documents Section */}\n              {selectedRequest.documents && selectedRequest.documents.length > 0 && (\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Documents</Label>\n                  <div className=\"mt-2 space-y-2\">\n                    {selectedRequest.documents.map((doc, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-2 border rounded-lg bg-gray-50\">\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                          <Upload className=\"h-4 w-4\" />\n                          <span>{doc}</span>\n                        </div>\n                        <Button\n                          variant=\"ghost\" \n                          size=\"sm\"\n                          className=\"text-blue-600 hover:text-blue-800\"\n                          onClick={() => {\n                            const downloadUrl = `/uploads/${doc}`;\n                            const link = document.createElement('a');\n                            link.href = downloadUrl;\n                            link.download = doc;\n                            document.body.appendChild(link);\n                            link.click();\n                            document.body.removeChild(link);\n                          }}\n                        >\n                          Download\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {selectedRequest.lawyerResponse && (\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-500\">Lawyer Response</Label>\n                  <p className=\"mt-1 text-gray-700 bg-gray-50 p-3 rounded-md\">\n                    {selectedRequest.lawyerResponse}\n                  </p>\n                </div>\n              )}\n\n              {/* Action Buttons */}\n              {selectedRequest.status === 'accepted' && (\n                <div className=\"flex gap-3 pt-4 border-t\">\n                  <Button \n                    onClick={() => {\n                      setIsDetailDialogOpen(false);\n                      setIsCaseCreationDialogOpen(true);\n                    }}\n                    className=\"flex-1\"\n                  >\n                    Create Official Case\n                  </Button>\n                  <Button \n                    variant=\"outline\"\n                    onClick={() => setIsDetailDialogOpen(false)}\n                  >\n                    Close\n                  </Button>\n                </div>\n              )}\n              \n              {selectedRequest.status === 'pending' && (\n                <div className=\"flex gap-3 pt-4 border-t\">\n                  <Button \n                    onClick={() => {\n                      setIsDetailDialogOpen(false);\n                      handleRespond(selectedRequest, 'accepted');\n                    }}\n                    className=\"flex-1\"\n                  >\n                    Accept Request\n                  </Button>\n                  <Button \n                    variant=\"destructive\"\n                    onClick={() => {\n                      setIsDetailDialogOpen(false);\n                      handleRespond(selectedRequest, 'rejected');\n                    }}\n                  >\n                    Reject\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Response Dialog */}\n      <Dialog open={isResponseDialogOpen} onOpenChange={setIsResponseDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {responseAction === 'accepted' ? 'Accept' : 'Reject'} Case Request\n            </DialogTitle>\n            <DialogDescription>\n              {responseAction === 'accepted' \n                ? 'Accepting this request will create a new case and notify the client.'\n                : 'Please provide a reason for rejecting this case request.'\n              }\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"response\">\n                {responseAction === 'accepted' ? 'Acceptance Message (Optional)' : 'Rejection Reason'}\n              </Label>\n              <Textarea\n                id=\"response\"\n                value={lawyerResponse}\n                onChange={(e) => setLawyerResponse(e.target.value)}\n                placeholder={\n                  responseAction === 'accepted' \n                    ? 'Welcome message for the client...'\n                    : 'Please provide a reason for rejection...'\n                }\n                className=\"mt-1\"\n              />\n            </div>\n\n            <div className=\"flex justify-end gap-3\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setIsResponseDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSubmitResponse}\n                disabled={updateCaseRequestMutation.isPending}\n                variant={responseAction === 'accepted' ? 'default' : 'destructive'}\n              >\n                {updateCaseRequestMutation.isPending ? 'Sending...' : \n                 responseAction === 'accepted' ? 'Accept Request' : 'Reject Request'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Case Creation Dialog */}\n      <Dialog open={isCaseCreationDialogOpen} onOpenChange={setIsCaseCreationDialogOpen}>\n        <DialogContent className=\"max-w-6xl max-h-[95vh] overflow-y-auto\">\n          {selectedRequest && (\n            <CaseCreationForm\n              caseRequestId={selectedRequest._id!}\n              onSuccess={handleCaseCreationSuccess}\n              onCancel={() => setIsCaseCreationDialogOpen(false)}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\ninterface CaseRequestCardProps {\n  request: CaseRequestWithDetails;\n  onViewDetails: (request: CaseRequestWithDetails) => void;\n  onRespond: (request: CaseRequestWithDetails, action: 'accepted' | 'rejected') => void;\n  onCreateCase?: (request: CaseRequestWithDetails) => void;\n  showActions: boolean;\n}\n\nfunction CaseRequestCard({ request, onViewDetails, onRespond, onCreateCase, showActions }: CaseRequestCardProps) {\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      case 'accepted':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'rejected':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusVariant = (status: string): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    switch (status) {\n      case 'pending':\n        return 'outline';\n      case 'accepted':\n        return 'default';\n      case 'rejected':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <CardTitle className=\"text-lg\">{request.title}</CardTitle>\n          <Badge variant={getStatusVariant(request.status)} className=\"capitalize\">\n            <span className=\"flex items-center gap-1\">\n              {getStatusIcon(request.status)}\n              {request.status}\n            </span>\n          </Badge>\n        </div>\n        <CardDescription className=\"flex items-center gap-4 text-sm\">\n          <span className=\"capitalize\">{request.caseType}</span>\n          <span className=\"flex items-center gap-1\">\n            <MapPin className=\"h-3 w-3\" />\n            {request.city}\n          </span>\n          <span className=\"flex items-center gap-1\">\n            <Calendar className=\"h-3 w-3\" />\n            {request.createdAt ? format(new Date(request.createdAt), 'MMM dd') : 'N/A'}\n          </span>\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"space-y-3\">\n          <p className=\"text-sm text-gray-600 line-clamp-2\">\n            {request.description}\n          </p>\n\n          <div className=\"text-sm\">\n            <div className=\"flex items-center gap-2 text-gray-500\">\n              <User className=\"h-4 w-4\" />\n              <span>Victim: {request.victimName || request.victim?.name || 'Not specified'}</span>\n            </div>\n          </div>\n\n          <div className=\"flex gap-2 pt-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => onViewDetails(request)}\n              className=\"flex-1\"\n            >\n              View Details\n            </Button>\n            \n            {showActions && request.status === 'pending' && (\n              <>\n                <Button\n                  size=\"sm\"\n                  onClick={() => onRespond(request, 'accepted')}\n                  className=\"flex-1\"\n                >\n                  Accept\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"destructive\"\n                  onClick={() => onRespond(request, 'rejected')}\n                >\n                  Reject\n                </Button>\n              </>\n            )}\n            \n            {request.status === 'accepted' && onCreateCase && (\n              <Button\n                size=\"sm\"\n                onClick={() => onCreateCase(request)}\n                className=\"flex-1 bg-green-600 hover:bg-green-700\"\n              >\n                Create Case\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":23638},"client/src/pages/cases.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { \n  Plus,\n  Filter,\n  MoreHorizontal,\n  Calendar,\n  MapPin,\n  User,\n  FileText,\n  Clock,\n  CheckCircle2,\n  XCircle,\n  AlertCircle,\n  Download,\n  Eye,\n  Trash2,\n  Edit,\n  Phone,\n  Mail,\n  Building,\n  Scale\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Case } from \"@shared/schema\";\n\nexport default function Cases() {\n  const [selectedCase, setSelectedCase] = useState<Case | null>(null);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [caseToDelete, setCaseToDelete] = useState<Case | null>(null);\n  \n  const user = authService.getUser();\n  const queryClient = useQueryClient();\n\n  const { data: cases = [], isLoading } = useQuery<Case[]>({\n    queryKey: ['/api/cases'],\n  });\n\n  const deleteCaseMutation = useMutation({\n    mutationFn: async (caseId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/cases/${caseId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cases'] });\n      setSelectedCase(null);\n      setIsDeleteDialogOpen(false);\n      setCaseToDelete(null);\n    },\n  });\n\n  // Police approval/rejection mutations\n  const approveCaseMutation = useMutation({\n    mutationFn: async (caseId: string) => {\n      const response = await apiRequest(\"PATCH\", `/api/cases/${caseId}/approve`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cases'] });\n      setSelectedCase(null);\n    },\n  });\n\n  const rejectCaseMutation = useMutation({\n    mutationFn: async (caseId: string) => {\n      const response = await apiRequest(\"PATCH\", `/api/cases/${caseId}/reject`, {\n        reason: \"Case rejected by police review\"\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cases'] });\n      setSelectedCase(null);\n    },\n  });\n\n  const getStatusIcon = (status: string) => {\n    const icons = {\n      'approved': <CheckCircle2 className=\"text-green-600\" size={16} />,\n      'under_review': <Clock className=\"text-yellow-600\" size={16} />,\n      'rejected': <XCircle className=\"text-red-600\" size={16} />,\n      'submitted': <AlertCircle className=\"text-blue-600\" size={16} />,\n      'in_progress': <Clock className=\"text-blue-600\" size={16} />,\n      'draft': <FileText className=\"text-gray-600\" size={16} />\n    };\n    return icons[status as keyof typeof icons] || icons.draft;\n  };\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      'approved': 'bg-green-100 text-green-800 border-green-200',\n      'under_review': 'bg-yellow-100 text-yellow-800 border-yellow-200',\n      'rejected': 'bg-red-100 text-red-800 border-red-200',\n      'submitted': 'bg-orange-100 text-orange-800 border-orange-200',\n      'in_progress': 'bg-blue-100 text-blue-800 border-blue-200',\n      'draft': 'bg-gray-100 text-gray-800 border-gray-200'\n    };\n    return colors[status as keyof typeof colors] || colors.draft;\n  };\n\n  const filteredCases = statusFilter === \"all\" \n    ? cases \n    : cases.filter(case_ => case_.status === statusFilter);\n\n  const caseCounts = {\n    all: cases.length,\n    pending: cases.filter(c => c.status === 'under_review').length,\n    approved: cases.filter(c => c.status === 'approved').length,\n    rejected: cases.filter(c => c.status === 'rejected').length,\n    in_progress: cases.filter(c => c.status === 'in_progress').length\n  };\n\n  const handleDeleteCase = (case_: Case) => {\n    setCaseToDelete(case_);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (caseToDelete?._id) {\n      deleteCaseMutation.mutate(caseToDelete._id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading cases...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Enhanced Header */}\n      <div className=\"bg-gradient-to-r from-slate-900 via-blue-900 to-indigo-900 text-white rounded-xl p-6 shadow-2xl border border-blue-300/20\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-3 bg-blue-500/20 rounded-lg backdrop-blur-sm\">\n              <Scale className=\"w-8 h-8 text-blue-300\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold mb-1 bg-gradient-to-r from-white to-blue-100 bg-clip-text text-transparent\">\n                Case Management Hub\n              </h1>\n              <p className=\"text-blue-200 text-lg flex items-center space-x-2\">\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                  <span className=\"text-sm\">Live system</span>\n                </div>\n                <span>•</span>\n                <span>\n                  {user?.role === 'client' && \"Track and manage your legal cases efficiently\"}\n                  {user?.role === 'lawyer' && \"Manage your assigned cases and client relationships\"}\n                  {user?.role === 'police' && \"Review case submissions and approve/reject requests\"}\n                </span>\n              </p>\n            </div>\n          </div>\n          {user?.role === 'client' && (\n            <Button className=\"bg-white text-blue-600 hover:bg-blue-50 h-12 px-6\">\n              <Plus className=\"mr-2\" size={18} />\n              New Case\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Cases List */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"border-0 shadow-lg\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center\">\n                  <Scale className=\"mr-2 text-blue-600\" size={20} />\n                  All Cases ({filteredCases.length})\n                </CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"w-40\">\n                      <Filter className=\"mr-2 h-4 w-4\" />\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status ({caseCounts.all})</SelectItem>\n                      <SelectItem value=\"under_review\">Pending ({caseCounts.pending})</SelectItem>\n                      <SelectItem value=\"approved\">Approved ({caseCounts.approved})</SelectItem>\n                      <SelectItem value=\"rejected\">Rejected ({caseCounts.rejected})</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <Tabs defaultValue=\"all\" className=\"space-y-4\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"all\" onClick={() => setStatusFilter(\"all\")}>\n                    All ({caseCounts.all})\n                  </TabsTrigger>\n                  <TabsTrigger value=\"pending\" onClick={() => setStatusFilter(\"under_review\")}>\n                    Pending ({caseCounts.pending})\n                  </TabsTrigger>\n                  <TabsTrigger value=\"approved\" onClick={() => setStatusFilter(\"approved\")}>\n                    Approved ({caseCounts.approved})\n                  </TabsTrigger>\n                  <TabsTrigger value=\"rejected\" onClick={() => setStatusFilter(\"rejected\")}>\n                    Rejected ({caseCounts.rejected})\n                  </TabsTrigger>\n                </TabsList>\n\n                <ScrollArea className=\"h-[600px]\">\n                  <div className=\"space-y-4\">\n                    {filteredCases.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <Scale className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                        <p className=\"text-gray-500\">No cases found</p>\n                      </div>\n                    ) : (\n                      filteredCases.map((case_) => (\n                        <div\n                          key={case_._id}\n                          onClick={() => setSelectedCase(case_)}\n                          className={`group p-6 rounded-xl border-2 transition-all duration-200 cursor-pointer ${\n                            selectedCase?._id === case_._id\n                              ? 'border-blue-500 bg-blue-50 shadow-lg'\n                              : 'border-gray-200 hover:border-blue-300 hover:shadow-md'\n                          }`}\n                        >\n                          <div className=\"flex items-start justify-between mb-4\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-3 mb-2\">\n                                {getStatusIcon(case_.status)}\n                                <h3 className=\"text-xl font-bold text-gray-900\">{case_.title}</h3>\n                                <Badge className={`${getStatusColor(case_.status)}`}>\n                                  {case_.status === 'in_progress' ? 'IN PROGRESS' : case_.status === 'submitted' ? 'SUBMITTED' : case_.status.replace('_', ' ').toUpperCase()}\n                                </Badge>\n                              </div>\n                              \n                              <p className=\"text-gray-600 mb-3 line-clamp-2\">{case_.description}</p>\n                              \n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 text-sm\">\n                                <div className=\"flex items-center text-gray-500\">\n                                  <FileText size={14} className=\"mr-1\" />\n                                  <span className=\"capitalize\">{case_.caseType}</span>\n                                </div>\n                                <div className=\"flex items-center text-gray-500\">\n                                  <MapPin size={14} className=\"mr-1\" />\n                                  <span>{case_.city}</span>\n                                </div>\n                                <div className=\"flex items-center text-gray-500\">\n                                  <Calendar size={14} className=\"mr-1\" />\n                                  <span>{case_.hearingDate ? new Date(case_.hearingDate).toLocaleDateString() : 'TBD'}</span>\n                                </div>\n                                <div className=\"flex items-center text-gray-500\">\n                                  <Building size={14} className=\"mr-1\" />\n                                  <span>{typeof case_.policeStation === 'string' ? case_.policeStation : case_.policeStation?.name || 'Not assigned'}</span>\n                                </div>\n                              </div>\n\n                              {case_.accused?.name && (\n                                <div className=\"mt-3 p-2 bg-red-50 rounded-lg border border-red-200\">\n                                  <span className=\"text-sm text-red-700 font-medium\">\n                                    Accused: {case_.accused.name}\n                                  </span>\n                                </div>\n                              )}\n\n                              {/* Police Quick Actions for under_review cases */}\n                              {(user?.role === 'police' && (case_.status === 'under_review' || case_.status === 'submitted')) && (\n                                <div className=\"mt-4 flex space-x-3\">\n                                  <Button\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      if (case_._id) approveCaseMutation.mutate(case_._id);\n                                    }}\n                                    disabled={approveCaseMutation.isPending}\n                                    className=\"bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg shadow-md flex items-center space-x-2 font-medium\"\n                                    data-testid={`button-quick-approve-${case_._id}`}\n                                  >\n                                    <CheckCircle2 size={16} />\n                                    <span>{approveCaseMutation.isPending ? 'Approving...' : 'Approve'}</span>\n                                  </Button>\n                                  <Button\n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      if (case_._id) rejectCaseMutation.mutate(case_._id);\n                                    }}\n                                    disabled={rejectCaseMutation.isPending}\n                                    variant=\"outline\"\n                                    className=\"border-red-300 text-red-600 hover:bg-red-50 hover:border-red-400 px-4 py-2 rounded-lg shadow-md flex items-center space-x-2 font-medium\"\n                                    data-testid={`button-quick-reject-${case_._id}`}\n                                  >\n                                    <XCircle size={16} />\n                                    <span>{rejectCaseMutation.isPending ? 'Rejecting...' : 'Reject'}</span>\n                                  </Button>\n                                </div>\n                              )}\n\n                              {/* Debug info for police users */}\n                              {user?.role === 'police' && (\n                                <div className=\"mt-2 text-xs text-gray-500 bg-gray-100 p-2 rounded\">\n                                  Debug: User role: {user?.role}, Case status: {case_.status}, Show buttons: {((case_.status === 'under_review' || case_.status === 'submitted')).toString()}\n                                </div>\n                              )}\n                            </div>\n\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button variant=\"ghost\" size=\"sm\" onClick={(e) => e.stopPropagation()}>\n                                  <MoreHorizontal size={16} />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem onClick={(e) => e.stopPropagation()}>\n                                  <Eye className=\"mr-2 h-4 w-4\" />\n                                  View Details\n                                </DropdownMenuItem>\n                                {user?.role === 'lawyer' && (\n                                  <DropdownMenuItem onClick={(e) => e.stopPropagation()}>\n                                    <Edit className=\"mr-2 h-4 w-4\" />\n                                    Edit Case\n                                  </DropdownMenuItem>\n                                )}\n                                {case_.documents && case_.documents.length > 0 && (\n                                  <DropdownMenuItem onClick={(e) => e.stopPropagation()}>\n                                    <Download className=\"mr-2 h-4 w-4\" />\n                                    Download Documents\n                                  </DropdownMenuItem>\n                                )}\n                                {user?.role === 'police' && (case_.status === 'under_review' || case_.status === 'submitted') && (\n                                  <>\n                                    <DropdownMenuItem \n                                      onClick={(e) => {\n                                        e.stopPropagation();\n                                        if (case_._id) approveCaseMutation.mutate(case_._id);\n                                      }}\n                                      className=\"text-green-600 bg-green-50 hover:bg-green-100 font-medium\"\n                                      disabled={approveCaseMutation.isPending}\n                                      data-testid={`button-approve-${case_._id}`}\n                                    >\n                                      <CheckCircle2 className=\"mr-2 h-4 w-4\" />\n                                      {approveCaseMutation.isPending ? 'Approving...' : 'Approve Case'}\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem \n                                      onClick={(e) => {\n                                        e.stopPropagation();\n                                        if (case_._id) rejectCaseMutation.mutate(case_._id);\n                                      }}\n                                      className=\"text-red-600 bg-red-50 hover:bg-red-100 font-medium\"\n                                      disabled={rejectCaseMutation.isPending}\n                                      data-testid={`button-reject-${case_._id}`}\n                                    >\n                                      <XCircle className=\"mr-2 h-4 w-4\" />\n                                      {rejectCaseMutation.isPending ? 'Rejecting...' : 'Reject Case'}\n                                    </DropdownMenuItem>\n                                  </>\n                                )}\n                                {user?.role === 'lawyer' && (\n                                  <DropdownMenuItem \n                                    onClick={(e) => {\n                                      e.stopPropagation();\n                                      handleDeleteCase(case_);\n                                    }}\n                                    className=\"text-red-600\"\n                                  >\n                                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                                    Delete Case\n                                  </DropdownMenuItem>\n                                )}\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </div>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </ScrollArea>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Case Details Panel */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"border-0 shadow-lg sticky top-6\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"mr-2 text-blue-600\" size={20} />\n                Case Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {selectedCase ? (\n                <ScrollArea className=\"h-[600px]\">\n                  <div className=\"space-y-6\">\n                    {/* Status Badge */}\n                    <div className=\"text-center\">\n                      <Badge className={`text-sm ${getStatusColor(selectedCase.status)} px-4 py-2`}>\n                        {getStatusIcon(selectedCase.status)}\n                        <span className=\"ml-2\">\n                          {selectedCase.status === 'in_progress' ? 'IN PROGRESS' : selectedCase.status === 'submitted' ? 'SUBMITTED' : selectedCase.status.replace('_', ' ').toUpperCase()}\n                        </span>\n                      </Badge>\n                    </div>\n\n                    {/* Case Title */}\n                    <div className=\"text-center\">\n                      <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">{selectedCase.title}</h2>\n                      <p className=\"text-gray-600\">{selectedCase.description}</p>\n                    </div>\n\n                    {/* Police Actions */}\n                    {user?.role === 'police' && (selectedCase.status === 'under_review' || selectedCase.status === 'submitted') && (\n                      <>\n                        <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 text-center\">\n                          <h3 className=\"text-lg font-semibold text-yellow-800 mb-3\">\n                            <AlertCircle className=\"inline mr-2\" size={20} />\n                            Case Awaiting Review\n                          </h3>\n                          <div className=\"space-y-2\">\n                            <Button\n                              onClick={() => selectedCase._id && approveCaseMutation.mutate(selectedCase._id)}\n                              disabled={approveCaseMutation.isPending}\n                              className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                            >\n                              <CheckCircle2 className=\"mr-2\" size={16} />\n                              {approveCaseMutation.isPending ? 'Approving...' : 'Approve Case'}\n                            </Button>\n                            <Button\n                              onClick={() => selectedCase._id && rejectCaseMutation.mutate(selectedCase._id)}\n                              disabled={rejectCaseMutation.isPending}\n                              variant=\"destructive\"\n                              className=\"w-full\"\n                            >\n                              <XCircle className=\"mr-2\" size={16} />\n                              {rejectCaseMutation.isPending ? 'Rejecting...' : 'Reject Case'}\n                            </Button>\n                          </div>\n                        </div>\n                        <Separator />\n                      </>\n                    )}\n\n                    {/* Case Approval Status */}\n                    {user?.role === 'police' && selectedCase.status === 'approved' && selectedCase.pnr && (\n                      <>\n                        <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n                          <CheckCircle2 className=\"inline text-green-600 mb-2\" size={24} />\n                          <h3 className=\"text-lg font-semibold text-green-800\">Case Approved</h3>\n                          <p className=\"text-green-700 mt-1\">PNR: {selectedCase.pnr}</p>\n                        </div>\n                        <Separator />\n                      </>\n                    )}\n\n                    {/* Case Rejection Status */}\n                    {user?.role === 'police' && selectedCase.status === 'rejected' && (\n                      <>\n                        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 text-center\">\n                          <XCircle className=\"inline text-red-600 mb-2\" size={24} />\n                          <h3 className=\"text-lg font-semibold text-red-800\">Case Rejected</h3>\n                          <p className=\"text-red-700 mt-1\">Case has been rejected during review</p>\n                        </div>\n                        <Separator />\n                      </>\n                    )}\n\n                    <Separator />\n\n                    {/* Case Information */}\n                    <div className=\"space-y-4\">\n                      <h3 className=\"font-semibold text-gray-900 flex items-center\">\n                        <FileText className=\"mr-2\" size={16} />\n                        Case Information\n                      </h3>\n                      \n                      <div className=\"space-y-3 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Type:</span>\n                          <Badge variant=\"outline\" className=\"capitalize\">{selectedCase.caseType}</Badge>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">FIR Number:</span>\n                          <span className=\"font-medium\">{(selectedCase as any).firNo || 'Not assigned'}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">City:</span>\n                          <span className=\"font-medium\">{selectedCase.city}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Hearing Date:</span>\n                          <span className=\"font-medium\">\n                            {selectedCase.hearingDate \n                              ? new Date(selectedCase.hearingDate).toLocaleDateString()\n                              : 'To be decided'\n                            }\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <Separator />\n\n                    {/* Victim Details */}\n                    <div className=\"space-y-4\">\n                      <h3 className=\"font-semibold text-gray-900 flex items-center\">\n                        <User className=\"mr-2\" size={16} />\n                        Victim Details\n                      </h3>\n                      \n                      <div className=\"space-y-3 text-sm\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar className=\"w-10 h-10\">\n                            <AvatarFallback className=\"bg-blue-100 text-blue-600\">\n                              {selectedCase.victim?.name?.charAt(0) || 'V'}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <div className=\"font-medium\">{selectedCase.victim?.name || 'Not specified'}</div>\n                            <div className=\"text-gray-500\">{selectedCase.victim?.email}</div>\n                          </div>\n                        </div>\n                        \n                        {selectedCase.victim?.phone && (\n                          <div className=\"flex items-center text-gray-600\">\n                            <Phone size={14} className=\"mr-2\" />\n                            <span>{selectedCase.victim.phone}</span>\n                          </div>\n                        )}\n                        \n                        {selectedCase.victim?.email && (\n                          <div className=\"flex items-center text-gray-600\">\n                            <Mail size={14} className=\"mr-2\" />\n                            <span>{selectedCase.victim.email}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Accused Details */}\n                    {selectedCase.accused?.name && (\n                      <>\n                        <Separator />\n                        <div className=\"space-y-4\">\n                          <h3 className=\"font-semibold text-gray-900 flex items-center\">\n                            <AlertCircle className=\"mr-2 text-red-600\" size={16} />\n                            Accused Details\n                          </h3>\n                          \n                          <div className=\"p-3 bg-red-50 rounded-lg border border-red-200\">\n                            <div className=\"font-medium text-red-900\">{selectedCase.accused.name}</div>\n                            {selectedCase.accused.address && (\n                              <div className=\"text-sm text-red-700 mt-1\">{selectedCase.accused.address}</div>\n                            )}\n                          </div>\n                        </div>\n                      </>\n                    )}\n\n                    {/* Police Station */}\n                    {selectedCase.policeStation && (\n                      <>\n                        <Separator />\n                        <div className=\"space-y-4\">\n                          <h3 className=\"font-semibold text-gray-900 flex items-center\">\n                            <Building className=\"mr-2\" size={16} />\n                            Police Station\n                          </h3>\n                          \n                          <div className=\"p-3 bg-gray-50 rounded-lg\">\n                            <div className=\"font-medium\">\n                              {typeof selectedCase.policeStation === 'string' \n                                ? selectedCase.policeStation \n                                : selectedCase.policeStation?.name}\n                            </div>\n                            <div className=\"text-sm text-gray-600 mt-1\">\n                              Status: Under review\n                            </div>\n                          </div>\n                        </div>\n                      </>\n                    )}\n\n                    {/* Documents */}\n                    {selectedCase.documents && selectedCase.documents.length > 0 && (\n                      <>\n                        <Separator />\n                        <div className=\"space-y-4\">\n                          <h3 className=\"font-semibold text-gray-900 flex items-center\">\n                            <FileText className=\"mr-2\" size={16} />\n                            Documents ({selectedCase.documents.length})\n                          </h3>\n                          \n                          <div className=\"space-y-2\">\n                            {selectedCase.documents.map((doc, index) => (\n                              <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                                <div className=\"flex items-center\">\n                                  <FileText size={16} className=\"mr-2 text-gray-500\" />\n                                  <div className=\"flex flex-col\">\n                                    <span className=\"text-sm font-medium\">\n                                      {typeof doc === 'string' ? doc.split('-').pop() || `Document ${index + 1}` : `Document ${index + 1}`}\n                                    </span>\n                                    <span className=\"text-xs text-gray-500\">\n                                      {typeof doc === 'string' ? doc.split('.').pop()?.toUpperCase() : 'PDF'}\n                                    </span>\n                                  </div>\n                                </div>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => window.open(`/uploads/${typeof doc === 'string' ? doc : doc}`, '_blank')}\n                                >\n                                  <Download size={14} />\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </ScrollArea>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Scale className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                  <p className=\"text-gray-500\">Select a case to view details</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Case</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p className=\"text-gray-600\">\n              Are you sure you want to delete the case \"{caseToDelete?.title}\"? This action cannot be undone.\n            </p>\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setIsDeleteDialogOpen(false)}>\n                Cancel\n              </Button>\n              <Button \n                variant=\"destructive\" \n                onClick={confirmDelete}\n                disabled={deleteCaseMutation.isPending}\n              >\n                {deleteCaseMutation.isPending ? 'Deleting...' : 'Delete Case'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":33633},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { \n  Plus, \n  FolderOpen, \n  Clock, \n  CalendarCheck, \n  FileText, \n  Bell, \n  TrendingUp,\n  Users,\n  CheckCircle2,\n  AlertCircle,\n  BarChart3,\n  Calendar,\n  MessageSquare,\n  ChevronRight,\n  Filter\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Case, Lawyer, Notification } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const user = authService.getUser();\n  const [selectedPeriod, setSelectedPeriod] = useState(\"thisMonth\");\n\n  const { data: stats = {}, isLoading: statsLoading } = useQuery<any>({\n    queryKey: ['/api/dashboard/stats'],\n  });\n\n  const { data: recentCases = [], isLoading: casesLoading } = useQuery<Case[]>({\n    queryKey: ['/api/cases'],\n  });\n\n  const { data: availableLawyers = [], isLoading: lawyersLoading } = useQuery<Lawyer[]>({\n    queryKey: ['/api/lawyers'],\n    enabled: user?.role === 'client',\n  });\n\n  const { data: notifications = [] } = useQuery<Notification[]>({\n    queryKey: ['/api/notifications'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/notifications');\n      return await response.json();\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    const colors = {\n      'approved': 'bg-green-100 text-green-800 border-green-200',\n      'under_review': 'bg-yellow-100 text-yellow-800 border-yellow-200',\n      'rejected': 'bg-red-100 text-red-800 border-red-200',\n      'submitted': 'bg-blue-100 text-blue-800 border-blue-200',\n      'draft': 'bg-gray-100 text-gray-800 border-gray-200'\n    };\n    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800 border-gray-200';\n  };\n\n  const getRoleColor = (role: string) => {\n    const colors = {\n      'client': 'bg-blue-500',\n      'lawyer': 'bg-green-500',\n      'police': 'bg-purple-500'\n    };\n    return colors[role as keyof typeof colors] || 'bg-gray-500';\n  };\n\n  if (statsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header Section */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl p-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\">Welcome back, {user?.name}!</h1>\n            <p className=\"text-blue-100 text-lg\">\n              {user?.role === 'client' && \"Manage your legal cases and find the best lawyers\"}\n              {user?.role === 'lawyer' && \"Track your cases and client communications\"}\n              {user?.role === 'police' && \"Review and approve case submissions\"}\n            </p>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"bg-white bg-opacity-20 rounded-lg p-3\">\n              <p className=\"text-sm text-blue-100\">Current Role</p>\n              <p className=\"text-xl font-semibold capitalize\">{user?.role}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"border-0 shadow-md hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Cases</p>\n                <p className=\"text-3xl font-bold text-gray-900\">{stats.totalCases || recentCases.length}</p>\n                <p className=\"text-sm text-green-600 flex items-center mt-2\">\n                  <TrendingUp size={16} className=\"mr-1\" />\n                  +12% from last month\n                </p>\n              </div>\n              <div className=\"bg-blue-100 p-3 rounded-full\">\n                <FolderOpen className=\"text-blue-600\" size={24} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-0 shadow-md hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Active Cases</p>\n                <p className=\"text-3xl font-bold text-gray-900\">{stats.activeCases || recentCases.filter(c => c.status === 'approved').length}</p>\n                <p className=\"text-sm text-blue-600 flex items-center mt-2\">\n                  <Clock size={16} className=\"mr-1\" />\n                  In progress\n                </p>\n              </div>\n              <div className=\"bg-green-100 p-3 rounded-full\">\n                <CheckCircle2 className=\"text-green-600\" size={24} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-0 shadow-md hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Pending Review</p>\n                <p className=\"text-3xl font-bold text-gray-900\">{stats.pendingCases || recentCases.filter(c => c.status === 'under_review').length}</p>\n                <p className=\"text-sm text-orange-600 flex items-center mt-2\">\n                  <AlertCircle size={16} className=\"mr-1\" />\n                  Awaiting action\n                </p>\n              </div>\n              <div className=\"bg-orange-100 p-3 rounded-full\">\n                <Clock className=\"text-orange-600\" size={24} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"border-0 shadow-md hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">\n                  {user?.role === 'lawyer' ? 'Success Rate' : 'Notifications'}\n                </p>\n                <p className=\"text-3xl font-bold text-gray-900\">\n                  {user?.role === 'lawyer' ? '85%' : Array.isArray(notifications) ? notifications.filter(n => !n.read).length : 0}\n                </p>\n                <p className=\"text-sm text-purple-600 flex items-center mt-2\">\n                  <BarChart3 size={16} className=\"mr-1\" />\n                  {user?.role === 'lawyer' ? 'Win rate' : 'Unread'}\n                </p>\n              </div>\n              <div className=\"bg-purple-100 p-3 rounded-full\">\n                {user?.role === 'lawyer' ? \n                  <BarChart3 className=\"text-purple-600\" size={24} /> :\n                  <Bell className=\"text-purple-600\" size={24} />\n                }\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <TabsList className=\"grid w-fit grid-cols-4\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"cases\">Recent Cases</TabsTrigger>\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n            {user?.role === 'client' && <TabsTrigger value=\"lawyers\">Find Lawyers</TabsTrigger>}\n            {user?.role === 'lawyer' && <TabsTrigger value=\"requests\">Case Requests</TabsTrigger>}\n            {user?.role === 'police' && <TabsTrigger value=\"pending\">Pending Approval</TabsTrigger>}\n          </TabsList>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"thisWeek\">This Week</SelectItem>\n                <SelectItem value=\"thisMonth\">This Month</SelectItem>\n                <SelectItem value=\"lastMonth\">Last Month</SelectItem>\n                <SelectItem value=\"thisYear\">This Year</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Recent Activity */}\n            <Card className=\"border-0 shadow-md\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg font-semibold flex items-center\">\n                  <Clock className=\"mr-2 text-blue-600\" size={20} />\n                  Recent Activity\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className=\"h-80\">\n                  <div className=\"space-y-4\">\n                    {recentCases.slice(0, 5).map((case_, index) => (\n                      <div key={case_._id} className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors\">\n                        <div className=\"flex-shrink-0\">\n                          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <FolderOpen className=\"text-blue-600\" size={16} />\n                          </div>\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"text-sm font-medium text-gray-900 truncate\">{case_.title}</p>\n                          <p className=\"text-xs text-gray-500\">{case_.caseType} • {case_.city}</p>\n                        </div>\n                        <Badge className={`text-xs ${getStatusColor(case_.status)}`}>\n                          {case_.status.replace('_', ' ')}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card className=\"border-0 shadow-md\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg font-semibold flex items-center\">\n                  <Plus className=\"mr-2 text-green-600\" size={20} />\n                  Quick Actions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {user?.role === 'client' && (\n                    <>\n                      <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                        <Button \n                          className=\"w-full justify-start h-12 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-lg\"\n                          onClick={() => window.location.href = '/cases'}\n                          data-testid=\"button-create-case\"\n                        >\n                          <Plus className=\"mr-2\" size={18} />\n                          Create New Case\n                        </Button>\n                      </motion.div>\n                      <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full justify-start h-12 border-blue-200 hover:bg-blue-50 hover:border-blue-300\"\n                          onClick={() => window.location.href = '/find-lawyers'}\n                          data-testid=\"button-find-lawyers\"\n                        >\n                          <Users className=\"mr-2\" size={18} />\n                          Find Lawyers\n                        </Button>\n                      </motion.div>\n                      <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full justify-start h-12 border-purple-200 hover:bg-purple-50 hover:border-purple-300\"\n                          onClick={() => window.location.href = '/calendar'}\n                          data-testid=\"button-schedule-consultation\"\n                        >\n                          <Calendar className=\"mr-2\" size={18} />\n                          Schedule Consultation\n                        </Button>\n                      </motion.div>\n                    </>\n                  )}\n                  \n                  {user?.role === 'lawyer' && (\n                    <>\n                      <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                        <Button \n                          className=\"w-full justify-start h-12 bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white shadow-lg\"\n                          onClick={() => window.location.href = '/case-requests'}\n                          data-testid=\"button-review-case-requests\"\n                        >\n                          <FolderOpen className=\"mr-2\" size={18} />\n                          Review Case Requests\n                        </Button>\n                      </motion.div>\n                      <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full justify-start h-12 border-purple-200 hover:bg-purple-50 hover:border-purple-300\"\n                          onClick={() => window.location.href = '/messages'}\n                          data-testid=\"button-client-messages\"\n                        >\n                          <MessageSquare className=\"mr-2\" size={18} />\n                          Client Messages\n                        </Button>\n                      </motion.div>\n                      <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full justify-start h-12 border-indigo-200 hover:bg-indigo-50 hover:border-indigo-300\"\n                          onClick={() => window.location.href = '/calendar'}\n                          data-testid=\"button-upcoming-hearings\"\n                        >\n                          <Calendar className=\"mr-2\" size={18} />\n                          Upcoming Hearings\n                        </Button>\n                      </motion.div>\n                    </>\n                  )}\n                  \n                  {user?.role === 'police' && (\n                    <>\n                      <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                        <Button \n                          className=\"w-full justify-start h-12 bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white shadow-lg\"\n                          onClick={() => window.location.href = '/cases'}\n                          data-testid=\"button-review-pending-cases\"\n                        >\n                          <AlertCircle className=\"mr-2\" size={18} />\n                          Review Pending Cases ({(recentCases.filter(c => c.status === 'under_review' || c.status === 'submitted').length || stats.pendingReview || 0)})\n                        </Button>\n                      </motion.div>\n                      <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full justify-start h-12 border-purple-200 hover:bg-purple-50 hover:border-purple-300\"\n                          onClick={() => window.location.href = '/documents'}\n                          data-testid=\"button-case-reports\"\n                        >\n                          <FileText className=\"mr-2\" size={18} />\n                          Case Reports\n                        </Button>\n                      </motion.div>\n                      <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\n                        <Button \n                          variant=\"outline\" \n                          className=\"w-full justify-start h-12 border-indigo-200 hover:bg-indigo-50 hover:border-indigo-300\"\n                          onClick={() => window.location.href = '/dashboard'}\n                          data-testid=\"button-station-statistics\"\n                        >\n                          <BarChart3 className=\"mr-2\" size={18} />\n                          Station Statistics\n                        </Button>\n                      </motion.div>\n                    </>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"cases\" className=\"space-y-4\">\n          <Card className=\"border-0 shadow-md\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-lg font-semibold\">All Cases</CardTitle>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Filter className=\"mr-2\" size={16} />\n                  Filter\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-96\">\n                <div className=\"space-y-4\">\n                  {recentCases.map((case_) => (\n                    <div key={case_._id} className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h3 className=\"font-semibold text-gray-900\">{case_.title}</h3>\n                        <Badge className={`${getStatusColor(case_.status)}`}>\n                          {case_.status.replace('_', ' ')}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-3\">{case_.description}</p>\n                      <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <div className=\"flex items-center space-x-4\">\n                          <span className=\"capitalize\">{case_.caseType}</span>\n                          <span>{case_.city}</span>\n                          {case_.accused?.name && (\n                            <span className=\"text-red-600 font-medium\">Accused: {case_.accused.name}</span>\n                          )}\n                        </div>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          View Details <ChevronRight size={14} className=\"ml-1\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\" className=\"space-y-4\">\n          <Card className=\"border-0 shadow-md\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg font-semibold flex items-center\">\n                <Bell className=\"mr-2 text-purple-600\" size={20} />\n                Notifications\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-96\">\n                <div className=\"space-y-3\">\n                  {Array.isArray(notifications) && notifications.length > 0 ? (\n                    notifications.slice(0, 10).map((notif) => (\n                      <div key={notif._id} className={`p-4 rounded-lg border-l-4 ${\n                        notif.read ? 'bg-gray-50 border-l-gray-300' : 'bg-blue-50 border-l-blue-500'\n                      }`}>\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-gray-900\">{notif.title}</h4>\n                            <p className=\"text-sm text-gray-600 mt-1\">{notif.message}</p>\n                            <p className=\"text-xs text-gray-400 mt-2\">\n                              {notif.createdAt ? new Date(notif.createdAt).toLocaleDateString() : 'Just now'}\n                            </p>\n                          </div>\n                          {!notif.read && (\n                            <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\"></div>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Bell className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                      <p className=\"text-gray-500\">No notifications yet</p>\n                    </div>\n                  )}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {user?.role === 'client' && (\n          <TabsContent value=\"lawyers\" className=\"space-y-4\">\n            <Card className=\"border-0 shadow-md\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg font-semibold flex items-center\">\n                  <Users className=\"mr-2 text-green-600\" size={20} />\n                  Available Lawyers\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ScrollArea className=\"h-96\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {availableLawyers.slice(0, 6).map((lawyer) => (\n                      <div key={lawyer._id} className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\n                        <div className=\"flex items-center space-x-3 mb-3\">\n                          <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                            <span className=\"text-green-600 font-semibold\">\n                              {lawyer.name.charAt(0)}\n                            </span>\n                          </div>\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-gray-900\">{lawyer.name}</h3>\n                            <p className=\"text-sm text-gray-600\">{lawyer.city}</p>\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex flex-wrap gap-1\">\n                            {lawyer.specialization?.slice(0, 3).map((spec) => (\n                              <Badge key={spec} variant=\"outline\" className=\"text-xs\">\n                                {spec}\n                              </Badge>\n                            ))}\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-500\">\n                              {lawyer.experience} years exp.\n                            </span>\n                            <Button size=\"sm\" variant=\"outline\">\n                              Connect\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        )}\n      </Tabs>\n    </div>\n  );\n}","size_bytes":24333},"client/src/pages/documents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Upload,\n  File,\n  FileText,\n  Image,\n  Download,\n  Trash2,\n  Search,\n  Filter,\n  FolderOpen,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Case } from \"@shared/schema\";\n\ninterface DocumentFile {\n  id: string;\n  name: string;\n  type: string;\n  size: number;\n  caseId: string;\n  caseTitle: string;\n  uploadedAt: Date;\n  url: string;\n}\n\nexport default function Documents() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [uploadingCaseId, setUploadingCaseId] = useState<string>(\"\");\n  const [dragOver, setDragOver] = useState(false);\n  const user = authService.getUser();\n  const queryClient = useQueryClient();\n\n  const { data: cases = [], isLoading: casesLoading } = useQuery<Case[]>({\n    queryKey: ['/api/cases'],\n  });\n\n  // Mock documents data - In real implementation, this would come from the API\n  const mockDocuments: DocumentFile[] = cases.flatMap((case_: Case) =>\n    (case_.documents || []).map((doc, index) => ({\n      id: `${case_._id}-${index}`,\n      name: doc,\n      type: doc.split('.').pop() || 'unknown',\n      size: Math.floor(Math.random() * 1000000) + 100000, // Mock size\n      caseId: case_._id!,\n      caseTitle: case_.title,\n      uploadedAt: case_.createdAt ? new Date(case_.createdAt) : new Date(),\n      url: `/api/uploads/${doc}`,\n    }))\n  );\n\n  const uploadDocuments = useMutation({\n    mutationFn: async ({ caseId, files }: { caseId: string; files: File[] }) => {\n      const formData = new FormData();\n      files.forEach(file => {\n        formData.append('documents', file);\n      });\n      formData.append('caseId', caseId);\n      \n      const response = await fetch('/api/cases/documents', {\n        method: 'POST',\n        headers: {\n          ...authService.getAuthHeaders(),\n        },\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to upload documents');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cases'] });\n      setSelectedFiles([]);\n      setUploadingCaseId(\"\");\n    },\n  });\n\n  const getFileIcon = (type: string) => {\n    switch (type.toLowerCase()) {\n      case 'pdf':\n        return <FileText className=\"h-8 w-8 text-red-500\" />;\n      case 'doc':\n      case 'docx':\n        return <FileText className=\"h-8 w-8 text-blue-500\" />;\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return <Image className=\"h-8 w-8 text-green-500\" />;\n      default:\n        return <File className=\"h-8 w-8 text-gray-500\" />;\n    }\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files) {\n      setSelectedFiles(Array.from(e.target.files));\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragOver(false);\n    \n    const files = Array.from(e.dataTransfer.files);\n    setSelectedFiles(files);\n  };\n\n  const handleUpload = () => {\n    if (selectedFiles.length > 0 && uploadingCaseId) {\n      uploadDocuments.mutate({ caseId: uploadingCaseId, files: selectedFiles });\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const filteredDocuments = mockDocuments.filter(doc =>\n    doc.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    doc.caseTitle.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const groupedDocuments = filteredDocuments.reduce((acc, doc) => {\n    if (!acc[doc.caseId]) {\n      acc[doc.caseId] = {\n        case: cases.find((c: Case) => c._id === doc.caseId),\n        documents: []\n      };\n    }\n    acc[doc.caseId].documents.push(doc);\n    return acc;\n  }, {} as Record<string, { case: Case | undefined; documents: DocumentFile[] }>);\n\n  if (casesLoading) {\n    return <div className=\"p-6\">Loading documents...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Modern Header */}\n      <div className=\"bg-gradient-to-r from-emerald-600 via-teal-600 to-cyan-600 text-white rounded-xl p-6 shadow-2xl\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-3 bg-white/20 rounded-lg backdrop-blur-sm\">\n            <FileText className=\"w-8 h-8 text-white\" />\n          </div>\n          <div>\n            <h2 className=\"text-3xl font-bold mb-1\">Document Vault</h2>\n            <p className=\"text-emerald-100 text-lg\">Secure document management for legal cases</p>\n            <div className=\"flex items-center mt-2 space-x-4 text-sm\">\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <span>Encrypted Storage</span>\n              </div>\n              <span>•</span>\n              <span>{mockDocuments.length} Documents</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Upload Section */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Upload Documents</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {/* Case Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Select Case\n              </label>\n              <select\n                value={uploadingCaseId}\n                onChange={(e) => setUploadingCaseId(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-legal-blue focus:border-transparent\"\n              >\n                <option value=\"\">Choose a case...</option>\n                {cases.map((case_: Case) => (\n                  <option key={case_._id} value={case_._id}>\n                    {case_.title}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* File Upload Area */}\n            <div\n              className={`border-2 border-dashed rounded-lg p-6 transition-colors ${\n                dragOver\n                  ? 'border-legal-blue bg-blue-50'\n                  : 'border-gray-300 hover:border-legal-blue'\n              }`}\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n              onDrop={handleDrop}\n            >\n              <div className=\"text-center\">\n                <Upload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <p className=\"text-lg font-medium text-gray-700 mb-2\">\n                  Drop files here or click to upload\n                </p>\n                <p className=\"text-sm text-gray-500 mb-4\">\n                  Support for PDF, DOC, DOCX, JPG, PNG files up to 10MB each\n                </p>\n                <input\n                  type=\"file\"\n                  multiple\n                  accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                  id=\"file-upload\"\n                />\n                <label\n                  htmlFor=\"file-upload\"\n                  className=\"bg-legal-blue text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors cursor-pointer inline-block\"\n                >\n                  Choose Files\n                </label>\n              </div>\n            </div>\n\n            {/* Selected Files */}\n            {selectedFiles.length > 0 && (\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-3\">Selected Files</h4>\n                <div className=\"space-y-2\">\n                  {selectedFiles.map((file, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        {getFileIcon(file.name.split('.').pop() || '')}\n                        <div>\n                          <p className=\"font-medium text-gray-900\">{file.name}</p>\n                          <p className=\"text-sm text-gray-500\">{formatFileSize(file.size)}</p>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFile(index)}\n                        className=\"text-red-500 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"flex items-center justify-between pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setSelectedFiles([])}\n                  >\n                    Clear All\n                  </Button>\n                  <Button\n                    onClick={handleUpload}\n                    disabled={!uploadingCaseId || uploadDocuments.isPending}\n                    className=\"bg-legal-blue hover:bg-blue-700 text-white\"\n                  >\n                    {uploadDocuments.isPending ? 'Uploading...' : 'Upload Files'}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Documents List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>All Documents</CardTitle>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  placeholder=\"Search documents...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {filteredDocuments.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <FolderOpen className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <p>No documents found</p>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {Object.entries(groupedDocuments).map(([caseId, { case: caseData, documents }]) => (\n                <div key={caseId} className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <h3 className=\"text-lg font-semibold text-gray-900\">\n                      {caseData?.title || 'Unknown Case'}\n                    </h3>\n                    <Badge variant=\"outline\">\n                      {documents.length} {documents.length === 1 ? 'document' : 'documents'}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {documents.map((doc) => (\n                      <div\n                        key={doc.id}\n                        className=\"p-4 border border-gray-200 rounded-lg hover:shadow-md transition-shadow\"\n                      >\n                        <div className=\"flex items-center space-x-3 mb-3\">\n                          {getFileIcon(doc.type)}\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"font-medium text-gray-900 truncate\">\n                              {doc.name}\n                            </p>\n                            <p className=\"text-sm text-gray-500\">\n                              {formatFileSize(doc.size)}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-xs text-gray-500 mb-3\">\n                          Uploaded {format(doc.uploadedAt, 'MMM d, yyyy')}\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"flex-1\"\n                            onClick={() => window.open(doc.url, '_blank')}\n                          >\n                            <Download className=\"mr-2 h-3 w-3\" />\n                            Download\n                          </Button>\n                          {user?.role === 'client' && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"text-red-500 hover:text-red-700\"\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14252},"client/src/pages/find-lawyers-old.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { MapPin, Star, Briefcase, MessageCircle } from 'lucide-react';\nimport type { User } from '@shared/schema';\nimport SimpleCaseForm from '@/components/SimpleCaseForm';\n\n// Simplified case request data type\ntype SimpleCaseRequestData = {\n  title: string;\n  description: string;\n  victimName: string;\n  accusedName: string;\n  lawyerId: string;\n};\n\nexport default function FindLawyers() {\n  const [selectedCity, setSelectedCity] = useState<string>('');\n  const [selectedCaseType, setSelectedCaseType] = useState<string>('');\n  const [selectedLawyer, setSelectedLawyer] = useState<User | null>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: lawyers = [], isLoading, error } = useQuery<User[]>({\n    queryKey: ['/api/users', { role: 'lawyer', city: selectedCity, caseType: selectedCaseType }],\n    queryFn: async () => {\n      const params = new URLSearchParams({ role: 'lawyer' });\n      if (selectedCity && selectedCity !== 'all') params.append('city', selectedCity);\n      if (selectedCaseType && selectedCaseType !== 'all') params.append('caseType', selectedCaseType);\n      const response = await apiRequest('GET', `/api/users?${params}`);\n      const data = await response.json();\n      // Filter data based on criteria\n      let filteredData = data;\n      if (selectedCity && selectedCity !== 'all') {\n        filteredData = filteredData.filter((lawyer: User) => lawyer.city === selectedCity);\n      }\n      if (selectedCaseType && selectedCaseType !== 'all') {\n        filteredData = filteredData.filter((lawyer: User) => \n          lawyer.specialization?.includes(selectedCaseType)\n        );\n      }\n      return filteredData as User[];\n    },\n  });\n\n  // Remove complex form setup - using simple component instead\n\n  const createCaseRequestMutation = useMutation({\n    mutationFn: async (data: SimpleCaseRequestData) => {\n      const response = await fetch('/api/case-requests', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to send case request');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Case Request Sent',\n        description: 'Your case request has been sent to the lawyer. You will be notified of their response.',\n      });\n      setIsDialogOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: ['/api/case-requests'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to send case request',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleCaseRequest = (data: SimpleCaseRequestData) => {\n    createCaseRequestMutation.mutate(data);\n  };\n\n  const handleSendRequest = (lawyer: User) => {\n    setSelectedLawyer(lawyer);\n    setIsDialogOpen(true);\n  };\n\n  const cities = Array.from(new Set(Array.isArray(lawyers) ? lawyers.map((l: User) => l.city).filter(Boolean) : []));\n  const caseTypes = ['fraud', 'theft', 'murder', 'civil', 'corporate'];\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Find Lawyers</h1>\n        <p className=\"text-gray-600\">Browse experienced lawyers and send case requests</p>\n      </div>\n\n      {/* Filters */}\n      <div className=\"flex flex-wrap gap-4 mb-8\">\n        <Select value={selectedCity} onValueChange={setSelectedCity}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by city\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Cities</SelectItem>\n            {Array.from(cities).filter(Boolean).map((city: string) => (\n              <SelectItem key={city} value={city}>{city}</SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n\n        <Select value={selectedCaseType} onValueChange={setSelectedCaseType}>\n          <SelectTrigger className=\"w-48\">\n            <SelectValue placeholder=\"Filter by case type\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Case Types</SelectItem>\n            {caseTypes.map(type => (\n              <SelectItem key={type} value={type}>\n                {type.charAt(0).toUpperCase() + type.slice(1)}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Lawyers Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {isLoading ? (\n          <div className=\"col-span-3 text-center py-8 text-gray-500\">\n            Loading lawyers...\n          </div>\n        ) : !Array.isArray(lawyers) || lawyers.length === 0 ? (\n          <div className=\"col-span-3 text-center py-8 text-gray-500\">\n            <p>No lawyers found matching your criteria</p>\n            <p className=\"text-sm mt-2\">Try adjusting your filters or check back later for more lawyers.</p>\n          </div>\n        ) : lawyers.map((lawyer: User) => (\n          <Card key={lawyer._id} className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader className=\"flex flex-row items-center space-y-0 pb-2\">\n              <Avatar className=\"h-12 w-12 mr-4\">\n                <AvatarImage src={lawyer.image} alt={lawyer.name} />\n                <AvatarFallback>{lawyer.name.split(' ').map((n: string) => n[0]).join('')}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <CardTitle className=\"text-lg\">{lawyer.name}</CardTitle>\n                <div className=\"flex items-center text-sm text-gray-500\">\n                  <MapPin className=\"h-4 w-4 mr-1\" />\n                  {lawyer.city}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center\">\n                  <Star className=\"h-4 w-4 text-yellow-500 mr-1\" />\n                  <span className=\"text-sm font-medium\">{lawyer.rating || 4.5}/5</span>\n                  <span className=\"text-sm text-gray-500 ml-2\">\n                    ({lawyer.stats?.totalCases || 0} cases)\n                  </span>\n                </div>\n\n                <div className=\"flex items-center\">\n                  <Briefcase className=\"h-4 w-4 mr-1\" />\n                  <span className=\"text-sm text-gray-600\">{lawyer.experience || 0} years experience</span>\n                </div>\n\n                <div className=\"flex flex-wrap gap-1\">\n                  {lawyer.specialization?.slice(0, 3).map((spec: string) => (\n                    <Badge key={spec} variant=\"secondary\" className=\"text-xs\">\n                      {spec}\n                    </Badge>\n                  ))}\n                </div>\n\n                {lawyer.description && (\n                  <p className=\"text-sm text-gray-600 line-clamp-2\">\n                    {lawyer.description}\n                  </p>\n                )}\n\n                <div className=\"flex gap-2 pt-2\">\n                  <Button \n                    onClick={() => handleSendRequest(lawyer)}\n                    className=\"flex-1\"\n                  >\n                    <MessageCircle className=\"h-4 w-4 mr-2\" />\n                    Send Request\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Case Request Dialog */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Send Case Request to {selectedLawyer?.name}</DialogTitle>\n            <DialogDescription>\n              Provide details about your case. The lawyer will review and respond to your request.\n            </DialogDescription>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem className=\"md:col-span-2\">\n                      <FormLabel>Case Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Brief title for your case\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"caseType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Case Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select case type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"fraud\">Fraud</SelectItem>\n                          <SelectItem value=\"theft\">Theft</SelectItem>\n                          <SelectItem value=\"murder\">Murder</SelectItem>\n                          <SelectItem value=\"civil\">Civil</SelectItem>\n                          <SelectItem value=\"corporate\">Corporate</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"city\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>City</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"City where case occurred\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Case Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Provide detailed description of your case...\"\n                        className=\"min-h-[100px]\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"space-y-4\">\n                <h3 className=\"font-semibold\">Victim Information</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"victim.name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Victim Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Full name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"victim.phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Contact number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"victim.email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"email@example.com\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <h3 className=\"font-semibold\">Accused Information</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"accused.name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Accused Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Full name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"accused.phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Contact number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"accused.address\"\n                    render={({ field }) => (\n                      <FormItem className=\"md:col-span-2\">\n                        <FormLabel>Address (Optional)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Full address\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"policeStationId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Police Station</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select police station\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {(policeStations as any[]).map((station: any) => (\n                          <SelectItem key={station._id} value={station._id}>\n                            {station.name} - {station.city}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end gap-3\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createCaseRequestMutation.isPending}\n                >\n                  {createCaseRequestMutation.isPending ? 'Sending...' : 'Send Request'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":17793},"client/src/pages/find-lawyers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { \n  Search,\n  Filter,\n  MapPin,\n  Star,\n  Calendar,\n  Award,\n  ChevronRight,\n  MessageCircle,\n  Phone,\n  Mail,\n  ExternalLink,\n  Users,\n  Briefcase,\n  Clock,\n  X\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport SimpleCaseForm from \"@/components/SimpleCaseForm\";\nimport type { Lawyer } from \"@shared/schema\";\n\nexport default function FindLawyers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCity, setSelectedCity] = useState(\"all\");\n  const [selectedSpecialization, setSelectedSpecialization] = useState(\"all\");\n  const [selectedLawyer, setSelectedLawyer] = useState<Lawyer | null>(null);\n  const [showCaseRequestModal, setShowCaseRequestModal] = useState(false);\n  const [requestingLawyer, setRequestingLawyer] = useState<Lawyer | null>(null);\n  \n  const user = authService.getUser();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: lawyers = [], isLoading } = useQuery<Lawyer[]>({\n    queryKey: ['/api/lawyers'],\n  });\n\n  const cities = [\"Delhi\", \"Mumbai\", \"Bangalore\", \"Chennai\", \"Kolkata\", \"Pune\", \"Hyderabad\"];\n  const specializations = [\"fraud\", \"theft\", \"murder\", \"civil\", \"corporate\"];\n\n  const filteredLawyers = lawyers.filter(lawyer => {\n    const matchesSearch = lawyer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      lawyer.city?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCity = selectedCity === \"all\" || lawyer.city === selectedCity;\n    const matchesSpec = selectedSpecialization === \"all\" || \n      lawyer.specialization?.includes(selectedSpecialization);\n    \n    return matchesSearch && matchesCity && matchesSpec;\n  });\n\n  // Mutation for creating case request\n  const createCaseRequest = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/case-requests', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Case Request Sent!\",\n        description: `Your case request has been sent to ${requestingLawyer?.name}. They will review and respond soon.`,\n      });\n      setShowCaseRequestModal(false);\n      setRequestingLawyer(null);\n      queryClient.invalidateQueries({ queryKey: ['/api/case-requests'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Sending Request\",\n        description: error.message || \"Failed to send case request. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendCaseRequest = (lawyer: Lawyer) => {\n    setRequestingLawyer(lawyer);\n    setShowCaseRequestModal(true);\n  };\n\n  const handleCaseRequestSubmit = (data: any) => {\n    createCaseRequest.mutate(data);\n  };\n\n  const handleCaseRequestCancel = () => {\n    setShowCaseRequestModal(false);\n    setRequestingLawyer(null);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading lawyers...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Enhanced Header */}\n      <div className=\"bg-gradient-to-r from-slate-900 via-emerald-900 to-teal-900 text-white rounded-xl p-6 shadow-2xl border border-emerald-300/20\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"p-3 bg-emerald-500/20 rounded-lg backdrop-blur-sm\">\n            <Users className=\"w-8 h-8 text-emerald-300\" />\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold mb-1 bg-gradient-to-r from-white to-emerald-100 bg-clip-text text-transparent\">\n              Legal Expert Network\n            </h1>\n            <p className=\"text-emerald-200 text-lg flex items-center space-x-2\">\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm\">Verified lawyers</span>\n              </div>\n              <span>•</span>\n              <span>Connect with qualified legal professionals</span>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <Card className=\"border-0 shadow-lg\">\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search lawyers or cities...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 h-12\"\n              />\n            </div>\n            \n            <Select value={selectedCity} onValueChange={setSelectedCity}>\n              <SelectTrigger className=\"h-12\">\n                <MapPin className=\"mr-2 h-4 w-4\" />\n                <SelectValue placeholder=\"Filter by city\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Cities</SelectItem>\n                {cities.map(city => (\n                  <SelectItem key={city} value={city}>{city}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={selectedSpecialization} onValueChange={setSelectedSpecialization}>\n              <SelectTrigger className=\"h-12\">\n                <Briefcase className=\"mr-2 h-4 w-4\" />\n                <SelectValue placeholder=\"Case type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Specializations</SelectItem>\n                {specializations.map(spec => (\n                  <SelectItem key={spec} value={spec} className=\"capitalize\">{spec}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Button className=\"h-12 bg-green-600 hover:bg-green-700 text-white\">\n              <Filter className=\"mr-2 h-4 w-4\" />\n              Apply Filters\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Lawyers List */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"border-0 shadow-lg\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center justify-between\">\n                <span className=\"flex items-center\">\n                  <Users className=\"mr-2 text-green-600\" size={20} />\n                  Available Lawyers ({filteredLawyers.length})\n                </span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ScrollArea className=\"h-[600px]\">\n                <div className=\"space-y-4\">\n                  {filteredLawyers.map((lawyer) => (\n                    <div \n                      key={lawyer._id} \n                      className={`group p-6 rounded-xl border-2 transition-all duration-200 cursor-pointer h-[260px] flex flex-col ${\n                        selectedLawyer?._id === lawyer._id\n                          ? 'border-green-500 bg-green-50 shadow-lg'\n                          : 'border-gray-200 hover:border-green-300 hover:shadow-md'\n                      }`}\n                      onClick={() => setSelectedLawyer(lawyer)}\n                    >\n                      <div className=\"flex items-start space-x-4 flex-1\">\n                        <Avatar className=\"w-16 h-16 flex-shrink-0\">\n                          <AvatarFallback className=\"bg-green-100 text-green-600 text-xl font-semibold\">\n                            {lawyer.name.charAt(0)}\n                          </AvatarFallback>\n                        </Avatar>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h3 className=\"text-xl font-bold text-gray-900 truncate\">{lawyer.name}</h3>\n                            <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                              <div className=\"flex items-center\">\n                                <Star className=\"text-yellow-500 fill-current\" size={16} />\n                                <span className=\"ml-1 text-sm font-medium\">4.8</span>\n                              </div>\n                              <ChevronRight \n                                className={`transition-transform ${\n                                  selectedLawyer?._id === lawyer._id ? 'rotate-90' : ''\n                                }`} \n                                size={16} \n                              />\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-3\">\n                            <div className=\"flex items-center\">\n                              <MapPin size={14} className=\"mr-1\" />\n                              {lawyer.city}\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Clock size={14} className=\"mr-1\" />\n                              {lawyer.experience} years exp.\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Award size={14} className=\"mr-1\" />\n                              85% Success Rate\n                            </div>\n                          </div>\n\n                          <div className=\"flex flex-wrap gap-2 mb-4 h-[60px] overflow-hidden\">\n                            {lawyer.specialization?.slice(0, 3).map((spec) => (\n                              <Badge \n                                key={spec} \n                                variant=\"outline\" \n                                className=\"bg-green-50 text-green-700 border-green-200 capitalize text-xs\"\n                              >\n                                {spec}\n                              </Badge>\n                            ))}\n                            {lawyer.specialization && lawyer.specialization.length > 3 && (\n                              <Badge variant=\"outline\" className=\"bg-gray-50 text-gray-600 border-gray-200 text-xs\">\n                                +{lawyer.specialization.length - 3} more\n                              </Badge>\n                            )}\n                          </div>\n\n                          <div className=\"flex items-center justify-between mt-auto\">\n                            <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                              <span>{lawyer.stats?.totalCases || 3} total cases</span>\n                              <span>•</span>\n                              <span>{lawyer.stats?.wonCases || 2} won</span>\n                            </div>\n                            \n                            <Button \n                              onClick={(e) => {\n                                e.stopPropagation();\n                                handleSendCaseRequest(lawyer);\n                              }}\n                              className=\"bg-green-600 hover:bg-green-700 text-white flex-shrink-0\"\n                            >\n                              <MessageCircle className=\"mr-2\" size={16} />\n                              Send Case Request\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Lawyer Profile Detail */}\n        <div className=\"lg:col-span-1\">\n          <Card className=\"border-0 shadow-lg sticky top-6\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center\">\n                <Award className=\"mr-2 text-green-600\" size={20} />\n                Lawyer Profile\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {selectedLawyer ? (\n                <div className=\"space-y-6\">\n                  {/* Enhanced Profile Header */}\n                  <div className=\"text-center bg-gradient-to-br from-blue-50 to-indigo-100 rounded-2xl p-6 border border-blue-200/50\">\n                    <Avatar className=\"w-20 h-20 mx-auto mb-4 ring-4 ring-blue-200\">\n                      <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-indigo-600 text-white text-2xl font-bold\">\n                        {selectedLawyer.name.charAt(0)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <h3 className=\"text-2xl font-bold text-gray-900 mb-1\">{selectedLawyer.name}</h3>\n                    <p className=\"text-gray-600 font-medium mb-3\">{selectedLawyer.city}</p>\n                    <div className=\"flex items-center justify-center bg-white/70 rounded-full px-4 py-2 backdrop-blur-sm\">\n                      <div className=\"flex items-center\">\n                        <Star className=\"text-yellow-500 fill-current\" size={18} />\n                        <span className=\"ml-2 text-lg font-bold text-gray-900\">4.8</span>\n                      </div>\n                      <span className=\"text-gray-400 mx-2\">•</span>\n                      <span className=\"text-sm text-gray-600 font-medium\">127 reviews</span>\n                    </div>\n                  </div>\n\n                  <Separator />\n\n                  {/* Enhanced Quick Stats */}\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center p-5 bg-gradient-to-br from-emerald-50 to-green-100 rounded-2xl border border-emerald-200/50 shadow-sm\">\n                      <Briefcase className=\"w-8 h-8 text-emerald-600 mx-auto mb-2\" />\n                      <div className=\"text-3xl font-bold text-emerald-600 mb-1\">{selectedLawyer.stats?.totalCases || 3}</div>\n                      <div className=\"text-sm font-medium text-gray-600\">Total Cases</div>\n                    </div>\n                    <div className=\"text-center p-5 bg-gradient-to-br from-blue-50 to-indigo-100 rounded-2xl border border-blue-200/50 shadow-sm\">\n                      <Award className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n                      <div className=\"text-3xl font-bold text-blue-600 mb-1\">{selectedLawyer.stats?.wonCases || 2}</div>\n                      <div className=\"text-sm font-medium text-gray-600\">Cases Won</div>\n                    </div>\n                  </div>\n\n                  {/* Enhanced Specializations */}\n                  <div className=\"bg-gray-50 rounded-2xl p-5\">\n                    <h4 className=\"font-bold text-gray-900 mb-4 flex items-center\">\n                      <Award className=\"mr-2 text-blue-600\" size={18} />\n                      Specializations\n                    </h4>\n                    <div className=\"flex flex-wrap gap-3\">\n                      {selectedLawyer.specialization?.map((spec) => (\n                        <Badge \n                          key={spec} \n                          className=\"bg-gradient-to-r from-blue-100 to-indigo-100 text-blue-800 border border-blue-200 capitalize px-3 py-2 text-sm font-semibold\"\n                        >\n                          {spec}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Enhanced Contact Actions */}\n                  <div className=\"space-y-4\">\n                    <Button \n                      className=\"w-full bg-gradient-to-r from-emerald-600 to-green-600 hover:from-emerald-700 hover:to-green-700 text-white h-14 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-300 rounded-xl\"\n                      onClick={() => handleSendCaseRequest(selectedLawyer)}\n                    >\n                      <MessageCircle className=\"mr-3\" size={20} />\n                      Send Case Request\n                    </Button>\n                    \n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <Button \n                        variant=\"outline\" \n                        className=\"h-12 border-2 border-blue-200 hover:bg-blue-50 hover:border-blue-300 text-blue-700 font-medium rounded-xl transition-all\"\n                      >\n                        <Phone className=\"mr-2\" size={18} />\n                        Call\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        className=\"h-12 border-2 border-indigo-200 hover:bg-indigo-50 hover:border-indigo-300 text-indigo-700 font-medium rounded-xl transition-all\"\n                      >\n                        <Mail className=\"mr-2\" size={18} />\n                        Email\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Enhanced Quick Facts */}\n                  <div className=\"p-6 bg-gradient-to-br from-slate-50 to-gray-100 rounded-2xl border border-gray-200/50\">\n                    <h4 className=\"font-bold text-gray-900 mb-4 flex items-center\">\n                      <Clock className=\"mr-2 text-purple-600\" size={18} />\n                      Quick Facts\n                    </h4>\n                    <div className=\"space-y-3 text-sm\">\n                      <div className=\"flex justify-between items-center py-2 border-b border-gray-200/50\">\n                        <span className=\"text-gray-600 font-medium\">Response Time:</span>\n                        <Badge className=\"bg-green-100 text-green-700 font-semibold\">\n                          &lt; 2 hours\n                        </Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center py-2 border-b border-gray-200/50\">\n                        <span className=\"text-gray-600 font-medium\">Cases Handled:</span>\n                        <span className=\"font-bold text-gray-900\">{selectedLawyer.stats?.totalCases || 3}+</span>\n                      </div>\n                      <div className=\"flex justify-between items-center py-2\">\n                        <span className=\"text-gray-600 font-medium\">Languages:</span>\n                        <span className=\"font-bold text-gray-900\">Hindi, English</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Users className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                  <p className=\"text-gray-500\">Select a lawyer to view their profile</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Case Request Modal */}\n      <Dialog open={showCaseRequestModal} onOpenChange={setShowCaseRequestModal}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center justify-between\">\n              <span>Send Case Request</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleCaseRequestCancel}\n                className=\"h-6 w-6 p-0\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </DialogTitle>\n          </DialogHeader>\n          \n          {requestingLawyer && (\n            <SimpleCaseForm\n              lawyerName={requestingLawyer.name}\n              lawyerId={requestingLawyer._id!}\n              onSubmit={handleCaseRequestSubmit}\n              onCancel={handleCaseRequestCancel}\n              isSubmitting={createCaseRequest.isPending}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20883},"client/src/pages/lawyers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Search } from \"lucide-react\";\nimport LawyerCard from \"@/components/LawyerCard\";\nimport LawyerProfileModal from \"@/components/LawyerProfileModal\";\nimport ClientCaseForm from \"@/components/ClientCaseForm\";\nimport WinLossChart from \"@/components/WinLossChart\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { authService } from \"@/lib/auth\";\nimport type { Lawyer } from \"@shared/schema\";\n\nexport default function Lawyers() {\n  const [filters, setFilters] = useState({\n    city: \"\",\n    caseType: \"\",\n  });\n  const [selectedLawyer, setSelectedLawyer] = useState<Lawyer | null>(null);\n  const [showProfileModal, setShowProfileModal] = useState(false);\n  const [showCaseForm, setShowCaseForm] = useState(false);\n  const { toast } = useToast();\n  const user = authService.getUser();\n\n  const { data: lawyers = [], isLoading } = useQuery({\n    queryKey: ['/api/lawyers', filters.city, filters.caseType],\n    queryFn: ({ queryKey }) => {\n      const url = new URL('/api/lawyers', window.location.origin);\n      if (queryKey[1]) url.searchParams.set('city', queryKey[1] as string);\n      if (queryKey[2]) url.searchParams.set('caseType', queryKey[2] as string);\n      return fetch(url.toString()).then(res => res.json());\n    },\n  });\n\n  const handleSearch = () => {\n    // The query will automatically refetch due to the dependency on filters\n  };\n\n  const handleSelectLawyer = (lawyer: Lawyer) => {\n    setSelectedLawyer(lawyer);\n    setShowProfileModal(true);\n  };\n\n  const handleChooseLawyer = (lawyer: Lawyer) => {\n    setSelectedLawyer(lawyer);\n    setShowProfileModal(false);\n    setShowCaseForm(true);\n  };\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <h2 className=\"text-3xl font-bold text-gray-900\">Find Lawyers</h2>\n          {user?.role === 'client' && (\n            <Button\n              onClick={() => setShowCaseForm(true)}\n              className=\"bg-legal-blue hover:bg-blue-700 text-white\"\n            >\n              Request Legal Help\n            </Button>\n          )}\n        </div>\n\n        {/* Search Filters */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label htmlFor=\"caseType\">Case Type</Label>\n                <Select\n                  value={filters.caseType}\n                  onValueChange={(value) => setFilters(prev => ({ ...prev, caseType: value === 'all' ? '' : value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select case type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Types</SelectItem>\n                    <SelectItem value=\"fraud\">Fraud</SelectItem>\n                    <SelectItem value=\"theft\">Theft</SelectItem>\n                    <SelectItem value=\"murder\">Murder</SelectItem>\n                    <SelectItem value=\"civil\">Civil</SelectItem>\n                    <SelectItem value=\"corporate\">Corporate</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"city\">City</Label>\n                <Select\n                  value={filters.city}\n                  onValueChange={(value) => setFilters(prev => ({ ...prev, city: value === 'all' ? '' : value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select city\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Cities</SelectItem>\n                    <SelectItem value=\"delhi\">Delhi</SelectItem>\n                    <SelectItem value=\"mumbai\">Mumbai</SelectItem>\n                    <SelectItem value=\"bangalore\">Bangalore</SelectItem>\n                    <SelectItem value=\"chennai\">Chennai</SelectItem>\n                    <SelectItem value=\"kolkata\">Kolkata</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex items-end\">\n                <Button\n                  onClick={handleSearch}\n                  className=\"bg-legal-blue hover:bg-blue-700 text-white w-full\"\n                >\n                  <Search className=\"mr-2 h-4 w-4\" />\n                  Search Lawyers\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 h-[600px]\">\n        {/* Lawyers List */}\n        <div className=\"lg:col-span-2\">\n          <Card className=\"h-[600px]\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle>Available Lawyers</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {isLoading ? (\n                <div className=\"text-center py-8\">Loading lawyers...</div>\n              ) : lawyers.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  No lawyers found matching your criteria\n                </div>\n              ) : (\n                <ScrollArea className=\"h-[520px] px-6\">\n                  <div className=\"space-y-4 py-2\">\n                    {lawyers.map((lawyer: Lawyer) => (\n                      <LawyerCard\n                        key={lawyer._id}\n                        lawyer={lawyer}\n                        onSelect={handleSelectLawyer}\n                      />\n                    ))}\n                  </div>\n                </ScrollArea>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Lawyer Profile */}\n        <div className=\"h-[600px]\">\n          <Card className=\"h-[600px]\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-base\">Lawyer Profile</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <ScrollArea className=\"h-[520px]\">\n              <div className=\"px-4 py-2\">\n              {selectedLawyer ? (\n                <div className=\"space-y-6\">\n                  <div className=\"text-center\">\n                    <div className=\"w-20 h-20 bg-legal-blue rounded-full mx-auto mb-4 flex items-center justify-center text-white text-2xl font-bold\">\n                      {selectedLawyer.name.split(' ').map(n => n[0]).join('')}\n                    </div>\n                    <h4 className=\"text-lg font-bold text-gray-900\">{selectedLawyer.name}</h4>\n                    <p className=\"text-legal-blue font-medium\">\n                      {selectedLawyer.specialization.join(', ')} Law Specialist\n                    </p>\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      {selectedLawyer.experience} years experience\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                      <p className=\"text-2xl font-bold text-legal-blue\">\n                        {selectedLawyer.stats.totalCases}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">Total Cases</p>\n                    </div>\n                    <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                      <p className=\"text-2xl font-bold text-legal-emerald\">\n                        {selectedLawyer.stats.wonCases}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">Won Cases</p>\n                    </div>\n                    <div className=\"text-center p-4 bg-red-50 rounded-lg\">\n                      <p className=\"text-2xl font-bold text-red-500\">\n                        {selectedLawyer.stats.lostCases}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">Lost Cases</p>\n                    </div>\n                  </div>\n\n                  <div>\n                    <h5 className=\"font-medium text-gray-900 mb-3\">Win/Loss Statistics</h5>\n                    <WinLossChart \n                      wonCases={selectedLawyer.stats.wonCases}\n                      lostCases={selectedLawyer.stats.lostCases}\n                    />\n                  </div>\n\n                  <div>\n                    <h5 className=\"font-medium text-gray-900 mb-3\">Specializations</h5>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {selectedLawyer.specialization.map((spec, index) => (\n                        <span\n                          key={index}\n                          className=\"px-3 py-1 bg-legal-blue text-white text-sm rounded-full\"\n                        >\n                          {spec} Law\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-3\">\n                    <Button \n                      onClick={() => handleChooseLawyer(selectedLawyer)}\n                      className=\"flex-1 bg-legal-blue hover:bg-blue-700 text-white\"\n                    >\n                      Send Case Request\n                    </Button>\n                    <Button \n                      onClick={() => setShowProfileModal(true)}\n                      variant=\"outline\"\n                    >\n                      View Full Profile\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  Select a lawyer to view their profile\n                </div>\n              )}\n              </div>\n              </ScrollArea>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Lawyer Profile Modal */}\n      <LawyerProfileModal\n        lawyer={selectedLawyer}\n        isOpen={showProfileModal}\n        onClose={() => setShowProfileModal(false)}\n        onSelectLawyer={user?.role === 'client' ? handleChooseLawyer : undefined}\n      />\n\n      {/* Client Case Form */}\n      <ClientCaseForm\n        isOpen={showCaseForm}\n        onClose={() => setShowCaseForm(false)}\n        selectedLawyer={selectedLawyer}\n      />\n    </div>\n  );\n}\n","size_bytes":10807},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Scale, User, UserCheck, Shield, Mail, Lock, Phone, MapPin, Briefcase, GraduationCap, Eye, EyeOff } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { LoginData, AuthResponse, InsertUser } from \"@shared/schema\";\n\nconst CASE_SPECIALIZATIONS = [\n  'fraud', 'theft', 'murder', 'civil', 'corporate'\n];\n\nconst CITIES = [\n  'Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Kolkata', 'Pune', 'Hyderabad', 'Ahmedabad'\n];\n\nexport default function Login() {\n  const [, navigate] = useLocation();\n  const [activeTab, setActiveTab] = useState(\"login\");\n  \n  // Login state\n  const [loginData, setLoginData] = useState<LoginData>({\n    email: \"\",\n    password: \"\",\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [showSignupPassword, setShowSignupPassword] = useState(false);\n\n  // Signup state\n  const [selectedRole, setSelectedRole] = useState<'client' | 'lawyer' | 'police' | ''>('');\n  const [signupData, setSignupData] = useState<Partial<InsertUser>>({\n    role: undefined,\n    name: '',\n    email: '',\n    password: '',\n    phone: '',\n    city: '',\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData): Promise<AuthResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      authService.setToken(data.token);\n      authService.setUser(data.user);\n      navigate(\"/dashboard\");\n    },\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: InsertUser) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      setActiveTab(\"login\");\n      // Clear signup form\n      setSignupData({\n        role: undefined,\n        name: '',\n        email: '',\n        password: '',\n        phone: '',\n        city: '',\n      });\n      setSelectedRole('');\n    },\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData);\n  };\n\n  const handleSignup = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (signupData.role && signupData.name && signupData.email && signupData.password && signupData.phone) {\n      signupMutation.mutate(signupData as InsertUser);\n    }\n  };\n\n  const handleLoginChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setLoginData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const handleSignupChange = (field: string, value: string | number) => {\n    setSignupData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSpecializationChange = (specialization: string) => {\n    const current = signupData.specialization || [];\n    const updated = current.includes(specialization) \n      ? current.filter(s => s !== specialization)\n      : [...current, specialization];\n    setSignupData(prev => ({ ...prev, specialization: updated }));\n  };\n\n  const handleRoleSelect = (role: 'client' | 'lawyer' | 'police') => {\n    setSelectedRole(role);\n    setSignupData(prev => ({ ...prev, role }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-6\">\n            <div className=\"bg-blue-600 p-4 rounded-2xl shadow-lg\">\n              <Scale className=\"text-white text-3xl\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">LegalCaseMS</h1>\n          <p className=\"text-gray-600 text-lg\">Professional Legal Case Management System</p>\n        </div>\n\n        <Card className=\"shadow-lg border-0 backdrop-blur-sm bg-white/90 w-full max-w-md mx-auto\">\n          <CardContent className=\"p-6\">\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n              <TabsList className=\"grid w-full grid-cols-2 h-10 bg-gray-100 rounded-lg p-1\">\n                <TabsTrigger \n                  value=\"login\" \n                  className=\"h-10 rounded-lg font-semibold data-[state=active]:bg-white data-[state=active]:shadow-sm\"\n                >\n                  Sign In\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"signup\" \n                  className=\"h-10 rounded-lg font-semibold data-[state=active]:bg-white data-[state=active]:shadow-sm\"\n                >\n                  Sign Up\n                </TabsTrigger>\n              </TabsList>\n            \n            {/* Login Tab */}\n            <TabsContent value=\"login\" className=\"space-y-6\">\n              <div className=\"text-center mb-4\">\n                <h2 className=\"text-xl font-semibold text-gray-800\">Welcome Back</h2>\n                <p className=\"text-gray-600 mt-1\">Sign in to access your legal cases</p>\n              </div>\n              \n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                {loginMutation.error && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription>\n                      {(loginMutation.error as any)?.message || 'Login failed'}\n                    </AlertDescription>\n                  </Alert>\n                )}\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-email\" className=\"text-base font-medium flex items-center gap-2\">\n                    <Mail size={16} />\n                    Email Address\n                  </Label>\n                  <Input\n                    id=\"login-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email address\"\n                    value={loginData.email}\n                    onChange={handleLoginChange}\n                    required\n                    className=\"h-10 text-sm\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"login-password\" className=\"text-base font-medium flex items-center gap-2\">\n                    <Lock size={16} />\n                    Password\n                  </Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"login-password\"\n                      name=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      placeholder=\"Enter your password\"\n                      value={loginData.password}\n                      onChange={handleLoginChange}\n                      required\n                      className=\"h-10 text-sm pr-10\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-1 top-1 h-10 w-10 p-0 hover:bg-gray-100\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                    </Button>\n                  </div>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full h-10 text-sm bg-blue-600 hover:bg-blue-700\"\n                  disabled={loginMutation.isPending}\n                >\n                  {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                </Button>\n              </form>\n\n\n            </TabsContent>\n\n            {/* Signup Tab */}\n            <TabsContent value=\"signup\" className=\"space-y-4\">\n              <div className=\"text-center mb-4\">\n                <h2 className=\"text-xl font-semibold text-gray-800\">Create Account</h2>\n                <p className=\"text-gray-600 mt-1\">Join our legal case management platform</p>\n              </div>\n\n              {!selectedRole ? (\n                <div className=\"max-w-2xl mx-auto\">\n                  <h3 className=\"text-base font-medium text-center mb-4\">Select Your Role</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <Card \n                      className=\"cursor-pointer hover:shadow-lg transition-all border-2 hover:border-blue-500\"\n                      onClick={() => handleRoleSelect('client')}\n                    >\n                      <CardContent className=\"p-4 text-center\">\n                        <User className=\"text-blue-500 mx-auto mb-3\" size={36} />\n                        <h4 className=\"font-semibold text-base mb-2\">Client</h4>\n\n                      </CardContent>\n                    </Card>\n                    \n                    <Card \n                      className=\"cursor-pointer hover:shadow-lg transition-all border-2 hover:border-green-500\"\n                      onClick={() => handleRoleSelect('lawyer')}\n                    >\n                      <CardContent className=\"p-4 text-center\">\n                        <UserCheck className=\"text-green-500 mx-auto mb-3\" size={36} />\n                        <h4 className=\"font-semibold text-base mb-2\">Lawyer</h4>\n\n                      </CardContent>\n                    </Card>\n                    \n                    <Card \n                      className=\"cursor-pointer hover:shadow-lg transition-all border-2 hover:border-purple-500\"\n                      onClick={() => handleRoleSelect('police')}\n                    >\n                      <CardContent className=\"p-4 text-center\">\n                        <Shield className=\"text-purple-500 mx-auto mb-3\" size={36} />\n                        <h4 className=\"font-semibold text-base mb-2\">Police Officer</h4>\n\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"max-w-2xl mx-auto\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h3 className=\"text-lg font-medium\">\n                      Registration as {selectedRole.charAt(0).toUpperCase() + selectedRole.slice(1)}\n                    </h3>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => {\n                        setSelectedRole('');\n                        setSignupData(prev => ({ ...prev, role: undefined }));\n                      }}\n                    >\n                      Change Role\n                    </Button>\n                  </div>\n\n                  <form onSubmit={handleSignup} className=\"space-y-6\">\n                    {signupMutation.error && (\n                      <Alert variant=\"destructive\">\n                        <AlertDescription>\n                          {(signupMutation.error as any)?.message || 'Registration failed'}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    {signupMutation.isSuccess && (\n                      <Alert>\n                        <AlertDescription>\n                          Registration successful! Please switch to the login tab to sign in.\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"signup-name\" className=\"text-base font-medium flex items-center gap-2\">\n                          <User size={16} />\n                          Full Name\n                        </Label>\n                        <Input\n                          id=\"signup-name\"\n                          placeholder=\"Enter your full name\"\n                          value={signupData.name}\n                          onChange={(e) => handleSignupChange('name', e.target.value)}\n                          required\n                          className=\"h-12 text-base\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"signup-email\" className=\"text-base font-medium flex items-center gap-2\">\n                          <Mail size={16} />\n                          Email Address\n                        </Label>\n                        <Input\n                          id=\"signup-email\"\n                          type=\"email\"\n                          placeholder=\"Enter your email\"\n                          value={signupData.email}\n                          onChange={(e) => handleSignupChange('email', e.target.value)}\n                          required\n                          className=\"h-12 text-base\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"signup-password\" className=\"text-base font-medium flex items-center gap-2\">\n                          <Lock size={16} />\n                          Password\n                        </Label>\n                        <div className=\"relative\">\n                          <Input\n                            id=\"signup-password\"\n                            type={showSignupPassword ? \"text\" : \"password\"}\n                            placeholder=\"Create a password\"\n                            value={signupData.password}\n                            onChange={(e) => handleSignupChange('password', e.target.value)}\n                            required\n                            className=\"h-12 text-base pr-12\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-1 top-1 h-10 w-10 p-0 hover:bg-gray-100\"\n                            onClick={() => setShowSignupPassword(!showSignupPassword)}\n                          >\n                            {showSignupPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                          </Button>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"signup-phone\" className=\"text-base font-medium flex items-center gap-2\">\n                          <Phone size={16} />\n                          Phone Number\n                        </Label>\n                        <Input\n                          id=\"signup-phone\"\n                          placeholder=\"Enter your phone number\"\n                          value={signupData.phone}\n                          onChange={(e) => handleSignupChange('phone', e.target.value)}\n                          required\n                          className=\"h-12 text-base\"\n                        />\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"signup-city\" className=\"text-base font-medium flex items-center gap-2\">\n                          <MapPin size={16} />\n                          City\n                        </Label>\n                        <Select\n                          value={signupData.city}\n                          onValueChange={(value) => handleSignupChange('city', value)}\n                        >\n                          <SelectTrigger className=\"h-12 text-base\">\n                            <SelectValue placeholder=\"Select your city\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {CITIES.map(city => (\n                              <SelectItem key={city} value={city}>{city}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      {selectedRole === 'lawyer' && (\n                        <>\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"signup-experience\" className=\"text-base font-medium flex items-center gap-2\">\n                              <GraduationCap size={16} />\n                              Experience (Years)\n                            </Label>\n                            <Input\n                              id=\"signup-experience\"\n                              type=\"number\"\n                              placeholder=\"Years of experience\"\n                              value={signupData.experience || ''}\n                              onChange={(e) => handleSignupChange('experience', parseInt(e.target.value) || 0)}\n                              className=\"h-12 text-base\"\n                            />\n                          </div>\n\n                          <div className=\"md:col-span-2 space-y-2\">\n                            <Label className=\"text-base font-medium flex items-center gap-2\">\n                              <Briefcase size={16} />\n                              Specializations\n                            </Label>\n                            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-2\">\n                              {CASE_SPECIALIZATIONS.map(spec => (\n                                <Button\n                                  key={spec}\n                                  type=\"button\"\n                                  variant={signupData.specialization?.includes(spec) ? \"default\" : \"outline\"}\n                                  size=\"sm\"\n                                  onClick={() => handleSpecializationChange(spec)}\n                                  className=\"text-xs capitalize\"\n                                >\n                                  {spec}\n                                </Button>\n                              ))}\n                            </div>\n                          </div>\n                        </>\n                      )}\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full h-12 text-base bg-blue-600 hover:bg-blue-700\"\n                      disabled={signupMutation.isPending}\n                    >\n                      {signupMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                    </Button>\n                  </form>\n                </div>\n              )}\n            </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":19165},"client/src/pages/messages.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { \n  Send,\n  Search,\n  Phone,\n  Video,\n  MoreVertical,\n  Paperclip,\n  Smile,\n  Circle,\n  CheckCheck,\n  Clock,\n  Users,\n  MessageSquare\n} from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Message, User } from \"@shared/schema\";\n\nexport default function Messages() {\n  const [selectedContact, setSelectedContact] = useState<User | null>(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n  \n  const user = authService.getUser();\n\n  const { data: contacts = [], isLoading: contactsLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n\n  // Get user's cases to show assigned lawyers\n  const { data: userCases = [] } = useQuery<any[]>({\n    queryKey: ['/api/cases'],\n  });\n\n  const { data: messages = [], isLoading: messagesLoading } = useQuery<Message[]>({\n    queryKey: ['/api/messages'],\n    enabled: !!selectedContact,\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { receiverId: string; content: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/messages\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/messages'] });\n      setNewMessage(\"\");\n    },\n  });\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim() || !selectedContact) return;\n    \n    sendMessageMutation.mutate({\n      receiverId: selectedContact._id || '',\n      content: newMessage,\n    });\n  };\n\n  // Get assigned lawyers for this user's cases\n  const getAssignedLawyers = () => {\n    if (user?.role !== 'client') return [];\n    return userCases\n      .filter((c: any) => c.lawyerId)\n      .map((c: any) => ({ \n        lawyerId: c.lawyerId, \n        caseTitle: c.title,\n        caseStatus: c.status \n      }));\n  };\n\n  const assignedLawyers = getAssignedLawyers();\n  const assignedLawyerIds = assignedLawyers.map((l: any) => l.lawyerId);\n\n  // Filter and sort contacts - prioritize assigned lawyers for clients\n  const filteredContacts = contacts\n    .filter(contact => {\n      // Exclude self\n      if (contact._id === user?._id) return false;\n      \n      // Apply search filter\n      const matchesSearch = contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        contact.email?.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      // For clients, show lawyers they have cases with + all lawyers\n      if (user?.role === 'client') {\n        return matchesSearch && contact.role === 'lawyer';\n      }\n      \n      // For lawyers, show clients they have cases with + all clients\n      if (user?.role === 'lawyer') {\n        return matchesSearch && contact.role === 'client';\n      }\n      \n      // For police, show all users\n      return matchesSearch;\n    })\n    .sort((a, b) => {\n      // For clients, sort assigned lawyers to the top\n      if (user?.role === 'client') {\n        const aIsAssigned = assignedLawyerIds.includes(a._id);\n        const bIsAssigned = assignedLawyerIds.includes(b._id);\n        if (aIsAssigned && !bIsAssigned) return -1;\n        if (!aIsAssigned && bIsAssigned) return 1;\n      }\n      return a.name.localeCompare(b.name);\n    });\n\n  const getConversationMessages = () => {\n    if (!selectedContact) return [];\n    return messages.filter(msg => \n      (msg.senderId === user?._id && msg.receiverId === selectedContact._id) ||\n      (msg.senderId === selectedContact._id && msg.receiverId === user?._id)\n    ).sort((a, b) => new Date(a.timestamp || 0).getTime() - new Date(b.timestamp || 0).getTime());\n  };\n\n  const getLastMessage = (contactId: string) => {\n    const contactMessages = messages.filter(msg => \n      (msg.senderId === user?._id && msg.receiverId === contactId) ||\n      (msg.senderId === contactId && msg.receiverId === user?._id)\n    );\n    return contactMessages.sort((a, b) => \n      new Date(b.timestamp || 0).getTime() - new Date(a.timestamp || 0).getTime()\n    )[0];\n  };\n\n  const conversationMessages = getConversationMessages();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-slate-900 via-purple-900 to-slate-900 text-white rounded-xl p-6 shadow-2xl border border-purple-300/20\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"bg-purple-500/20 p-3 rounded-lg backdrop-blur-sm\">\n            <MessageSquare className=\"w-8 h-8 text-purple-300\" />\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold mb-1 bg-gradient-to-r from-white to-purple-100 bg-clip-text text-transparent\">\n              Secure Messaging\n            </h1>\n            <p className=\"text-purple-200 text-lg flex items-center space-x-2\">\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm\">End-to-end encrypted</span>\n              </div>\n              <span>•</span>\n              <span>Legal team communication</span>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[600px]\">\n        {/* Contacts Sidebar */}\n        <Card className=\"border border-purple-200/50 shadow-xl bg-gradient-to-b from-white to-purple-50/30 lg:col-span-1 backdrop-blur-sm h-[600px]\">\n          <CardContent className=\"p-0\">\n            {/* Search Header */}\n            <div className=\"p-4 border-b border-purple-200/50 bg-gradient-to-r from-purple-50 to-white\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-purple-500\" />\n                <Input\n                  placeholder=\"Search conversations...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 border-purple-200 focus:border-purple-400 focus:ring-purple-400/20\"\n                  data-testid=\"input-search-conversations\"\n                />\n              </div>\n              <div className=\"mt-3 flex items-center justify-between text-sm\">\n                <span className=\"text-purple-700 font-medium\">\n                  {filteredContacts.length} conversation{filteredContacts.length !== 1 ? 's' : ''}\n                </span>\n                <div className=\"flex items-center space-x-1 text-green-600\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-xs font-medium\">ONLINE</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Conversations List */}\n            <ScrollArea className=\"h-[calc(100%-120px)]\">\n              <div className=\"p-2\">\n                {contactsLoading ? (\n                  <div className=\"flex items-center justify-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n                  </div>\n                ) : filteredContacts.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Users className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                    <p className=\"text-gray-500\">No contacts found</p>\n                  </div>\n                ) : (\n                  filteredContacts.map((contact) => {\n                    const lastMessage = getLastMessage(contact._id || '');\n                    const isSelected = selectedContact?._id === contact._id;\n                    const isAssignedLawyer = user?.role === 'client' && assignedLawyerIds.includes(contact._id);\n                    const assignedCase = assignedLawyers.find((l: any) => l.lawyerId === contact._id);\n                    \n                    return (\n                      <div\n                        key={contact._id}\n                        onClick={() => setSelectedContact(contact)}\n                        className={`flex items-center space-x-3 p-4 rounded-xl cursor-pointer transition-all duration-200 mx-2 mb-2 ${\n                          isSelected \n                            ? 'bg-gradient-to-r from-purple-500 to-purple-600 shadow-lg shadow-purple-500/25 text-white border border-purple-400' \n                            : 'hover:bg-white hover:shadow-md border border-transparent hover:border-purple-200'\n                        } ${isAssignedLawyer ? 'ring-2 ring-green-400 bg-green-50/80' : ''}`}\n                        data-testid={`contact-${contact._id}`}\n                      >\n                        <div className=\"relative\">\n                          <Avatar className=\"w-12 h-12\">\n                            <AvatarFallback className={`${\n                              contact.role === 'lawyer' ? 'bg-green-100 text-green-600' :\n                              contact.role === 'client' ? 'bg-blue-100 text-blue-600' :\n                              'bg-purple-100 text-purple-600'\n                            } font-semibold`}>\n                              {contact.name.charAt(0)}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full\"></div>\n                          {isAssignedLawyer && (\n                            <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-blue-500 border-2 border-white rounded-full flex items-center justify-center\">\n                              <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                            </div>\n                          )}\n                        </div>\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <h3 className=\"font-semibold text-gray-900 truncate\">{contact.name}</h3>\n                            {lastMessage && (\n                              <span className=\"text-xs text-gray-500\">\n                                {new Date(lastMessage.timestamp || 0).toLocaleTimeString([], {\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                })}\n                              </span>\n                            )}\n                          </div>\n                          \n                          {isAssignedLawyer && assignedCase && (\n                            <div className=\"mb-1\">\n                              <Badge variant=\"secondary\" className=\"text-xs bg-blue-100 text-blue-700 border-blue-200\">\n                                Assigned • {assignedCase.caseTitle}\n                              </Badge>\n                            </div>\n                          )}\n                          \n                          <div className=\"flex items-center justify-between\">\n                            <p className=\"text-sm text-gray-600 truncate\">\n                              {lastMessage \n                                ? (lastMessage.senderId === user?._id ? 'You: ' : '') + lastMessage.content\n                                : 'No messages yet'\n                              }\n                            </p>\n                            <Badge \n                              variant=\"outline\" \n                              className={`text-xs capitalize ${\n                                contact.role === 'lawyer' ? 'text-green-600 border-green-200' :\n                                contact.role === 'client' ? 'text-blue-600 border-blue-200' :\n                                'text-purple-600 border-purple-200'\n                              }`}\n                            >\n                              {contact.role}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })\n                )}\n              </div>\n            </ScrollArea>\n          </CardContent>\n        </Card>\n\n        {/* Chat Area */}\n        <Card className=\"border border-purple-200/50 shadow-xl bg-white lg:col-span-2 backdrop-blur-sm h-[600px]\">\n          <CardContent className=\"p-0 h-full flex flex-col overflow-hidden\">\n            {selectedContact ? (\n              <>\n                {/* Chat Header */}\n                <div className=\"p-2 border-b border-purple-200/50 bg-gradient-to-r from-white to-purple-50/30 rounded-t-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"relative\">\n                        <Avatar className=\"w-12 h-12 ring-2 ring-purple-200\">\n                          <AvatarFallback className={`${\n                            selectedContact.role === 'lawyer' ? 'bg-green-100 text-green-600' :\n                            selectedContact.role === 'client' ? 'bg-blue-100 text-blue-600' :\n                            'bg-purple-100 text-purple-600'\n                          } font-bold text-lg`}>\n                            {selectedContact.name.charAt(0)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full animate-pulse\"></div>\n                      </div>\n                      <div>\n                        <h3 className=\"font-bold text-gray-900 text-lg\">{selectedContact.name}</h3>\n                        <div className=\"flex items-center space-x-2\">\n                          <Circle className=\"w-3 h-3 fill-green-500 text-green-500 animate-pulse\" />\n                          <span className=\"text-sm text-gray-600 capitalize font-medium\">\n                            {selectedContact.role} • Active now\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-purple-100 hover:text-purple-600\" data-testid=\"button-call\">\n                        <Phone size={18} />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-purple-100 hover:text-purple-600\" data-testid=\"button-video\">\n                        <Video size={18} />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-purple-100 hover:text-purple-600\" data-testid=\"button-more\">\n                        <MoreVertical size={18} />\n                      </Button>\n                      <div className=\"ml-4 px-3 py-1 bg-green-100 text-green-700 text-xs font-bold rounded-full\">\n                        SECURE\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Messages */}\n                <ScrollArea className=\"h-[420px] p-4\">\n                  <div className=\"space-y-2\">\n                    {messagesLoading ? (\n                      <div className=\"flex items-center justify-center py-8\">\n                        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n                      </div>\n                    ) : conversationMessages.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <MessageSquare className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                        <p className=\"text-gray-500\">No messages yet. Start the conversation!</p>\n                      </div>\n                    ) : (\n                      conversationMessages.map((message) => {\n                        const isOwnMessage = message.senderId === user?._id;\n                        \n                        return (\n                          <div\n                            key={message._id}\n                            className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}\n                          >\n                            <div className={`max-w-xs lg:max-w-md px-4 py-3 rounded-xl shadow-sm ${\n                              isOwnMessage\n                                ? 'bg-gradient-to-r from-purple-600 to-purple-700 text-white shadow-purple-500/20'\n                                : 'bg-white border border-gray-200 text-gray-900 shadow-gray-200/50'\n                            }`}>\n                              <p className=\"text-sm\">{message.content}</p>\n                              <div className={`flex items-center justify-end mt-1 space-x-1 ${\n                                isOwnMessage ? 'text-purple-200' : 'text-gray-500'\n                              }`}>\n                                <span className=\"text-xs\">\n                                  {new Date(message.timestamp || 0).toLocaleTimeString([], {\n                                    hour: '2-digit',\n                                    minute: '2-digit'\n                                  })}\n                                </span>\n                                {isOwnMessage && (\n                                  <CheckCheck size={14} className=\"text-purple-300\" />\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      })\n                    )}\n                    <div ref={messagesEndRef} />\n                  </div>\n                </ScrollArea>\n\n                {/* Message Input */}\n                <div className=\"p-6 border-t border-purple-200/50 bg-gradient-to-r from-white to-purple-50/20\">\n                  <div className=\"flex items-end space-x-4 bg-white border-2 border-purple-200 rounded-2xl p-4 shadow-xl hover:shadow-2xl transition-all duration-300\">\n                    <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-purple-100 hover:text-purple-600 rounded-xl p-3\" data-testid=\"button-attach\">\n                      <Paperclip size={20} />\n                    </Button>\n                    \n                    <div className=\"flex-1 relative\">\n                      <textarea\n                        placeholder=\"Type your message here...\"\n                        value={newMessage}\n                        onChange={(e) => {\n                          setNewMessage(e.target.value);\n                          // Auto-resize functionality\n                          e.target.style.height = 'auto';\n                          e.target.style.height = Math.min(e.target.scrollHeight, 80) + 'px';\n                        }}\n                        onKeyPress={(e) => {\n                          if (e.key === 'Enter' && !e.shiftKey) {\n                            e.preventDefault();\n                            handleSendMessage();\n                          }\n                        }}\n                        className=\"w-full min-h-[36px] max-h-20 resize-none border-0 bg-gray-50 rounded-lg px-3 py-2 focus:bg-white focus:ring-2 focus:ring-purple-300 focus:outline-none font-medium placeholder:text-gray-500 text-gray-900 text-sm leading-normal transition-all duration-200\"\n                        rows={1}\n                        data-testid=\"textarea-message\"\n                      />\n                    </div>\n                    \n                    <Button variant=\"ghost\" size=\"sm\" className=\"hover:bg-purple-100 hover:text-purple-600 rounded-xl p-3\" data-testid=\"button-emoji\">\n                      <Smile size={20} />\n                    </Button>\n                    \n                    <Button \n                      onClick={handleSendMessage}\n                      disabled={!newMessage.trim() || sendMessageMutation.isPending}\n                      className=\"bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white h-12 px-6 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 font-semibold\"\n                      data-testid=\"button-send-message\"\n                    >\n                      {sendMessageMutation.isPending ? (\n                        <Clock size={20} className=\"animate-spin\" />\n                      ) : (\n                        <Send size={20} />\n                      )}\n                    </Button>\n                  </div>\n\n                </div>\n              </>\n            ) : (\n              <div className=\"flex-1 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <MessageSquare className=\"mx-auto text-gray-400 mb-4\" size={64} />\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Select a Conversation</h3>\n                  <p className=\"text-gray-500\">Choose a contact from the sidebar to start messaging</p>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":21854},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Scale, User, UserCheck, Shield } from \"lucide-react\";\nimport { authService } from \"@/lib/auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { InsertUser, PoliceStation } from \"@shared/schema\";\n\nconst CASE_SPECIALIZATIONS = [\n  'fraud', 'theft', 'murder', 'civil', 'corporate'\n];\n\nconst CITIES = [\n  'Delhi', 'Mumbai', 'Bangalore', 'Chennai', 'Kolkata', 'Pune', 'Hyderabad', 'Ahmedabad'\n];\n\nexport default function Signup() {\n  const [, navigate] = useLocation();\n  const [step, setStep] = useState(1);\n  const [selectedRole, setSelectedRole] = useState<'client' | 'lawyer' | 'police' | ''>('');\n  const [formData, setFormData] = useState<Partial<InsertUser>>({\n    role: undefined,\n    name: '',\n    email: '',\n    password: '',\n    phone: '',\n    city: '',\n  });\n\n  // Police stations will be automatically assigned based on city\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: InsertUser) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      navigate(\"/login?registered=true\");\n    },\n  });\n\n  const handleRoleSelect = (role: 'client' | 'lawyer' | 'police') => {\n    setSelectedRole(role);\n    setFormData(prev => ({ ...prev, role }));\n    setStep(2);\n  };\n\n  const handleInputChange = (field: string, value: string | number) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSpecializationChange = (specialization: string) => {\n    const current = formData.specialization || [];\n    const updated = current.includes(specialization) \n      ? current.filter(s => s !== specialization)\n      : [...current, specialization];\n    setFormData(prev => ({ ...prev, specialization: updated }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (formData.role && formData.name && formData.email && formData.password && formData.phone) {\n      signupMutation.mutate(formData as InsertUser);\n    }\n  };\n\n  const canProceed = () => {\n    if (selectedRole === 'client') {\n      return formData.name && formData.email && formData.password && formData.phone && formData.city;\n    } else if (selectedRole === 'lawyer') {\n      return formData.name && formData.email && formData.password && formData.phone && formData.city && \n             formData.specialization?.length && formData.experience;\n    } else if (selectedRole === 'police') {\n      return formData.name && formData.email && formData.password && formData.phone && formData.city;\n    }\n    return false;\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case 'client': return <User className=\"h-8 w-8\" />;\n      case 'lawyer': return <UserCheck className=\"h-8 w-8\" />;\n      case 'police': return <Shield className=\"h-8 w-8\" />;\n      default: return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-legal-gray flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <Scale className=\"text-legal-blue text-3xl\" />\n            <CardTitle className=\"text-2xl font-bold text-legal-blue\">\n              LegalCaseMS\n            </CardTitle>\n          </div>\n          <p className=\"text-gray-600\">Create your account</p>\n        </CardHeader>\n        <CardContent>\n          {step === 1 && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center mb-6\">\n                <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">Choose Your Role</h3>\n                <p className=\"text-sm text-gray-600\">Select how you'll be using the platform</p>\n              </div>\n              \n              <div className=\"grid gap-4 md:grid-cols-3\">\n                <Card \n                  className=\"cursor-pointer hover:border-legal-blue hover:shadow-md transition-all\"\n                  onClick={() => handleRoleSelect('client')}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <User className=\"h-12 w-12 text-legal-blue mx-auto mb-3\" />\n                    <h4 className=\"font-semibold text-gray-800 mb-2\">Client</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      I need legal assistance and want to file cases\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card \n                  className=\"cursor-pointer hover:border-legal-blue hover:shadow-md transition-all\"\n                  onClick={() => handleRoleSelect('lawyer')}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <UserCheck className=\"h-12 w-12 text-legal-blue mx-auto mb-3\" />\n                    <h4 className=\"font-semibold text-gray-800 mb-2\">Lawyer</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      I provide legal services and represent clients\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card \n                  className=\"cursor-pointer hover:border-legal-blue hover:shadow-md transition-all\"\n                  onClick={() => handleRoleSelect('police')}\n                >\n                  <CardContent className=\"p-6 text-center\">\n                    <Shield className=\"h-12 w-12 text-legal-blue mx-auto mb-3\" />\n                    <h4 className=\"font-semibold text-gray-800 mb-2\">Police Officer</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      I review and approve case submissions\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          )}\n\n          {step === 2 && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                {getRoleIcon(selectedRole)}\n                <div>\n                  <h3 className=\"text-lg font-semibold capitalize\">{selectedRole} Registration</h3>\n                  <p className=\"text-sm text-gray-600\">Fill in your information</p>\n                </div>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"name\">Full Name</Label>\n                    <Input\n                      id=\"name\"\n                      placeholder=\"Enter your full name\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange('name', e.target.value)}\n                      required\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone Number</Label>\n                    <Input\n                      id=\"phone\"\n                      placeholder=\"+91 9876543210\"\n                      value={formData.phone}\n                      onChange={(e) => handleInputChange('phone', e.target.value)}\n                      required\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    required\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Create a password (min 6 characters)\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange('password', e.target.value)}\n                    required\n                    minLength={6}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"city\">City</Label>\n                  <Select value={formData.city} onValueChange={(value) => handleInputChange('city', value)}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select your city\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {CITIES.map(city => (\n                        <SelectItem key={city} value={city}>{city}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {selectedRole === 'lawyer' && (\n                  <>\n                    <div className=\"space-y-2\">\n                      <Label>Specialization Areas</Label>\n                      <div className=\"grid gap-2 grid-cols-2 md:grid-cols-3\">\n                        {CASE_SPECIALIZATIONS.map(spec => (\n                          <label key={spec} className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              checked={formData.specialization?.includes(spec) || false}\n                              onChange={() => handleSpecializationChange(spec)}\n                              className=\"rounded\"\n                            />\n                            <span className=\"text-sm capitalize\">{spec}</span>\n                          </label>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"experience\">Years of Experience</Label>\n                      <Input\n                        id=\"experience\"\n                        type=\"number\"\n                        min=\"0\"\n                        placeholder=\"Enter years of experience\"\n                        value={formData.experience || ''}\n                        onChange={(e) => handleInputChange('experience', parseInt(e.target.value) || 0)}\n                        required\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"description\">Professional Description (Optional)</Label>\n                      <Textarea\n                        id=\"description\"\n                        placeholder=\"Tell us about your practice and experience...\"\n                        value={formData.description || ''}\n                        onChange={(e) => handleInputChange('description', e.target.value)}\n                        rows={3}\n                      />\n                    </div>\n                  </>\n                )}\n\n                {selectedRole === 'police' && formData.city && (\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-md p-3\">\n                    <p className=\"text-sm text-blue-800\">\n                      <strong>Note:</strong> You will be automatically assigned to the main police station in {formData.city}.\n                    </p>\n                  </div>\n                )}\n\n                {signupMutation.error && (\n                  <Alert variant=\"destructive\">\n                    <AlertDescription>\n                      {(signupMutation.error as any)?.message || \"Registration failed\"}\n                    </AlertDescription>\n                  </Alert>\n                )}\n\n                <div className=\"flex space-x-4 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setStep(1)}\n                    className=\"flex-1\"\n                  >\n                    Back\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    className=\"flex-1 bg-legal-blue hover:bg-blue-700\"\n                    disabled={signupMutation.isPending || !canProceed()}\n                  >\n                    {signupMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n                  </Button>\n                </div>\n              </form>\n            </div>\n          )}\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Already have an account?{\" \"}\n              <Link href=\"/login\" className=\"text-legal-blue hover:underline\">\n                Sign in\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13248},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-3 w-full grow overflow-hidden rounded-full bg-gradient-to-r from-gray-200 to-gray-300 shadow-inner\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-gradient-to-r from-blue-500 to-blue-600 shadow-sm\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-6 w-6 rounded-full border-3 border-white bg-gradient-to-br from-blue-500 to-blue-600 shadow-lg ring-offset-background transition-all duration-200 hover:scale-110 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 cursor-pointer\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1245},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"README-DEPLOYMENT.md":{"content":"# Legal Case Management System - Deployment Guide\n\n## Quick Deploy to Render\n\nThis application is ready for deployment on Render with all necessary configuration files included.\n\n### 1. Prerequisites Setup\n\nBefore deploying, you'll need accounts for these services:\n\n**MongoDB Atlas** (Database)\n- Sign up at [MongoDB Atlas](https://www.mongodb.com/cloud/atlas)\n- Create a new cluster\n- Get your connection string\n\n**Cloudinary** (File Storage) \n- Sign up at [Cloudinary](https://cloudinary.com/)\n- Get your cloud name, API key, and API secret from dashboard\n\n**SendGrid** (Email Service)\n- Sign up at [SendGrid](https://sendgrid.com/)\n- Create an API key with mail sending permissions\n\n### 2. Deploy to Render\n\n**Option A: One-Click Deploy (Recommended)**\n1. Fork this repository to your GitHub account\n2. Go to [Render Dashboard](https://dashboard.render.com/)\n3. Click \"New +\" → \"Web Service\"\n4. Connect your GitHub repository\n5. Render will automatically detect the `render.yaml` configuration\n6. Set the environment variables (see below)\n7. Click \"Create Web Service\"\n\n**Option B: Manual Configuration**\n1. Create a new Web Service on Render\n2. Connect your repository\n3. Set build command: `npm install && npm run build`\n4. Set start command: `npm start`\n5. Add environment variables\n\n### 3. Environment Variables\n\nSet these in your Render service settings:\n\n```env\nNODE_ENV=production\nMONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/legal-case-management\nJWT_SECRET=[Generate random string]\nSESSION_SECRET=[Generate random string]\nSENDGRID_API_KEY=your-sendgrid-key\nCLOUDINARY_CLOUD_NAME=your-cloud-name\nCLOUDINARY_API_KEY=your-api-key\nCLOUDINARY_API_SECRET=your-api-secret\n```\n\n### 4. Post-Deployment\n\nAfter deployment:\n1. Your app will be available at: `https://your-app-name.onrender.com`\n2. Database will be automatically seeded with sample data\n3. You can log in with sample accounts:\n   - Client: `alice.client@example.com` / `password123`\n   - Lawyer: `john.lawyer@example.com` / `password123`\n   - Police: `officer.police@example.com` / `password123`\n\n### 5. Features Included\n\n✅ Full-stack React + Node.js application  \n✅ MongoDB database with automatic seeding  \n✅ JWT authentication & sessions  \n✅ File upload with Cloudinary  \n✅ Email notifications with SendGrid  \n✅ Role-based access control  \n✅ Real-time messaging system  \n✅ Case management workflow  \n✅ Document handling  \n✅ Calendar integration  \n\n### 6. Troubleshooting\n\n**Build Failures:**\n- Check that all environment variables are set\n- Verify MongoDB connection string format\n- Ensure repository has all required files\n\n**Runtime Issues:**\n- Check application logs in Render dashboard\n- Verify external service credentials\n- Test database connectivity\n\n**File Upload Issues:**\n- Confirm Cloudinary credentials are correct\n- Check API key permissions\n\n### 7. Architecture\n\n- **Frontend**: React 18 + TypeScript + Tailwind CSS\n- **Backend**: Express.js + TypeScript\n- **Database**: MongoDB with Mongoose ODM\n- **Authentication**: JWT + Express Sessions\n- **File Storage**: Cloudinary\n- **Email**: SendGrid\n- **Build**: Vite + ESBuild\n- **Deployment**: Render (Node.js runtime)\n\nThe application is production-ready with proper error handling, security measures, and scalable architecture.","size_bytes":3302},"RENDER_DEPLOYMENT_CHECKLIST.md":{"content":"# Render Deployment Checklist\n\n## ✅ Files Created for Deployment\n\n### Configuration Files\n- [x] `render.yaml` - Automatic service configuration for Render\n- [x] `Dockerfile` - Container configuration (optional)\n- [x] `.dockerignore` - Docker ignore rules\n- [x] `.env.example` - Environment variables template\n- [x] `server/config.ts` - Production configuration management\n\n### Documentation\n- [x] `deployment-instructions.md` - Detailed deployment guide\n- [x] `README-DEPLOYMENT.md` - Quick deployment guide\n- [x] `RENDER_DEPLOYMENT_CHECKLIST.md` - This checklist\n\n### Dependencies\n- [x] Build dependencies moved to production dependencies\n- [x] All required packages installed\n- [x] Build process tested and working\n\n## ✅ Application Ready for Deployment\n\n### Build System\n- [x] Frontend builds successfully with Vite\n- [x] Backend builds successfully with ESBuild\n- [x] Static files are properly generated\n- [x] Production build tested locally\n\n### Environment Configuration\n- [x] Environment variables properly configured\n- [x] Production config separated from development\n- [x] Database connection ready for MongoDB Atlas\n- [x] External services (Cloudinary, SendGrid) configured\n\n### Security\n- [x] JWT authentication implemented\n- [x] Session management with secrets\n- [x] CORS properly configured\n- [x] File upload security with Cloudinary\n- [x] Input validation and sanitization\n\n## 📋 Deployment Steps\n\n### 1. External Services Setup\n- [ ] Create MongoDB Atlas cluster\n- [ ] Get MongoDB connection string\n- [ ] Create Cloudinary account and get credentials\n- [ ] Create SendGrid account and get API key\n\n### 2. Render Deployment\n- [ ] Connect GitHub repository to Render\n- [ ] Use `render.yaml` for automatic configuration OR\n- [ ] Manual setup with build/start commands\n- [ ] Add environment variables in Render dashboard\n- [ ] Deploy service\n\n### 3. Environment Variables to Set\n```\nNODE_ENV=production\nMONGODB_URI=mongodb+srv://user:pass@cluster.mongodb.net/legal-case-management\nJWT_SECRET=[random-string]\nSESSION_SECRET=[random-string] \nSENDGRID_API_KEY=[your-key]\nCLOUDINARY_CLOUD_NAME=[your-name]\nCLOUDINARY_API_KEY=[your-key]\nCLOUDINARY_API_SECRET=[your-secret]\n```\n\n## 🚀 Post-Deployment Verification\n\n- [ ] Application loads successfully\n- [ ] Database connection works\n- [ ] User registration/login works\n- [ ] File uploads work (documents)\n- [ ] Email notifications work\n- [ ] All user roles function (client, lawyer, police)\n- [ ] Case management features work\n- [ ] Messaging system works\n\n## 📱 Features Included\n\n- [x] Full-stack application (React + Node.js)\n- [x] MongoDB database with automatic seeding\n- [x] User authentication and authorization\n- [x] Role-based access control (Client, Lawyer, Police)\n- [x] Case management system\n- [x] Document upload and management\n- [x] Real-time messaging\n- [x] Email notifications\n- [x] Calendar and scheduling\n- [x] Lawyer search and filtering\n- [x] Dashboard analytics\n- [x] Responsive design\n- [x] Dark mode support\n\n## 🔧 Technical Stack\n\n- **Frontend**: React 18, TypeScript, Tailwind CSS, Vite\n- **Backend**: Express.js, TypeScript, Node.js\n- **Database**: MongoDB with Mongoose ODM\n- **Authentication**: JWT + Express Sessions\n- **File Storage**: Cloudinary\n- **Email**: SendGrid\n- **Build Tools**: Vite, ESBuild\n- **Deployment**: Render (Node.js runtime)\n\n## 💡 Notes\n\n- The application is production-ready with proper error handling\n- Database will be automatically seeded with sample data on first run\n- All security best practices are implemented\n- The build process generates optimized static files\n- Environment variables are properly managed for different environments\n\n✅ **Ready for Render deployment!**","size_bytes":3703},"deployment-instructions.md":{"content":"# Deployment Instructions for Render\n\n## Prerequisites\n1. MongoDB Atlas account and connection string\n2. Cloudinary account (for file uploads)\n3. SendGrid account (for emails)\n\n## Required Environment Variables\n\nSet these environment variables in your Render dashboard:\n\n### Database\n- `MONGODB_URI`: Your MongoDB Atlas connection string\n\n### Authentication\n- `JWT_SECRET`: Random string for JWT tokens (auto-generated by Render)\n- `SESSION_SECRET`: Random string for sessions (auto-generated by Render)\n\n### Email Service\n- `SENDGRID_API_KEY`: Your SendGrid API key\n\n### File Upload Service\n- `CLOUDINARY_CLOUD_NAME`: Your Cloudinary cloud name\n- `CLOUDINARY_API_KEY`: Your Cloudinary API key\n- `CLOUDINARY_API_SECRET`: Your Cloudinary API secret\n\n### System\n- `NODE_ENV`: Set to \"production\"\n\n## Deployment Steps\n\n### Option 1: Using render.yaml (Recommended)\n1. Connect your GitHub repository to Render\n2. The `render.yaml` file will automatically configure the service\n3. Set the required environment variables in the Render dashboard\n4. Deploy!\n\n### Option 2: Manual Setup\n1. Create a new Web Service on Render\n2. Connect your GitHub repository\n3. Set the following:\n   - **Build Command**: `npm install && npm run build`\n   - **Start Command**: `npm start`\n   - **Environment**: Node.js\n4. Add all the environment variables listed above\n5. Deploy the service\n\n### Option 3: Docker Deployment\n1. Use the provided Dockerfile\n2. Build and push to a container registry\n3. Deploy using Render's Docker support\n\n## Database Setup\n\nYour MongoDB connection string should look like:\n```\nmongodb+srv://username:password@cluster.mongodb.net/legal-case-management?retryWrites=true&w=majority\n```\n\nThe application will automatically:\n- Connect to MongoDB\n- Seed the database with initial data (if empty)\n- Create necessary collections\n\n## File Storage\n\nThe app uses Cloudinary for file uploads. Make sure to:\n1. Create a Cloudinary account\n2. Get your cloud name, API key, and API secret\n3. Add them to your environment variables\n\n## Post-Deployment\n\nAfter successful deployment:\n1. Visit your app URL\n2. Register a new account or use seeded accounts\n3. Test all functionality including file uploads and emails\n\n## Troubleshooting\n\nIf deployment fails:\n1. Check the build logs in Render dashboard\n2. Ensure all environment variables are set correctly\n3. Verify MongoDB connection string is valid\n4. Check that your repository has all required files\n\n## Production Considerations\n\n1. **Security**: The app includes proper authentication and authorization\n2. **File Uploads**: Uses Cloudinary for secure file storage\n3. **Email**: Uses SendGrid for reliable email delivery\n4. **Database**: Uses MongoDB Atlas for scalable database hosting\n5. **Sessions**: Uses secure session management with proper secrets","size_bytes":2797},"render.yaml":{"content":"services:\n  - type: web\n    name: legal-case-management\n    env: node\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: mongodb+srv://akmnop001:PSJeQE4XmC2mp60p@cluster0.qg6k5aj.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\n        sync: false\n      - key: your_secret_key\n        generateValue: true\n      - key: SESSION_SECRET\n        generateValue: true\n      - key: SENDGRID_API_KEY\n        sync: false\n      - key: dilguh8md\n        sync: false\n      - key: 132959357398862\n        sync: false\n      - key: FLdDMBrp6pGe6BQh9dSkJmGV7_E\n        sync: false","size_bytes":670},"server/config.ts":{"content":"// Production configuration\nexport const config = {\n  port: process.env.PORT || 5000,\n  nodeEnv: process.env.NODE_ENV || 'development',\n  mongoUri: process.env.MONGODB_URI || 'mongodb://localhost:27017/legal-case-management',\n  jwtSecret: process.env.JWT_SECRET || 'dev-jwt-secret-key',\n  sessionSecret: process.env.SESSION_SECRET || 'dev-session-secret-key',\n  \n  // Email configuration\n  sendgrid: {\n    apiKey: process.env.SENDGRID_API_KEY || '',\n  },\n  \n  // Cloudinary configuration\n  cloudinary: {\n    cloudName: process.env.CLOUDINARY_CLOUD_NAME || '',\n    apiKey: process.env.CLOUDINARY_API_KEY || '',\n    apiSecret: process.env.CLOUDINARY_API_SECRET || '',\n  },\n  \n  // CORS configuration for production\n  cors: {\n    origin: process.env.FRONTEND_URL || true,\n    credentials: true,\n  }\n};\n\nexport const isDev = config.nodeEnv === 'development';\nexport const isProd = config.nodeEnv === 'production';","size_bytes":909},"client/src/components/ui/force-refresh.tsx":{"content":"// Force refresh component to ensure UI changes are applied\nexport const ForceRefresh = () => {\n  return <div key={Date.now()} className=\"hidden\" />;\n};","size_bytes":152}}}